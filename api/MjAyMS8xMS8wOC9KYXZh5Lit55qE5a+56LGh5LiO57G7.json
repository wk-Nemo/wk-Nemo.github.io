{"title":"Java中的对象与类","date":"2021-11-08T09:06:13.000Z","date_formatted":{"ll":"Nov 8, 2021","L":"11/08/2021","MM-DD":"11-08"},"link":"2021/11/08/Java中的对象与类","categories":["Java"],"updated":"2023-05-17T12:22:02.101Z","content":"<h2 id=\"1.-面向的对象程序设计概述\">1. 面向的对象程序设计概述<a title=\"#1.-面向的对象程序设计概述\" href=\"#1.-面向的对象程序设计概述\"></a></h2>\n<h3 id=\"1.1-类\">1.1 类<a title=\"#1.1-类\" href=\"#1.1-类\"></a></h3>\n<p>**定义：**类是构造对象的模板或蓝图。由类构造对象的过程称为创建类的实例。</p>\n<p>**封装：**是处理对象的一个重要概念。从行为上来看封装就是将数据和行为组合在一个包中，并对对象的使用者隐藏具体的实现方法。</p>\n<ul>\n<li>其中对象的数据称为<strong>实例字段</strong></li>\n<li>操作数据的过程称为<strong>方法</strong></li>\n</ul>\n<p>**继承：**通过扩展一个类来建立另一个类的过程称为继承</p>\n<h3 id=\"1.2-对象\">1.2 对象<a title=\"#1.2-对象\" href=\"#1.2-对象\"></a></h3>\n<ul>\n<li>同一个类的所有对象实例，由于支持相同的行为而具有家族式的<strong>相似性</strong>。</li>\n<li>每个对象都保存着当前描述当前状况的信息，这就是对象的<strong>状态</strong>。\n<ul>\n<li>对象的状态可能会随时间发生改变，但不是自发的</li>\n<li>对象状态的改变必须通过调用方法实现</li>\n</ul>\n</li>\n<li>每一个对象都有一个唯一的标识。作为同一个类的实例，每个对象的标识总是不同的，状态往往也存在着差异。</li>\n</ul>\n<h3 id=\"1.3-类之间的关系\">1.3 类之间的关系<a title=\"#1.3-类之间的关系\" href=\"#1.3-类之间的关系\"></a></h3>\n<p>类之间最常见的关系有：</p>\n<ul>\n<li>依赖（“uses-a”）</li>\n<li>聚合（“has-a”）</li>\n<li>继承（“is-a”）</li>\n</ul>\n<h2 id=\"2.-自定义类\">2. 自定义类<a title=\"#2.-自定义类\" href=\"#2.-自定义类\"></a></h2>\n<p>类 = 构造器 + 实例字段 + 方法</p>\n<h3 id=\"2.1-构造器\">2.1 构造器<a title=\"#2.1-构造器\" href=\"#2.1-构造器\"></a></h3>\n<ul>\n<li>构造器与类同名</li>\n<li>每个类可以有一个以上的构造器</li>\n<li>构造器可以有0个、1个或多个参数</li>\n<li>构造器没有返回值</li>\n<li>构造器总是伴随着new操作符一起调用</li>\n</ul>\n<p><strong>1. 重载</strong></p>\n<p>一个类可以有多个构造器，这种功能叫做重载。编译器必须挑出具体的方法：</p>\n<ul>\n<li>如果匹配不到适合的参数，就会编译错误</li>\n<li>如果找到合适的，就会调用该构造器</li>\n</ul>\n<p><strong>2. 默认字段初始化</strong></p>\n<p>如果构造器中没有显示地为字段设置初始值，那么就会被自动的赋为默认值：</p>\n<ul>\n<li>数值：0</li>\n<li>布尔值：false</li>\n<li>对象：null</li>\n</ul>\n<p><strong>3. 无参数的构造器</strong></p>\n<p>很多类都会包含一个无参数构造器，又无参数构造器创建对象时，对象状态会置为适当的默认值</p>\n<ul>\n<li>如果一个类没有编写构造器，则会默认提供一个无参数构造器</li>\n<li>如果一个类提供了一个构造器（不是无参数构造器），那么构造对象时如果不提供参数就会报错</li>\n</ul>\n<p><strong>4. 初始化数据字段</strong></p>\n<ul>\n<li>构造器中设置</li>\n<li>声明中设置</li>\n<li>使用初始化块</li>\n</ul>\n<h3 id=\"2.2-隐式参数与显示参数\">2.2 隐式参数与显示参数<a title=\"#2.2-隐式参数与显示参数\" href=\"#2.2-隐式参数与显示参数\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> salary</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">raiseSalary</span><span class=\"params\">(<span class=\"type\">double</span> byPercent)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">raise</span> <span class=\"operator\">=</span> salary * byPercent / <span class=\"number\">100</span>;</span><br><span class=\"line\">        salary += raise</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们调用这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Employee</span> <span class=\"variable\">number007</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"number\">1000</span>)</span><br><span class=\"line\">number007.raiseSalary(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>其实执行的具体过程如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">raise</span> <span class=\"operator\">=</span> number007.salary * byPercent / <span class=\"number\">100</span>;</span><br><span class=\"line\">number007.salary += raise</span><br></pre></td></tr></table></figure>\n<p><code>raiseSalary</code>有两个参数：</p>\n<ul>\n<li>\n<p>隐式参数，就是这里的<code>number007</code>。关键字this可以指向隐式参数，因此这个方法可以这样写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">raiseSalary</span><span class=\"params\">(<span class=\"type\">double</span> byPercent)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">raise</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.salary * byPercent / <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.salary += raise</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>显示参数，跟在方法名后括号中的数值</p>\n</li>\n</ul>\n<h3 id=\"2.3-基于类的访问权限\">2.3 基于类的访问权限<a title=\"#2.3-基于类的访问权限\" href=\"#2.3-基于类的访问权限\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Employee other)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name.equals(other.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(harry.equals(boss)) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为<code>boss</code>是<code>Employee</code>类型的对象，而<code>Employee</code>类的方法可以访问任何<code>Employee</code>类型对象的私有字段</p>\n<h3 id=\"2.4-私有方法\">2.4 私有方法<a title=\"#2.4-私有方法\" href=\"#2.4-私有方法\"></a></h3>\n<p>大多数方法设计为公共的，但在一些情况下设计成私有的更有用：</p>\n<ul>\n<li>一个公共函数的辅助方法，不需要称为公共接口的一部分</li>\n</ul>\n<h3 id=\"2.5-final-实例字段\">2.5 final 实例字段<a title=\"#2.5-final-实例字段\" href=\"#2.5-final-实例字段\"></a></h3>\n<p>定义为final的实例字段，必须确保在每一个构造器执行之后，这个字段已经被设置，并且以后不能修改这个字段</p>\n<h2 id=\"3.-静态字段和静态方法\">3. 静态字段和静态方法<a title=\"#3.-静态字段和静态方法\" href=\"#3.-静态字段和静态方法\"></a></h2>\n<p>接下来我们讨论<code>static</code>修饰符</p>\n<h3 id=\"3.1-静态字段\">3.1 静态字段<a title=\"#3.1-静态字段\" href=\"#3.1-静态字段\"></a></h3>\n<p>如果将一个字段定义为<code>static</code>，那么它将属于这个类：</p>\n<ul>\n<li>非静态的实例字段，每个对象都有一个自己的副本</li>\n<li>静态字段只属于类，这个类的所有实例共享一个静态字段</li>\n</ul>\n<h3 id=\"3.2-静态常量\">3.2 静态常量<a title=\"#3.2-静态常量\" href=\"#3.2-静态常量\"></a></h3>\n<p><code>Math</code>类中的<code>PI</code>就是一个静态常量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Math</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">PI</span> <span class=\"operator\">=</span> <span class=\"number\">3.1415926</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里还添加了<code>final</code>防止其值被恶意修改</p>\n<h3 id=\"3.3-静态方法\">3.3 静态方法<a title=\"#3.3-静态方法\" href=\"#3.3-静态方法\"></a></h3>\n<p>静态方法不是在对象上执行的方法，如<code>Math.pow()</code>。</p>\n<ul>\n<li>可以认为静态方法是没有<code>this</code>参数的方法</li>\n<li>静态方法不可以访问实例字段，但是可以访问静态字段</li>\n</ul>\n<p>以下两种场景适合使用静态方法：</p>\n<ul>\n<li>方法不需要访问对象的状态，所有的参数由显示参数提供</li>\n<li>方法只需要访问类的静态字段</li>\n</ul>\n<h3 id=\"3.4-工厂方法\">3.4 工厂方法<a title=\"#3.4-工厂方法\" href=\"#3.4-工厂方法\"></a></h3>\n<p>类似<code>LocalDate</code>和<code>NumberFormat</code>的类使用静态工厂方法来构造对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">NumberFormat</span> <span class=\"variable\">currencyFormatter</span> <span class=\"operator\">=</span> NumberFormat.getCurrencyInstance();</span><br><span class=\"line\"><span class=\"type\">NumberFormat</span> <span class=\"variable\">precentFormatter</span> <span class=\"operator\">=</span> NumberFormat.getPrecentInstance();</span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0.1</span>;</span><br><span class=\"line\">System.out.println(currencyFormatter.format(x)); <span class=\"comment\">// $0.10</span></span><br><span class=\"line\">System.out.println(precentFormatter.format(x)); <span class=\"comment\">// 10%</span></span><br></pre></td></tr></table></figure>\n<p>这里没有采用构造器有如下原因：</p>\n<ul>\n<li>构造器必须与类名相同，但是这里希望两个不同的名字，分别得到货币的实例和百分比</li>\n<li>使用构造器时无法改变构造对象的类型。而工厂方法实际上将返回<code>DecimalFormat</code>类的对象，这是<code>NumberFormat</code>的子类。</li>\n</ul>\n<h3 id=\"3.5-main方法\">3.5 main方法<a title=\"#3.5-main方法\" href=\"#3.5-main方法\"></a></h3>\n<p><code>main</code>是一个静态方法，<code>main</code>不对任何对象进行操作。</p>\n<ul>\n<li>每一个类都可以有一个<code>main</code>方法，可以以此进行单元测试</li>\n</ul>\n<h2 id=\"4.-方法参数\">4. 方法参数<a title=\"#4.-方法参数\" href=\"#4.-方法参数\"></a></h2>\n<p>Java程序设计总是按值调用，和js一样，不再赘述。</p>\n<h2 id=\"5.-包\">5. 包<a title=\"#5.-包\" href=\"#5.-包\"></a></h2>\n<p>包可以将类组织在一个集合中，能够帮助我们方便的组织自己的代码，并将自己的代码和别人提供的代码库分开管理。</p>\n<h3 id=\"5.1-类的导入\">5.1 类的导入<a title=\"#5.1-类的导入\" href=\"#5.1-类的导入\"></a></h3>\n<p>一个类可以使用所属包中的所有类，以及其他包中的公共类</p>\n<p>访问公共类的两种方式：</p>\n<ul>\n<li>\n<p>使用完全限定名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.time.<span class=\"type\">LocalDate</span> <span class=\"variable\">today</span> <span class=\"operator\">=</span> java.time.LocalDate.now();</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用<code>import</code>语句</p>\n<ul>\n<li>\n<p>引入全部的包（注意使用*只能导入一个包）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.time.*;</span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">today</span> <span class=\"operator\">=</span> LocalDate.now();</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>引入特定的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDate;</span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">today</span> <span class=\"operator\">=</span> LocalDate.now();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5.2-静态导入\">5.2 静态导入<a title=\"#5.2-静态导入\" href=\"#5.2-静态导入\"></a></h3>\n<ul>\n<li>\n<p>导入静态字段和方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.System.*;</span><br><span class=\"line\"></span><br><span class=\"line\">out.println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>导入特定静态字段和方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.System.out;</span><br><span class=\"line\"></span><br><span class=\"line\">out.println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5.3-在包中添加类\">5.3 在包中添加类<a title=\"#5.3-在包中添加类\" href=\"#5.3-在包中添加类\"></a></h3>\n<p>使用<code>package</code>将类放入包中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.horstman.corejava;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果没有在开头使用<code>package</code>，这个源文件中的类就属于<strong>无名包</strong></p>\n","prev":{"title":"Java中的泛型","link":"2021/11/10/Java中的泛型"},"next":{"title":"go的数据结构","link":"2021/11/06/go的方法"},"plink":"http://example.com/2021/11/08/Java中的对象与类/","toc":[{"id":"1.-面向的对象程序设计概述","title":"1. 面向的对象程序设计概述","index":"1","children":[{"id":"1.1-类","title":"1.1 类","index":"1.1"},{"id":"1.2-对象","title":"1.2 对象","index":"1.2"},{"id":"1.3-类之间的关系","title":"1.3 类之间的关系","index":"1.3"}]},{"id":"2.-自定义类","title":"2. 自定义类","index":"2","children":[{"id":"2.1-构造器","title":"2.1 构造器","index":"2.1"},{"id":"2.2-隐式参数与显示参数","title":"2.2 隐式参数与显示参数","index":"2.2"},{"id":"2.3-基于类的访问权限","title":"2.3 基于类的访问权限","index":"2.3"},{"id":"2.4-私有方法","title":"2.4 私有方法","index":"2.4"},{"id":"2.5-final-实例字段","title":"2.5 final 实例字段","index":"2.5"}]},{"id":"3.-静态字段和静态方法","title":"3. 静态字段和静态方法","index":"3","children":[{"id":"3.1-静态字段","title":"3.1 静态字段","index":"3.1"},{"id":"3.2-静态常量","title":"3.2 静态常量","index":"3.2"},{"id":"3.3-静态方法","title":"3.3 静态方法","index":"3.3"},{"id":"3.4-工厂方法","title":"3.4 工厂方法","index":"3.4"},{"id":"3.5-main方法","title":"3.5 main方法","index":"3.5"}]},{"id":"4.-方法参数","title":"4. 方法参数","index":"4"},{"id":"5.-包","title":"5. 包","index":"5","children":[{"id":"5.1-类的导入","title":"5.1 类的导入","index":"5.1"},{"id":"5.2-静态导入","title":"5.2 静态导入","index":"5.2"},{"id":"5.3-在包中添加类","title":"5.3 在包中添加类","index":"5.3"}]}],"reading_time":"1718 words in 11 min"}