{"title":"自动化部署Vue3博客项目","date":"2022-03-16T13:53:09.000Z","date_formatted":{"ll":"Mar 16, 2022","L":"03/16/2022","MM-DD":"03-16"},"link":"2022/03/16/自动化部署Vue3博客项目","categories":["Vue","前端"],"updated":"2023-05-07T09:46:04.987Z","content":"<p>最近在开发自己的博客系统，每次迭代完一次代码就要重新手动部署一次，有时候部署后才发现一些bug，又要回过头来重新部署，十分的麻烦。自己的项目托管在github上，因此想实现每次push完代码到master分支上后，github可以自动的帮我进行部署这一步骤，这样就可以避免频繁的手动部署。</p>\n<h2 id=\"0-我的博客\">0 我的博客<a title=\"#0-我的博客\" href=\"#0-我的博客\"></a></h2>\n<p>线上地址：<a href=\"http://travel.wutortoise.cn/\" target=\"_blank\">wk-blog</a></p>\n<p>github 地址：<a href=\"https://github.com/wk-Nemo/wk-blog\" target=\"_blank\">项目 github</a></p>\n<p>项目简介：项目采用的是前后端分离的模式，前端的主要技术框架是 Vue3，后端使用的是 express</p>\n<p>博客预览：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d7dd082a5294115becfb1df7e6e370f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"1-github-actions-简介\">1 Github Actions 简介<a title=\"#1-github-actions-简介\" href=\"#1-github-actions-简介\"></a></h2>\n<blockquote>\n<p>参考文章：</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/433426848\" target=\"_blank\">GitHub Actions自动化部署前端项目指南</a></li>\n<li><a href=\"https://juejin.cn/post/7003278731171069982\" target=\"_blank\">使用Github Actions来实现项目的CI/CD</a></li>\n</ul>\n</blockquote>\n<p>在我们前端常规的开发流程中，每次向远程分支推送完本次代码后，接下来进行的就是<strong>打包生成静态资源</strong>，再<strong>推送至服务器</strong>。这些步骤的特点就是在不同的项目中是类似的，且需要反复重复这些步骤。有没有一种方法可以在每次push完代码后，自动的去执行这些重复的动作呢？Giuthub Actions 就很好的解决了这一个问题。</p>\n<p>GitHub Actions 是 GitHub 推出的一款持续集成（CI/CD）服务，它给我们提供了虚拟的服务器资源，让我们可以基于它完成自动化测试、集成、部署等操作，Github 把这些操作称作 actions。如果我们需要在push完代码后执行某一个action，我们可以直接引用他人写好的 action 即可。</p>\n<p>官方文档传送门：<a href=\"https://docs.github.com/cn/actions\" target=\"_blank\">Github Actions</a></p>\n<h3 id=\"1.1-基本概念\">1.1 基本概念<a title=\"#1.1-基本概念\" href=\"#1.1-基本概念\"></a></h3>\n<p><strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 workflow。</p>\n<ul>\n<li>name：工作流程的名称</li>\n<li>on：触发工作流程的事件名称</li>\n</ul>\n<p><strong>job</strong> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</p>\n<ul>\n<li>\n<p>runs-on：任务运行的虚拟环境</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 目前可用的环境</span><br><span class=\"line\">Windows Server 2019     windows-latest 或 windows-2019</span><br><span class=\"line\">Ubuntu 20.04            ubuntu-20.04</span><br><span class=\"line\">Ubuntu 18.04            ubuntu-latest 或 ubuntu-18.04</span><br><span class=\"line\">Ubuntu 16.04            ubuntu-16.04</span><br><span class=\"line\">macOS Catalina 10.15    macos-latest 或 macos-10.15</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用</span><br><span class=\"line\">runs-on: ubuntu-latest</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</p>\n<ul>\n<li>name：步骤名称</li>\n<li>run：该步骤的命令或 action</li>\n<li>env：所需要的环境变量</li>\n<li>uses：选择任务步骤中一部分运行的操作。其实就是步骤使用的<code>actions</code>，可以是一个或多个</li>\n</ul>\n<p><strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）。因为很多操作在不同项目中都是类似的，所以 GitHub 把 action 设计为一个独立的脚本文件，可以存放到代码仓库里，让其他开发者使用。所以在实际的使用中，可以直接使用别人写好的 action 而不必所有的都自己写。GitHub也为此做了一个<a href=\"https://github.com/marketplace?type=actions\" target=\"_blank\">marketplace</a>，这里就是action的官方市场。</p>\n<h2 id=\"2-github-actions-小实验\">2 Github Actions 小实验<a title=\"#2-github-actions-小实验\" href=\"#2-github-actions-小实验\"></a></h2>\n<blockquote>\n<p>实验代码：<a href=\"https://github.com/wk-Nemo/CI-CD\" target=\"_blank\">CI-CD</a></p>\n</blockquote>\n<p>本次实验的目的是实现 vue 项目的自动化部署。当我们本地开发完项目向远程分支推送代码时，GitHub会帮我们自动构建，生成静态资源，并部署到远程服务器上。</p>\n<p>实验大致分以下几个步骤：</p>\n<ul>\n<li>准备好服务环境</li>\n<li>创建 github 项目并创建 workflow</li>\n<li>拉取 github 仓库，并新建一个 vue 项目，本地 push 代码</li>\n<li>查看自动化部署是否完成</li>\n</ul>\n<h3 id=\"step1-服务环境准备\">step1 服务环境准备<a title=\"#step1-服务环境准备\" href=\"#step1-服务环境准备\"></a></h3>\n<p>这里我使用的是阿里云的轻量服务器，服务器使用的操作系统是 ubuntu-20.04。</p>\n<p>这里你可以使用自己的服务器，<strong>安装的操作系统自己也要记住</strong>，因为在后面我们会使用到。我们进入自己的服务器，并使用 Linux 命令创建好存放静态资源的文件夹，你可以选择自己常用的文件夹，但是<strong>需要记住这个路径</strong>，后面会使用到。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这个文件夹是我部署项目的地方，你可以选择自己常用的文件夹，但是需要记住这个路径，后面会使用到</span><br><span class=\"line\">cd /www</span><br><span class=\"line\">sudo mkdir actionTest</span><br></pre></td></tr></table></figure>\n<h3 id=\"step2-创建-github-项目\">step2 创建 github 项目<a title=\"#step2-创建-github-项目\" href=\"#step2-创建-github-项目\"></a></h3>\n<p>在 github 上新建一个项目，这很 easy，不多赘述。</p>\n<p>因为需要连接远程服务器，在创建 workflow 之前，我们需要创建一些需要使用的<strong>暗号</strong>。这个暗号就是一个<strong>变量名</strong>，然后它的值只有你和 Github 知道是什么，在需要使用的地方使用这个变量名，Github便能领会到这是一个私密的信息，并在执行流程时使用它<strong>真正的值</strong>去代替变量名。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c6eaa6fac4e4f0bac39a242bf4f09cb~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>按照上面的顺序我们便可以创建暗号了。我们以此建立三个暗号，他们的变量名分别是：</p>\n<ul>\n<li>DR_HOST：你的服务器IP地址</li>\n<li>DR_USER：你的服务器账号，一般是 root</li>\n<li>DR_PASS：你的 SSH 登录密码</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c548432ddf54f2a89af38cc5acb310b~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>准备好上面的内容我们就可以创建一个 workflow 了</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f71fcd268034f4bb594ae29fade60e9~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ba9f8b9f47e44b5bbc4313e9bb5e2b9~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>最后我们能看到如下的界面：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d72099cab904324970f10a81564246b~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>我们将里面的代码删除，并换成下面的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: build</span><br><span class=\"line\">on: </span><br><span class=\"line\">  push: </span><br><span class=\"line\">    branches: </span><br><span class=\"line\">      - main # 这里表示push到main分支就会触发流程</span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build-and-deploy:</span><br><span class=\"line\">    runs-on: ubuntu-20.04</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      # 这是github官方的一个action，用于clone该仓库的源码到工作流中，</span><br><span class=\"line\">      - name: Checkout 🛎️</span><br><span class=\"line\">        uses: actions/checkout@v2</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          persist-credentials: false</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Build</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          cd my-project # 进入项目目录</span><br><span class=\"line\">          npm install  # 安装依赖</span><br><span class=\"line\">          npm run build  # 执行打包</span><br><span class=\"line\">  </span><br><span class=\"line\">      # 连接到ssh，并且做一个拷贝操作的action</span><br><span class=\"line\">      - name: Deploy 🚀</span><br><span class=\"line\">        uses: cross-the-world/scp-pipeline@master</span><br><span class=\"line\">        env:</span><br><span class=\"line\">          WELCOME: &quot;ssh scp ssh pipelines&quot;</span><br><span class=\"line\">          LASTSSH: &quot;Doing something after copying&quot;</span><br><span class=\"line\">        with:</span><br><span class=\"line\">         host: $&#123;&#123; secrets.DR_HOST &#125;&#125;</span><br><span class=\"line\">         user: $&#123;&#123; secrets.DR_USER &#125;&#125;</span><br><span class=\"line\">         pass: $&#123;&#123; secrets.DR_PASS &#125;&#125;</span><br><span class=\"line\">         connect_timeout: 10s</span><br><span class=\"line\">         local: &#x27;./my-project/dist/*&#x27; # 这里是下一步要创建的vue项目构建完成后的静态资源路径</span><br><span class=\"line\">         remote: /www/actionTest # 这里是 step1 中，在服务器上创建用于存放静态资源的文件夹</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>最后我们提交这部分代码,这里相当于在github仓库创建了一个 <code>/.github/workflows/build.yml</code> 的文件</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/154ed8ae17d04705b73d66190c067ddf~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>这里我们相当于提交了一次代码到 main 分支上，因此会执行流程，但因为我们还没有创建 vue 项目，因此流程不会执行成功。我们接着进行下一步。</p>\n<h3 id=\"step3-本地开发\">step3 本地开发<a title=\"#step3-本地开发\" href=\"#step3-本地开发\"></a></h3>\n<blockquote>\n<p>Vue脚手架官网传送地址：<a href=\"https://cli.vuejs.org/\" target=\"_blank\">Vue CLI</a></p>\n</blockquote>\n<p>接着我们拉取远程分支的代码，并使用 vue-cli 创建一个 vue 项目，最后再提交代码到 main 分支上。</p>\n<h3 id=\"step4-验证实验结果\">step4 验证实验结果<a title=\"#step4-验证实验结果\" href=\"#step4-验证实验结果\"></a></h3>\n<p>在 github 中的 action 中可以查看到工作流程正常执行</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5877fc69c0624946b9cd8eb04e14b27f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>点进去也可以看到核心的 build 和 deploy 也正常执行了</p>\n<ul>\n<li>\n<p>正常构建<br>\n<img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f75de66214ad478393acedce96ce0268~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>正常部署<br>\n<img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04f6dbf583164909811ed1d9db6c07da~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\"></p>\n</li>\n</ul>\n<p>我们再上服务器进行验证，可以发现 vue 项目打包后的 dist 中的内容正常部署到了我们服务器的目标文件夹中</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/967828d16050447b8c06d0949bf72e1f~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"3-博客项目部署踩坑日记\">3 博客项目部署踩坑日记<a title=\"#3-博客项目部署踩坑日记\" href=\"#3-博客项目部署踩坑日记\"></a></h2>\n<p>在开头已经介绍过我的博客项目，前端使用的是 vue3，具体的部署和上述实验差不多。但是中间在执行 npm install 时遇到了问题，最后通过指定 node 版本解决了问题。代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: frontend-build</span><br><span class=\"line\">on: </span><br><span class=\"line\">  push: </span><br><span class=\"line\">    branches: </span><br><span class=\"line\">      - main</span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build-and-deploy:</span><br><span class=\"line\">    runs-on: ubuntu-20.04</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - name: Checkout 🛎️</span><br><span class=\"line\">        uses: actions/checkout@v2</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          persist-credentials: false</span><br><span class=\"line\">      </span><br><span class=\"line\">      # 指定 node 版本</span><br><span class=\"line\">      - uses: actions/setup-node@v2 </span><br><span class=\"line\">        with:</span><br><span class=\"line\">          node-version: &#x27;14&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Build</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          cd blog-frontend # 进入项目目录</span><br><span class=\"line\">          npm install  # 安装依赖</span><br><span class=\"line\">          npm run build  # 执行打包</span><br><span class=\"line\">  </span><br><span class=\"line\">      - name: Deploy 🚀</span><br><span class=\"line\">        uses: cross-the-world/scp-pipeline@master</span><br><span class=\"line\">        env:</span><br><span class=\"line\">          WELCOME: &quot;ssh scp ssh pipelines&quot;</span><br><span class=\"line\">          LASTSSH: &quot;Doing something after copying&quot;</span><br><span class=\"line\">        with:</span><br><span class=\"line\">         host: $&#123;&#123; secrets.DR_HOST &#125;&#125;</span><br><span class=\"line\">         user: $&#123;&#123; secrets.DR_USER &#125;&#125;</span><br><span class=\"line\">         pass: $&#123;&#123; secrets.DR_PASS &#125;&#125;</span><br><span class=\"line\">         connect_timeout: 10s</span><br><span class=\"line\">         local: &#x27;./blog-frontend/dist/*&#x27;</span><br><span class=\"line\">         remote: /www/wk-blog/dist</span><br><span class=\"line\">         last_ssh: |</span><br><span class=\"line\">            nginx -s reload # 部署成功后需要重启nginx</span><br><span class=\"line\">           </span><br></pre></td></tr></table></figure>\n<p>后端代码使用的是 express，服务器上使用 pm2 开启项目。因为数据库中的博客信息是通过 js 脚本解析的，因此最后还需要执行脚本重新解析所有的博客文件，当上传新的博客时会更新数据库中的信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: backend-build</span><br><span class=\"line\">on: </span><br><span class=\"line\">  push: </span><br><span class=\"line\">    branches: </span><br><span class=\"line\">      - main</span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  backend:</span><br><span class=\"line\">    runs-on: ubuntu-20.04</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - name: Checkout 🛎️</span><br><span class=\"line\">        uses: actions/checkout@v2</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          persist-credentials: false</span><br><span class=\"line\">          </span><br><span class=\"line\">      - uses: actions/setup-node@v2</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          node-version: &#x27;14&#x27;</span><br><span class=\"line\">  </span><br><span class=\"line\">      - name: Deploy 🚀</span><br><span class=\"line\">        uses: cross-the-world/scp-pipeline@master</span><br><span class=\"line\">        env:</span><br><span class=\"line\">          WELCOME: &quot;ssh scp ssh pipelines&quot;</span><br><span class=\"line\">          LASTSSH: &quot;Doing something after copying&quot;</span><br><span class=\"line\">        with:</span><br><span class=\"line\">         host: $&#123;&#123; secrets.DR_HOST &#125;&#125;</span><br><span class=\"line\">         user: $&#123;&#123; secrets.DR_USER &#125;&#125;</span><br><span class=\"line\">         pass: $&#123;&#123; secrets.DR_PASS &#125;&#125;</span><br><span class=\"line\">         connect_timeout: 10s</span><br><span class=\"line\">         local: &#x27;./express-backend/*&#x27;</span><br><span class=\"line\">         remote: /www/wk-blog/backend</span><br><span class=\"line\">         </span><br><span class=\"line\">      - name: ssh pipelines - npm install</span><br><span class=\"line\">        uses: cross-the-world/ssh-pipeline@master</span><br><span class=\"line\">        env:</span><br><span class=\"line\">          WELCOME: &quot;ssh pipeline&quot;</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          host: $&#123;&#123; secrets.DR_HOST &#125;&#125;</span><br><span class=\"line\">          user: $&#123;&#123; secrets.DR_USER &#125;&#125;</span><br><span class=\"line\">          pass: $&#123;&#123; secrets.DR_PASS &#125;&#125;</span><br><span class=\"line\">          connect_timeout: 10s</span><br><span class=\"line\">          script: |</span><br><span class=\"line\">            cd /www/wk-blog/backend</span><br><span class=\"line\">            npm install</span><br><span class=\"line\">      </span><br><span class=\"line\">      - name: ssh pipelines - read blogs</span><br><span class=\"line\">        uses: cross-the-world/ssh-pipeline@master</span><br><span class=\"line\">        env:</span><br><span class=\"line\">          WELCOME: &quot;ssh pipeline&quot;</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          host: $&#123;&#123; secrets.DR_HOST &#125;&#125;</span><br><span class=\"line\">          user: $&#123;&#123; secrets.DR_USER &#125;&#125;</span><br><span class=\"line\">          pass: $&#123;&#123; secrets.DR_PASS &#125;&#125;</span><br><span class=\"line\">          connect_timeout: 10s</span><br><span class=\"line\">          script: |</span><br><span class=\"line\">            cd /www/wk-blog/backend</span><br><span class=\"line\">            node parse.js</span><br><span class=\"line\">            </span><br><span class=\"line\">      - name: ssh pipelines - restart www</span><br><span class=\"line\">        uses: cross-the-world/ssh-pipeline@master</span><br><span class=\"line\">        env:</span><br><span class=\"line\">          WELCOME: &quot;ssh pipeline&quot;</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          host: $&#123;&#123; secrets.DR_HOST &#125;&#125;</span><br><span class=\"line\">          user: $&#123;&#123; secrets.DR_USER &#125;&#125;</span><br><span class=\"line\">          pass: $&#123;&#123; secrets.DR_PASS &#125;&#125;</span><br><span class=\"line\">          connect_timeout: 10s</span><br><span class=\"line\">          script: |</span><br><span class=\"line\">            cd bin</span><br><span class=\"line\">            pm2 restart www</span><br></pre></td></tr></table></figure>\n","prev":{"title":"大四下学期学习计划","link":"2022/03/18/大四下学期学习计划"},"next":{"title":"vue源码阅读—入口流程","link":"2021/11/25/vue源码阅读（一）"},"plink":"http://example.com/2022/03/16/自动化部署Vue3博客项目/","toc":[{"id":"0-我的博客","title":"0 我的博客","index":"1"},{"id":"1-github-actions-简介","title":"1 Github Actions 简介","index":"2","children":[{"id":"1.1-基本概念","title":"1.1 基本概念","index":"2.1"}]},{"id":"2-github-actions-小实验","title":"2 Github Actions 小实验","index":"3","children":[{"id":"step1-服务环境准备","title":"step1 服务环境准备","index":"3.1"},{"id":"step2-创建-github-项目","title":"step2 创建 github 项目","index":"3.2"},{"id":"step3-本地开发","title":"step3 本地开发","index":"3.3"},{"id":"step4-验证实验结果","title":"step4 验证实验结果","index":"3.4"}]},{"id":"3-博客项目部署踩坑日记","title":"3 博客项目部署踩坑日记","index":"4"}],"reading_time":"2563 words in 17 min"}