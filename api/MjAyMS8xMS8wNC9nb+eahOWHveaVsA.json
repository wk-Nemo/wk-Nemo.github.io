{"title":"go的数据结构","date":"2021-11-04T09:06:13.000Z","date_formatted":{"ll":"Nov 4, 2021","L":"11/04/2021","MM-DD":"11-04"},"link":"2021/11/04/go的函数","categories":["go"],"updated":"2023-05-17T12:21:48.128Z","content":"<h2 id=\"函数声明\">函数声明<a title=\"#函数声明\" href=\"#函数声明\"></a></h2>\n<p>函数声明包括<strong>函数名</strong>、<strong>形参</strong>、<strong>返回值</strong>和<strong>函数体</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">hypot</span><span class=\"params\">(x, y <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Sqrt(x*x + y*y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(hypot(<span class=\"number\">3</span>,<span class=\"number\">4</span>)) <span class=\"comment\">// &quot;5&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>形式参数列表描述了函数的参数名以及参数类型。这些参数作为局部变量，其值由参数调用者提供。</li>\n<li>返回值列表描述了函数返回值的变量名以及类型。如果函数返回一个无名变量或者没有返回值，返回值列表的括号是可以省略的。</li>\n</ul>\n<p><strong>如果一组形参或返回值有相同的类型，我们不必为每个形参都写出参数类型。</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">(i, j, k <span class=\"type\">int</span>, s, t <span class=\"type\">string</span>)</span></span>                 &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">(i <span class=\"type\">int</span>, j <span class=\"type\">int</span>, k <span class=\"type\">int</span>,  s <span class=\"type\">string</span>, t <span class=\"type\">string</span>)</span></span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>返回值也可以像形式参数一样被命名。</strong></p>\n<ul>\n<li>在这种情况下，每个返回值被声明成一个局部变量，并根据该返回值的类型，将其初始化为该类型的零值。</li>\n<li>如果一个函数在声明时，包含返回值列表，该函数必须以 return语句结尾，除非函数明显无法运行到结尾处。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(x <span class=\"type\">int</span>, y <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span>   &#123;<span class=\"keyword\">return</span> x + y&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sub</span><span class=\"params\">(x, y <span class=\"type\">int</span>)</span></span> (z <span class=\"type\">int</span>)   &#123; z = x - y; <span class=\"keyword\">return</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>在函数体中，<strong>函数的形参作为局部变量，被初始化为调用者提供的值</strong>。函数的形参和有名返回值作为函数最外层的局部变量，被存储在相同的词法块中。</p>\n<p><strong>实参通过值的方式传递，因此函数的形参是实参的拷贝。</strong> 对形参进行修改不会影响实参。但是，如果实参包括引用类型，如指针，slice(切片)、map、function、channel等类型，实参可能会由于函数的间接引用被修改。</p>\n<h2 id=\"返回多个值\">返回多个值<a title=\"#返回多个值\" href=\"#返回多个值\"></a></h2>\n<p><strong>在Go中，一个函数可以返回多个值。</strong> 许多标准库中的函数返回2个值，一个是期望得到的返回值，另一个是函数出错时的错误信息。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findLinks</span><span class=\"params\">(url <span class=\"type\">string</span>)</span></span> ([]<span class=\"type\">string</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    resp, err := http.Get(url)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> resp.StatusCode != http.StatusOK &#123;</span><br><span class=\"line\">        resp.Body.Close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;getting %s: %s&quot;</span>, url, resp.Status)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    doc, err := html.Parse(resp.Body)</span><br><span class=\"line\">    resp.Body.Close()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;parsing %s as HTML: %v&quot;</span>, url, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> visit(<span class=\"literal\">nil</span>, doc), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>调用多返回值函数时，返回给调用者的是一组值，调用者必须显式的将这些值分配给变量</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">links, err := findLinks(url)</span><br></pre></td></tr></table></figure>\n<p><strong>如果某个值不被使用，可以将其分配给blank identifier</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">links, _ := findLinks(url) <span class=\"comment\">// errors ignored</span></span><br></pre></td></tr></table></figure>\n<p><strong>如果一个函数所有的返回值都有显式的变量名，那么该函数的return语句可以省略操作数。这称之为bare return。</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CountWordsAndImages</span><span class=\"params\">(url <span class=\"type\">string</span>)</span></span> (words, images <span class=\"type\">int</span>, err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    resp, err := http.Get(url)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    doc, err := html.Parse(resp.Body)</span><br><span class=\"line\">    resp.Body.Close()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        err = fmt.Errorf(<span class=\"string\">&quot;parsing HTML: %s&quot;</span>, err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    words, images = countWordsAndImages(doc)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>按照返回值列表的次序，返回所有的返回值，在上面的例子中，每一个return语句等价于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return words, images, err</span><br></pre></td></tr></table></figure>\n<h2 id=\"可变参数\">可变参数<a title=\"#可变参数\" href=\"#可变参数\"></a></h2>\n<p>参数数量可变的函数称为可变参数函数。典型的例子就是fmt.Printf和类似函数。Printf首先接收一个必备的参数，之后接收任意个数的后续参数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(vals ...<span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    total := <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> vals &#123;</span><br><span class=\"line\">        total += val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(sum())           <span class=\"comment\">// &quot;0&quot;</span></span><br><span class=\"line\">fmt.Println(sum(<span class=\"number\">3</span>))          <span class=\"comment\">// &quot;3&quot;</span></span><br><span class=\"line\">fmt.Println(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)) <span class=\"comment\">// &quot;10&quot;</span></span><br></pre></td></tr></table></figure>\n<p>如果原始参数已经是切片类型，只需在最后一个参数后加上省略符。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">values := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">fmt.Println(sum(values...)) <span class=\"comment\">// &quot;10&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"匿名函数\">匿名函数<a title=\"#匿名函数\" href=\"#匿名函数\"></a></h2>\n<p>拥有函数名的函数只能在包级语法块中被声明，通过函数字面量（function literal），我们可绕过这一限制，在任何表达式中表示一个函数值。函数字面量的语法和函数声明相似，区别在于func关键字后没有函数名。函数值字面量是一种表达式，它的值被称为匿名函数（anonymous function）。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Map(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(r <span class=\"type\">rune</span>)</span></span> <span class=\"type\">rune</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> r + <span class=\"number\">1</span> </span><br><span class=\"line\">&#125;, <span class=\"string\">&quot;HAL-9000&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>在函数内部可以声明匿名函数，但不能声明一个正常的函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">(data1 <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">   fmt.Println(data1)</span><br><span class=\"line\">   b := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(data2 <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">      fmt.Println(data2)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   b(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"闭包函数\">闭包函数<a title=\"#闭包函数\" href=\"#闭包函数\"></a></h2>\n<p>通过这种方式定义的函数可以访问完整的词法环境（感觉类似js的闭包），这意味着在函数中定义的内部函数可以引用该函数的变量，如下例所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// squares返回一个匿名函数。</span></span><br><span class=\"line\"><span class=\"comment\">// 该匿名函数每次被调用时都会返回下一个数的平方。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">squares</span><span class=\"params\">()</span></span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"type\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">        x++</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x * x</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    f := squares()</span><br><span class=\"line\">    fmt.Println(f()) <span class=\"comment\">// &quot;1&quot;</span></span><br><span class=\"line\">    fmt.Println(f()) <span class=\"comment\">// &quot;4&quot;</span></span><br><span class=\"line\">    fmt.Println(f()) <span class=\"comment\">// &quot;9&quot;</span></span><br><span class=\"line\">    fmt.Println(f()) <span class=\"comment\">// &quot;16&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自执行函数\">自执行函数<a title=\"#自执行函数\" href=\"#自执行函数\"></a></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 自执行函数</span></span><br><span class=\"line\">   (<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">   &#125;)()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"deferred函数\">Deferred函数<a title=\"#deferred函数\" href=\"#deferred函数\"></a></h2>\n<p>延迟调用，即无论在哪，加了defer的函数会最后执行</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> def1()</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">   <span class=\"keyword\">defer</span> def2()</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">def1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">&quot;i am defer1&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">def2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">&quot;i am defer2&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后输出结果：</p>\n<ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>i am defer2</li>\n<li>i am defer1</li>\n<li></li>\n</ul>\n","prev":{"title":"go的数据结构","link":"2021/11/06/go的方法"},"next":{"title":"go的数据结构","link":"2021/11/01/go的数据结构"},"plink":"http://example.com/2021/11/04/go的函数/","toc":[{"id":"函数声明","title":"函数声明","index":"1"},{"id":"返回多个值","title":"返回多个值","index":"2"},{"id":"可变参数","title":"可变参数","index":"3"},{"id":"匿名函数","title":"匿名函数","index":"4"},{"id":"闭包函数","title":"闭包函数","index":"5"},{"id":"自执行函数","title":"自执行函数","index":"6"},{"id":"deferred函数","title":"Deferred函数","index":"7"}],"reading_time":"1366 words in 9 min"}