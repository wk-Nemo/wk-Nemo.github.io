{"title":"React基础知识学习笔记","date":"2021-04-28T02:50:21.000Z","date_formatted":{"ll":"Apr 28, 2021","L":"04/28/2021","MM-DD":"04-28"},"link":"2021/04/28/React基础知识学习笔记","categories":["React"],"updated":"2023-05-17T12:22:31.611Z","content":"<h1 id=\"第一章-课程简介\">第一章 课程简介<a title=\"#第一章-课程简介\" href=\"#第一章-课程简介\"></a></h1>\n<p>略</p>\n<h1 id=\"第二章-、第三章-react基础语法\">第二章 、第三章 React基础语法<a title=\"#第二章-、第三章-react基础语法\" href=\"#第二章-、第三章-react基础语法\"></a></h1>\n<p>参考官方文档</p>\n<ol>\n<li>跟着官方文档做一个井字棋：<a href=\"https://react.docschina.org/tutorial/tutorial.html\" target=\"_blank\">入门教程: 认识 React</a></li>\n<li>基础概念阅读：<a href=\"https://react.docschina.org/docs/getting-started.html\" target=\"_blank\">开始</a></li>\n</ol>\n<h1 id=\"第四章-react高级内容\">第四章 React高级内容<a title=\"#第四章-react高级内容\" href=\"#第四章-react高级内容\"></a></h1>\n<h2 id=\"4.1-react的插件安装\">4.1 React的插件安装<a title=\"#4.1-react的插件安装\" href=\"#4.1-react的插件安装\"></a></h2>\n<p>在谷歌应用商城可以下载</p>\n<h2 id=\"4.2-proptypes,-defaultprops\">4.2 PropTypes, DefaultProps<a title=\"#4.2-proptypes,-defaultprops\" href=\"#4.2-proptypes,-defaultprops\"></a></h2>\n<p>分别可以预定义参数的类型和值</p>\n<h2 id=\"4.3-props，state和render的关系\">4.3 props，state和render的关系<a title=\"#4.3-props，state和render的关系\" href=\"#4.3-props，state和render的关系\"></a></h2>\n<p>当组建的props或state发生改变时，render函数就会重新执行</p>\n<h2 id=\"4.4-react中的虚拟dom\">4.4 React中的虚拟DOM<a title=\"#4.4-react中的虚拟dom\" href=\"#4.4-react中的虚拟dom\"></a></h2>\n<p>一、大致思路</p>\n<ol>\n<li>\n<p>state 数据</p>\n</li>\n<li>\n<p>ISX 模板</p>\n</li>\n<li>\n<p>数据 + 模板 结合，生成真实的DOM，进行显示</p>\n</li>\n<li>\n<p>state发生改变</p>\n</li>\n<li>\n<p>数据 + 模板 结合，生成真实的DOM，替换原始的DOM</p>\n</li>\n</ol>\n<p>缺陷：</p>\n<p>第一次生成了一个完整的DOM片段</p>\n<p>第二次又生成了一个完整的DOM片段</p>\n<p>第二次的DOM替换第一次的DOM，十分消耗性能</p>\n<p>二、改进</p>\n<ol>\n<li>\n<p>state 数据</p>\n</li>\n<li>\n<p>ISX 模板</p>\n</li>\n<li>\n<p>数据 + 模板 结合，生成真实的DOM，进行显示</p>\n</li>\n<li>\n<p>state发生改变</p>\n</li>\n<li>\n<p>数据 + 模板 结合，生成真实的DOM</p>\n</li>\n<li>\n<p>新DOM（DocumentFragment）和原始DOM进行比较，找差异</p>\n</li>\n<li>\n<p>找出input框发生了变化</p>\n</li>\n<li>\n<p>只用新DOM中的input框替代老DOM中的input框</p>\n</li>\n</ol>\n<p>缺陷：</p>\n<p>新DOM的生成对比的性能消耗增大，性能提升不明显</p>\n<p>三、虚拟DOM：减少了真实DOM的创建和对比</p>\n<ol>\n<li>\n<p>state 数据</p>\n</li>\n<li>\n<p>ISX 模板</p>\n</li>\n<li>\n<p>生成虚拟DOM（虚拟DOM是一个JS对象，用它描述真实的DOM）</p>\n</li>\n<li>\n<p>用虚拟DOM的结构生成真实的DOM，进行显示</p>\n</li>\n<li>\n<p>state发生变化</p>\n</li>\n<li>\n<p>数据 + 模板 生成新的虚拟DOM（极大的提升了新能，因为生成真实的DOM消耗的性能是很大的，而虚拟DOM是JS对象，性能消耗很低）</p>\n</li>\n<li>\n<p>比较原始虚拟DOM和新的虚拟DOM的区别，找到区别</p>\n</li>\n<li>\n<p>直接操作DOM，改变内容</p>\n</li>\n</ol>\n<h2 id=\"4.5-深入了解虚拟dom\">4.5 深入了解虚拟DOM<a title=\"#4.5-深入了解虚拟dom\" href=\"#4.5-深入了解虚拟dom\"></a></h2>\n<p>JSX -&gt; JS对象 -&gt; 真实DOM</p>\n<p>JSX -&gt; JS对象相当于使用了React.creatElement(‘标签’,  {属性},  ‘子节点’)</p>\n<p>虚拟DOM的优点：</p>\n<ol>\n<li>新能提升</li>\n<li>跨端应用得以实现，让一些没有DOM概念的地方可以使用虚拟DOM转换成所需要的</li>\n</ol>\n<h2 id=\"4.6-虚拟dom中的diff算法\">4.6 虚拟DOM中的Diff算法<a title=\"#4.6-虚拟dom中的diff算法\" href=\"#4.6-虚拟dom中的diff算法\"></a></h2>\n<p>Diff算法即原始DOM和虚拟DOM进行比对的过程</p>\n<p>一、setState是异步的，将多次setState合并成一次，提高性能。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210428103453493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-uL2JBJtg-1619577222824)(C:sersenovoppDataoamingyporaypora-user-imagesmage-20210423152311212.png)\" loading=\"lazy\" class=\"φbp\"></p>\n<p>二、比对过程是同层比对</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210428103508751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-NPzDdtq1-1619577222827)(C:sersenovoppDataoamingyporaypora-user-imagesmage-20210423152505614.png)\" loading=\"lazy\" class=\"φbp\"></p>\n<p>若上层的比对结果不一样则替换下面的所有的DOM，这样虽然造成了一些DOM不能复用，但是却大大的减小了DOM的比对时间，算法也相对简单。</p>\n<p>三、为什么index不适合做key值</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210428103525503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-fSujuHvg-1619577222828)(C:sersenovoppDataoamingyporaypora-user-imagesmage-20210423153118445.png)\" loading=\"lazy\" class=\"φbp\"></p>\n<p>虚拟DOM可以根据key值很方便的进行比对，如果使用index就不能确保拥有相同key值的新虚拟DOM和原始的虚拟DOM节点对应的是同一个节点</p>\n<h2 id=\"4.7-react中的ref\">4.7 React中的ref<a title=\"#4.7-react中的ref\" href=\"#4.7-react中的ref\"></a></h2>\n<p>尽量不要操作DOM</p>\n<h2 id=\"4.8-react的生命周期函数\">4.8 React的生命周期函数<a title=\"#4.8-react的生命周期函数\" href=\"#4.8-react的生命周期函数\"></a></h2>\n<p>生命周期函数是在某一个时刻会自动执行的函数</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210428103541202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-j7In2kgL-1619577222830)(C:sersenovoppDataoamingyporaypora-user-imagesmage-20210423154829966.png)\" loading=\"lazy\" class=\"φbp\"></p>\n<p>一、constructor虽然不是react的生命周期函数，但是效果上一直，会在组件被创建的那一刻自动执行</p>\n<p>二、初始化：Initialzation</p>\n<p>三、挂载：Mounting</p>\n<ol>\n<li>componentWillMount：在页面即将挂载到页面的时候自动执行，只执行一次</li>\n<li>render：每个组件必须要有，执行情况：a.挂载 b.数据更新 c.父组件的render函数执行时</li>\n<li>componentDidMount：组件被挂载到页面之后自动被执行，只执行一次</li>\n</ol>\n<p>三、更新：Undation</p>\n<p>注意区分props和states的变化</p>\n<p>props和states共同部分：</p>\n<ol>\n<li>\n<p>shouldComponentUpdate：组件被更新前会自动执行</p>\n<p>需要返回一个Boolean类型的结果（理解为组件需要更新吗？）：true表示更新，false表示不更新</p>\n</li>\n<li>\n<p>componentWillUpdate：确定更新后，组件更新之前自动执行</p>\n</li>\n<li>\n<p>render</p>\n</li>\n<li>\n<p>componentDidUpdate：组件更新完成之后执行</p>\n</li>\n</ol>\n<p>props独有部分：</p>\n<ol>\n<li>\n<p>componentWillReceiveProps：子组件在接受父组件传过来的数据之前自动执行</p>\n<p>ps：注意第一次存在于父组件中不会执行，如果之前已经存在于父组件中就会执行</p>\n</li>\n</ol>\n<p>四、Unmounting</p>\n<p>componentWillUnmount：组件即将被剔除时执行</p>\n<h2 id=\"4.9-react生命周期函数的使用场景\">4.9 React生命周期函数的使用场景<a title=\"#4.9-react生命周期函数的使用场景\" href=\"#4.9-react生命周期函数的使用场景\"></a></h2>\n<p>一、子组件的性能优化</p>\n<p>我们知道当父组件的render函数执行时，子组件的render函数也会执行，这样会造成一些不必要的性能浪费</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">shouldComponentUpdate</span>(<span class=\"params\">nextProps, nextState</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nextProps.<span class=\"property\">content</span> !== <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">content</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以在子组件使用shouldComponentUpdate设置返回fasle</p>\n<p>二、Ajax请求</p>\n<ol>\n<li>\n<p>不能放在render函数中，因为render函数会被反复执行</p>\n</li>\n<li>\n<p>componentWillMount会和其他技术冲突</p>\n</li>\n<li>\n<p>一般放在componentDidMount，该函数只会执行一次</p>\n</li>\n<li>\n<p>constructor中也可以放Ajax请求，但是componentDidMount最为推荐</p>\n</li>\n</ol>\n<h2 id=\"4.10-charles进行接口数据模拟\">4.10 Charles进行接口数据模拟<a title=\"#4.10-charles进行接口数据模拟\" href=\"#4.10-charles进行接口数据模拟\"></a></h2>\n<p>很简单，网上教程也很多</p>\n<h1 id=\"第五章-redux入门\">第五章 Redux入门<a title=\"#第五章-redux入门\" href=\"#第五章-redux入门\"></a></h1>\n<h2 id=\"5.1-redux简介\">5.1 Redux简介<a title=\"#5.1-redux简介\" href=\"#5.1-redux简介\"></a></h2>\n<p><img src=\"https://img-blog.csdnimg.cn/2021042810375791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ein4iMY8-1619577222832)(C:sersenovoppDataoamingyporaypora-user-imagesmage-20210424140551466.png)\" loading=\"lazy\" class=\"φbp\"></p>\n<p>将数据放在一个公共的store中，这样就避免了不同层次组件之间传值的麻烦</p>\n<p>Redux = Reducer + Flux</p>\n<h2 id=\"5.2-redux的工作流程\">5.2 Redux的工作流程<a title=\"#5.2-redux的工作流程\" href=\"#5.2-redux的工作流程\"></a></h2>\n<p><img src=\"https://img-blog.csdnimg.cn/2021042810381597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-nTt6W3I3-1619577222834)(C:sersenovoppDataoamingyporaypora-user-imagesmage-20210425143013193.png)\" loading=\"lazy\" class=\"φbp\"></p>\n<p>将整个过程比作图书馆借书：</p>\n<ol>\n<li>React Components 相当于图书馆借书的人</li>\n<li>Action Creators 相当于借书人说要借什么书的话</li>\n<li>store 相当于图书馆的管理员</li>\n<li>Reducers 相当于图书的记录本，方便管理员对图书进行管理</li>\n</ol>\n<p>核心API</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210428103826125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ts87ad5O-1619577222834)(C:sersenovoppDataoamingyporaypora-user-imagesmage-20210425161428840.png)\" loading=\"lazy\" class=\"φbp\"></p>\n<ol>\n<li>\n<p>createStore：创建一个store</p>\n</li>\n<li>\n<p>store.dispatch：</p>\n<ul>\n<li>通过action将新的数据传给store</li>\n<li>store再将其记录在reducer</li>\n<li>reducer返回一个新的数据给store</li>\n<li>store对自己进行修改</li>\n</ul>\n</li>\n<li>\n<p>store.getState: 获取store的数据</p>\n</li>\n<li>\n<p>store.subscribe：感知store数据的变化，并可以执行传入的函数</p>\n</li>\n</ol>\n<h1 id=\"第六章、redux进阶\">第六章、Redux进阶<a title=\"#第六章、redux进阶\" href=\"#第六章、redux进阶\"></a></h1>\n<h2 id=\"6.1-ui组件（傻瓜组件）和容器组件（聪明组件）\">6.1 UI组件（傻瓜组件）和容器组件（聪明组件）<a title=\"#6.1-ui组件（傻瓜组件）和容器组件（聪明组件）\" href=\"#6.1-ui组件（傻瓜组件）和容器组件（聪明组件）\"></a></h2>\n<p>将一个大的组件拆分为UI和逻辑两个部分，分别放在UI组件和容器组件中</p>\n<h2 id=\"6.2-无状态组件\">6.2 无状态组件<a title=\"#6.2-无状态组件\" href=\"#6.2-无状态组件\"></a></h2>\n<p>当组件只有一个render函数，而不需要组件的其他生命周期函数的时候，可以使用无状态组件代替。提高了性能。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20210428103849738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-5EMi8pE2-1619577222835)(C:sersenovoppDataoamingyporaypora-user-imagesmage-20210425173030707.png)\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"6.3-使用axios发送ajax请求\">6.3 使用axios发送ajax请求<a title=\"#6.3-使用axios发送ajax请求\" href=\"#6.3-使用axios发送ajax请求\"></a></h2>\n<p>简单</p>\n<h2 id=\"6.4-使用redux-thunk中间件发送ajax请求\">6.4 使用Redux-thunk中间件发送ajax请求<a title=\"#6.4-使用redux-thunk中间件发送ajax请求\" href=\"#6.4-使用redux-thunk中间件发送ajax请求\"></a></h2>\n<ol>\n<li>npm install redux-thunk --save</li>\n<li>在store下进行调用</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20210428103907565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-GyOWIfUn-1619577222836)(C:sersenovoppDataoamingyporaypora-user-imagesmage-20210427161819189.png)\" loading=\"lazy\" class=\"φbp\"></p>\n<ol start=\"3\">\n<li>actionCreator上编写函数</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">getTodoList</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;./list.json&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> data = res.<span class=\"property\">data</span>;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> action = <span class=\"title function_\">initListAction</span>(data);</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(action);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在componentDidMount()生命周期函数中调用getTodoList()，此时函数返回的也是一个函数，将该函数使用dispatch进行传递，因为中间件的存在使之可行。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> action = <span class=\"title function_\">getTodoList</span>();</span><br><span class=\"line\">    store.<span class=\"title function_\">dispatch</span>(action);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6.5-redux-thunk原理介绍\">6.5 Redux-thunk原理介绍<a title=\"#6.5-redux-thunk原理介绍\" href=\"#6.5-redux-thunk原理介绍\"></a></h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20210428103924252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-toHLjcRA-1619577222837)(C:sersenovoppDataoamingyporaypora-user-imagesmage-20210427162442626.png)\" loading=\"lazy\" class=\"φbp\"></p>\n<p>在原始的redux中，action将对象派发给store。</p>\n<p>但是在Redux-thunk中间件的帮助下，可以派发函数给store。是因为中间件对dispatch进行了一个升级，使之可以处理函数。</p>\n<h2 id=\"6.6---6.7-redux-saga中间件的使用\">6.6 - 6.7 Redux-saga中间件的使用<a title=\"#6.6---6.7-redux-saga中间件的使用\" href=\"#6.6---6.7-redux-saga中间件的使用\"></a></h2>\n<p><a href=\"https://github.com/redux-saga/redux-saga\" target=\"_blank\">sagas官方文档</a>，使用过程如下：</p>\n<ol>\n<li>引入saga</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/2021042810394152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-679QMtx4-1619577222838)(C:sersenovoppDataoamingyporaypora-user-imagesmage-20210427171125386.png)\" loading=\"lazy\" class=\"φbp\"></p>\n<ol start=\"2\">\n<li>redux正常操作</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> action = <span class=\"title function_\">getInitList</span>();</span><br><span class=\"line\">    store.<span class=\"title function_\">dispatch</span>(action)</span><br><span class=\"line\">    store.<span class=\"title function_\">subscribe</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">handleStoreChange</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编写sagas文件，在dispatch给store传输数据的时候，sagas文件也会接收到相关信息，并执行相关函数。</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/2021042810400117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-NiQlUkh0-1619577222839)(C:sersenovoppDataoamingyporaypora-user-imagesmage-20210427171055243.png)\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"6.8-react-redux的使用\">6.8 React-Redux的使用<a title=\"#6.8-react-redux的使用\" href=\"#6.8-react-redux的使用\"></a></h2>\n<p>使用过程如下：</p>\n<ol>\n<li>store的index.js文件和reducer.js文件正常创建编写</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// store/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reducer <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./reducer&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(reducer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store/reducer.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultState = &#123;</span><br><span class=\"line\">  <span class=\"attr\">inputValue</span>: <span class=\"string\">&#x27;ashdkashd&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">list</span>: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action.<span class=\"property\">type</span> === <span class=\"string\">&#x27;change_input_value&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newState = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(state));</span><br><span class=\"line\">    newState.<span class=\"property\">inputValue</span> = action.<span class=\"property\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newState;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action.<span class=\"property\">type</span> === <span class=\"string\">&#x27;add_list_item&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newState = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(state));</span><br><span class=\"line\">    newState.<span class=\"property\">list</span>.<span class=\"title function_\">push</span>(state.<span class=\"property\">inputValue</span>);</span><br><span class=\"line\">    newState.<span class=\"property\">inputValue</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newState;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action.<span class=\"property\">type</span> === <span class=\"string\">&#x27;delete_list_item&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newState = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(state));</span><br><span class=\"line\">    newState.<span class=\"property\">list</span>.<span class=\"title function_\">splice</span>(action.<span class=\"property\">index</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newState;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>index文件使用react-redux中的Provider</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">TodoList</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./TodoList2&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Provider</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store2&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">App</span> = (</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">TodoList</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"title class_\">App</span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>TodoList 文件使用react-redux中的connect,并在传入的两个参数内分别获取和改变数据</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123;<span class=\"title class_\">Component</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-redux&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">TodoList</span> = (<span class=\"params\">props</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;inputValue, changeInputValue, handleClick, handleDeleteItem, list&#125; = props;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;inputValue&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;changeInputValue&#125;/</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;handleClick&#125;</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          list.map((item, index) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            return <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> handleDeleteItem(index)&#125; key=&#123;index&#125;&gt;&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;)</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mapStateToProps</span> = (<span class=\"params\">state</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">inputValue</span>: state.<span class=\"property\">inputValue</span>,</span><br><span class=\"line\">    <span class=\"attr\">list</span>: state.<span class=\"property\">list</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// store.dispatch, props</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mapDispatchToProps</span> = (<span class=\"params\">dispatch</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    changeInputValue (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;change_input_value&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">value</span>: e.<span class=\"property\">target</span>.<span class=\"property\">value</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(action);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handleClick () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;add_list_item&#x27;</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(action);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    handleDeleteItem (index) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;delete_list_item&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">index</span>: index</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(action)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">connect</span>(mapStateToProps, mapDispatchToProps)(<span class=\"title class_\">TodoList</span>);</span><br></pre></td></tr></table></figure>\n","prev":{"title":"JavaScript中的数据类型","link":"2021/05/02/JavaScript中的数据类型"},"next":{"title":"三四月份回顾","link":"2021/04/22/三四月份回顾"},"plink":"http://example.com/2021/04/28/React基础知识学习笔记/","toc":[{"id":"第一章-课程简介","title":"第一章 课程简介","index":"1"},{"id":"第二章-、第三章-react基础语法","title":"第二章 、第三章 React基础语法","index":"2"},{"id":"第四章-react高级内容","title":"第四章 React高级内容","index":"3","children":[{"id":"4.1-react的插件安装","title":"4.1 React的插件安装","index":"3.1"},{"id":"4.2-proptypes,-defaultprops","title":"4.2 PropTypes, DefaultProps","index":"3.2"},{"id":"4.3-props，state和render的关系","title":"4.3 props，state和render的关系","index":"3.3"},{"id":"4.4-react中的虚拟dom","title":"4.4 React中的虚拟DOM","index":"3.4"},{"id":"4.5-深入了解虚拟dom","title":"4.5 深入了解虚拟DOM","index":"3.5"},{"id":"4.6-虚拟dom中的diff算法","title":"4.6 虚拟DOM中的Diff算法","index":"3.6"},{"id":"4.7-react中的ref","title":"4.7 React中的ref","index":"3.7"},{"id":"4.8-react的生命周期函数","title":"4.8 React的生命周期函数","index":"3.8"},{"id":"4.9-react生命周期函数的使用场景","title":"4.9 React生命周期函数的使用场景","index":"3.9"},{"id":"4.10-charles进行接口数据模拟","title":"4.10 Charles进行接口数据模拟","index":"3.10"}]},{"id":"第五章-redux入门","title":"第五章 Redux入门","index":"4","children":[{"id":"5.1-redux简介","title":"5.1 Redux简介","index":"4.1"},{"id":"5.2-redux的工作流程","title":"5.2 Redux的工作流程","index":"4.2"}]},{"id":"第六章、redux进阶","title":"第六章、Redux进阶","index":"5","children":[{"id":"6.1-ui组件（傻瓜组件）和容器组件（聪明组件）","title":"6.1 UI组件（傻瓜组件）和容器组件（聪明组件）","index":"5.1"},{"id":"6.2-无状态组件","title":"6.2 无状态组件","index":"5.2"},{"id":"6.3-使用axios发送ajax请求","title":"6.3 使用axios发送ajax请求","index":"5.3"},{"id":"6.4-使用redux-thunk中间件发送ajax请求","title":"6.4 使用Redux-thunk中间件发送ajax请求","index":"5.4"},{"id":"6.5-redux-thunk原理介绍","title":"6.5 Redux-thunk原理介绍","index":"5.5"},{"id":"6.6---6.7-redux-saga中间件的使用","title":"6.6 - 6.7 Redux-saga中间件的使用","index":"5.6"},{"id":"6.8-react-redux的使用","title":"6.8 React-Redux的使用","index":"5.7"}]}],"reading_time":"2996 words in 20 min"}