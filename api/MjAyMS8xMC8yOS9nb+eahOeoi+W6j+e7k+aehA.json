{"title":"go的程序结构","date":"2021-10-29T09:06:13.000Z","date_formatted":{"ll":"Oct 29, 2021","L":"10/29/2021","MM-DD":"10-29"},"link":"2021/10/29/go的程序结构","categories":["go","后端"],"updated":"2023-05-07T09:46:53.437Z","content":"<h2 id=\"go程序结构\">go程序结构<a title=\"#go程序结构\" href=\"#go程序结构\"></a></h2>\n<ul>\n<li>一个Go语言编写的程序对应一个或多个以.go为文件后缀名的源文件</li>\n<li>每个源文件中以包的声明语句开始，说明该源文件是属于哪个包</li>\n<li>包声明语句之后是import语句导入依赖的其它包</li>\n<li>然后是包一级的类型、变量、常量、函数的声明语句，包一级声明语句声明的名字可在整个包对应的每个源文件中访问</li>\n<li>最后是各个局部声明，局部声明的名字就只能在函数内部很小的范围被访问。</li>\n</ul>\n<h2 id=\"声明\">声明<a title=\"#声明\" href=\"#声明\"></a></h2>\n<p>Go语言主要有四种类型的声明语句：</p>\n<ul>\n<li>var：变量</li>\n<li>const：常量</li>\n<li>type：类型</li>\n<li>func：函数实体</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包一级声明</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> boilingF = <span class=\"number\">212.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 局部声明</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = boilingF</span><br><span class=\"line\">    <span class=\"keyword\">var</span> c = (f - <span class=\"number\">32</span>) * <span class=\"number\">5</span> / <span class=\"number\">9</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;boiling point = %g°F or %g°C\\n&quot;</span>, f, c)</span><br><span class=\"line\">    <span class=\"comment\">// Output:</span></span><br><span class=\"line\">    <span class=\"comment\">// boiling point = 212°F or 100°C</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量\">变量<a title=\"#变量\" href=\"#变量\"></a></h2>\n<p>var声明语句可以创建一个特定类型的变量，然后给变量附加一个名字，并且设置变量的初始值。变量声明的一般语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var 变量名字 类型 = 表达式</span><br></pre></td></tr></table></figure>\n<p>其中“<em>类型</em>”或“<em>= 表达式</em>”两个部分可以省略其中的一个。</p>\n<ul>\n<li>如果省略的是类型信息，那么将根据初始化表达式来推导变量的类型信息。</li>\n<li>如果初始化表达式被省略，那么将用零值初始化该变量。\n<ul>\n<li>数值类型变量对应的零值是0</li>\n<li>布尔类型变量对应的零值是false</li>\n<li>字符串类型对应的零值是空字符串</li>\n<li>接口或引用类型（包括slice、指针、map、chan和函数）变量对应的零值是nil</li>\n<li>数组或结构体等聚合类型对应的零值是每个元素或字段都是对应该类型的零值。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"1.-简短变量声明\">1. 简短变量声明<a title=\"#1.-简短变量声明\" href=\"#1.-简短变量声明\"></a></h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anim := gif.GIF&#123;LoopCount: nframes&#125;</span><br><span class=\"line\">freq := rand.Float64() * <span class=\"number\">3.0</span></span><br><span class=\"line\">t := <span class=\"number\">0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同时声明多个变量</span></span><br><span class=\"line\">i, j := <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>简短变量声明左边的变量可能并不是全部都是刚刚声明的。如果有一些已经在相同的词法域声明过了，那么简短变量声明语句对这些已经声明过的变量就只有赋值行为了。</li>\n<li>简短变量声明语句中必须至少要声明一个新的变量，否则编译无法通过</li>\n</ul>\n<h5 id=\"2.-指针\">2. 指针<a title=\"#2.-指针\" href=\"#2.-指针\"></a></h5>\n<p>一个指针的值是另一个变量的地址。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x := <span class=\"number\">1</span></span><br><span class=\"line\">p := &amp;x         <span class=\"comment\">// &amp;x 取x的内存地址</span></span><br><span class=\"line\">fmt.Println(*p) <span class=\"comment\">// &quot;1&quot;</span></span><br><span class=\"line\">*p = <span class=\"number\">2</span>          <span class=\"comment\">// *p p指针指向的变量的值</span></span><br><span class=\"line\">fmt.Println(x)  <span class=\"comment\">// &quot;2&quot;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"3.-new-函数\">3. new 函数<a title=\"#3.-new-函数\" href=\"#3.-new-函数\"></a></h5>\n<p>另一个创建变量的方法是调用内建的new函数。表达式new(T)将创建一个T类型的匿名变量，初始化为T类型的零值，然后返回变量地址，返回的指针类型为<code>*T</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p := <span class=\"built_in\">new</span>(<span class=\"type\">int</span>)   <span class=\"comment\">// p, *int 类型, 指向匿名的 int 变量</span></span><br><span class=\"line\">fmt.Println(*p) <span class=\"comment\">// &quot;0&quot;</span></span><br><span class=\"line\">*p = <span class=\"number\">2</span>          <span class=\"comment\">// 设置 int 匿名变量的值为 2</span></span><br><span class=\"line\">fmt.Println(*p) <span class=\"comment\">// &quot;2&quot;</span></span><br></pre></td></tr></table></figure>\n<p>new函数类似是一种语法糖，用new创建变量和普通变量声明语句方式创建变量没有什么区别</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newInt</span><span class=\"params\">()</span></span> *<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">new</span>(<span class=\"type\">int</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newInt</span><span class=\"params\">()</span></span> *<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dummy <span class=\"type\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;dummy</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面了解了变量的声明，下面继续学习<strong>变量的生命周期</strong></p>\n<ul>\n<li>对于在包一级声明的变量来说，它们的生命周期和整个程序的运行周期是一致的。</li>\n<li>而相比之下，局部变量的生命周期则是动态的：每次从创建一个新变量的声明语句开始，直到该变量不再被引用为止，然后变量的存储空间可能被回收。函数的参数变量和返回值变量都是局部变量</li>\n</ul>\n<h2 id=\"赋值\">赋值<a title=\"#赋值\" href=\"#赋值\"></a></h2>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">1</span>                       <span class=\"comment\">// 命名变量的赋值</span></span><br><span class=\"line\">*p = <span class=\"literal\">true</span>                   <span class=\"comment\">// 通过指针间接赋值</span></span><br><span class=\"line\">person.name = <span class=\"string\">&quot;bob&quot;</span>         <span class=\"comment\">// 结构体字段赋值</span></span><br><span class=\"line\">count[x] = count[x] * scale <span class=\"comment\">// 数组、slice或map的元素赋值</span></span><br></pre></td></tr></table></figure>\n<p><strong>元组赋值：</strong> 元组赋值是另一种形式的赋值语句，它允许同时更新多个变量的值。在赋值之前，赋值语句右边的所有表达式将会先进行求值，然后再统一更新左边对应变量的值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x, y = y, x</span><br><span class=\"line\"></span><br><span class=\"line\">a[i], a[j] = a[j], a[i]</span><br></pre></td></tr></table></figure>\n<p><strong>可赋值性：</strong> 赋值语句是显式的赋值形式，但是程序中还有很多地方会发生隐式的赋值行为。</p>\n<ul>\n<li>函数调用会隐式地将调用参数的值赋值给函数的参数变量</li>\n<li>一个返回语句会隐式地将返回操作的值赋值给结果变量</li>\n<li>一个复合类型的字面量也会产生赋值行为。</li>\n</ul>\n<h2 id=\"类型\">类型<a title=\"#类型\" href=\"#类型\"></a></h2>\n<p>一个类型声明语句创建了一个新的类型名称，和现有类型具有相同的底层结构。新命名的类型提供了一个方法，用来分隔不同概念的类型，这样即使它们底层类型相同也是不兼容的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type 类型名字 底层类型</span><br></pre></td></tr></table></figure>\n<p>类型声明语句一般出现在包一级，因此如果新创建的类型名字的首字符大写，则在包外部也可以使用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tempconv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Celsius <span class=\"type\">float64</span>    <span class=\"comment\">// 摄氏温度</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Fahrenheit <span class=\"type\">float64</span> <span class=\"comment\">// 华氏温度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    AbsoluteZeroC Celsius = <span class=\"number\">-273.15</span> <span class=\"comment\">// 绝对零度</span></span><br><span class=\"line\">    FreezingC     Celsius = <span class=\"number\">0</span>       <span class=\"comment\">// 结冰点温度</span></span><br><span class=\"line\">    BoilingC      Celsius = <span class=\"number\">100</span>     <span class=\"comment\">// 沸水温度</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CToF</span><span class=\"params\">(c Celsius)</span></span> Fahrenheit &#123; <span class=\"keyword\">return</span> Fahrenheit(c*<span class=\"number\">9</span>/<span class=\"number\">5</span> + <span class=\"number\">32</span>) &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FToC</span><span class=\"params\">(f Fahrenheit)</span></span> Celsius &#123; <span class=\"keyword\">return</span> Celsius((f - <span class=\"number\">32</span>) * <span class=\"number\">5</span> / <span class=\"number\">9</span>) &#125;</span><br></pre></td></tr></table></figure>\n<p>对于每一个类型T，都有一个对应的类型转换操作T(x)，用于将x转为T类型（译注：如果T是指针类型，可能会需要用小括弧包装T，比如<code>(*int)(0)</code>）。</p>\n<ul>\n<li>只有当两个类型的底层基础类型相同时，才允许这种转型操作</li>\n<li>或者是两者都是指向相同底层结构的指针类型，这些转换只改变类型而不会影响值本身。</li>\n<li>如果x是可以赋值给T类型的值，那么x必然也可以被转为T类型，但是一般没有这个必要。</li>\n</ul>\n<h2 id=\"包和文件\">包和文件<a title=\"#包和文件\" href=\"#包和文件\"></a></h2>\n<p>Go语言中的包和其他语言的库或模块的概念类似，目的都是为了支持模块化、封装、单独编译和代码重用。一个包的源代码保存在一个或多个以.go为文件后缀名的源文件中，通常一个包所在目录路径的后缀是包的导入路径；</p>\n<ul>\n<li>\n<p>每个包都对应一个独立的名字空间。</p>\n<p>在image包中的Decode函数和在unicode/utf16包中的 Decode函数是不同的。要在外部引用该函数，必须显式使用image.Decode或utf16.Decode形式访问。</p>\n</li>\n<li>\n<p>包还可以让我们通过控制哪些名字是外部可见的来隐藏内部实现信息。</p>\n<p>在Go语言中，一个简单的规则是：如果一个名字是大写字母开头的，那么该名字是导出的</p>\n</li>\n</ul>\n","prev":{"title":"go的数据结构","link":"2021/11/01/go的数据结构"},"next":{"title":"go开篇","link":"2021/10/29/go开篇"},"plink":"http://example.com/2021/10/29/go的程序结构/","toc":[{"id":"go程序结构","title":"go程序结构","index":"1"},{"id":"声明","title":"声明","index":"2"},{"id":"变量","title":"变量","index":"3"},{"id":"赋值","title":"赋值","index":"4"},{"id":"类型","title":"类型","index":"5"},{"id":"包和文件","title":"包和文件","index":"6"}],"reading_time":"1826 words in 12 min"}