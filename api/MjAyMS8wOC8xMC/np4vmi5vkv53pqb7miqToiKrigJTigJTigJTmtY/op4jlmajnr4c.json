{"title":"前端秋招保驾护航——浏览器篇","date":"2021-08-10T15:55:57.000Z","date_formatted":{"ll":"Aug 10, 2021","L":"08/10/2021","MM-DD":"08-10"},"link":"2021/08/10/秋招保驾护航———浏览器篇","tags":["前端"],"categories":["浏览器"],"updated":"2023-05-17T12:19:06.172Z","content":"<p>浏览器的相关知识从以下几个角度出发进行总结。</p>\n<ul>\n<li>网页中使用js</li>\n<li>浏览器缓存：强缓存和协商缓存</li>\n<li>浏览器本地存储:cookie、localStorage和sessionStore</li>\n<li>从网络的角度：输入URL发生了什么</li>\n<li>从浏览器解析的角度：输入URL发生了什么</li>\n<li>从浏览器渲染的角度：输入URL发生了什么</li>\n<li>从浏览器回流和重绘的角度：输入URL发生了什么</li>\n<li>跨域的解决办法</li>\n<li>网络安全</li>\n</ul>\n<h2 id=\"网页中使用js\">网页中使用js<a title=\"#网页中使用js\" href=\"#网页中使用js\"></a></h2>\n<blockquote>\n<p>参考：<a href=\"https://wangdoc.com/javascript/bom/engine.html#%E4%BB%A3%E7%A0%81%E5%B5%8C%E5%85%A5%E7%BD%91%E9%A1%B5%E7%9A%84%E6%96%B9%E6%B3%95\" target=\"_blank\">浏览器环境描述</a></p>\n</blockquote>\n<h3 id=\"1.-代码嵌入网页的方法\">1. 代码嵌入网页的方法<a title=\"#1.-代码嵌入网页的方法\" href=\"#1.-代码嵌入网页的方法\"></a></h3>\n<ul>\n<li>\n<p><code>&lt;script&gt;</code>元素直接嵌入代码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var x = 1 + 5;</span><br><span class=\"line\">  console.log(x);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>&lt;script&gt;</code>标签加载外部脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;https://www.example.com/script.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>事件属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;myBtn&quot; onclick=&quot;console.log(this.id)&quot;&gt;点击&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>URL 协议：URL 支持<code>javascript:</code>协议，即在 URL 的位置写入代码，使用这个 URL 的时候就会执行 JavaScript 代码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;javascript:console.log(&#x27;Hello&#x27;)&quot;&gt;点击&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2.-script的工作原理\">2. script的工作原理<a title=\"#2.-script的工作原理\" href=\"#2.-script的工作原理\"></a></h3>\n<ul>\n<li>浏览器一边下载 HTML 网页，一边开始解析。也就是说，不等到下载完，就开始解析。</li>\n<li>解析过程中，浏览器发现<code>&lt;script&gt;</code>元素，就暂停解析，把网页渲染的控制权转交给 JavaScript 引擎。</li>\n<li>如果<code>&lt;script&gt;</code>元素引用了外部脚本，就下载该脚本再执行，否则就直接执行代码。</li>\n<li>JavaScript 引擎执行完毕，控制权交还渲染引擎，恢复往下解析 HTML 网页。</li>\n</ul>\n<p>如果外部脚本加载时间很长（一直无法完成下载），那么浏览器就会一直等待脚本下载完成，造成网页长时间失去响应，浏览器就会呈现“假死”状态，这被称为“阻塞效应”。</p>\n<p>为了避免这种情况，较好的做法是将<code>&lt;script&gt;</code>标签都放在页面底部，而不是头部。这样即使遇到脚本失去响应，网页主体的渲染也已经完成了，用户至少可以看到内容，而不是面对一张空白的页面。如果某些脚本代码非常重要，一定要放在页面头部的话，最好直接将代码写入页面，而不是连接外部脚本文件，这样能缩短加载时间。</p>\n<h3 id=\"3.-解决网页阻塞\">3. 解决网页阻塞<a title=\"#3.-解决网页阻塞\" href=\"#3.-解决网页阻塞\"></a></h3>\n<p><strong>（1）defer属性</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;a.js&quot; defer&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;b.js&quot; defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>浏览器开始解析 HTML 网页。</li>\n<li>解析过程中，发现带有<code>defer</code>属性的<code>&lt;script&gt;</code>元素。</li>\n<li>浏览器继续往下解析 HTML 网页，同时并行下载<code>&lt;script&gt;</code>元素加载的外部脚本。</li>\n<li>浏览器完成解析 HTML 网页，此时再回过头执行已经下载完成的脚本。</li>\n</ul>\n<p><strong>（2）async属性</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;a.js&quot; async&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;b.js&quot; async&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>浏览器开始解析 HTML 网页。</li>\n<li>解析过程中，发现带有<code>async</code>属性的<code>script</code>标签。</li>\n<li>浏览器继续往下解析 HTML 网页，同时并行下载<code>&lt;script&gt;</code>标签中的外部脚本。</li>\n<li>脚本下载完成，浏览器暂停解析 HTML 网页，开始执行下载的脚本。</li>\n<li>脚本执行完毕，浏览器恢复解析 HTML 网页。</li>\n</ul>\n<h2 id=\"dns缓存\">DNS缓存<a title=\"#dns缓存\" href=\"#dns缓存\"></a></h2>\n<p>进入页面的时候会进行DNS查询，找到域名对应的服务器的IP地址，再发送请求</p>\n<p>网上流程图很多，我从中借鉴了两张</p>\n<p>DNS域名查找先在客户端进行<code>递归查询</code>，如图</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d3936b63a9e43aaae9f72086899a8e5~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\" loading=\"lazy\"> 在任何一步找到就会结束查找流程，而整个过程客户端只发出一次查询请求</p>\n<p>如果都没有找到，就会走DNS服务器设置的转发器，如果没设置转发模式，则向<code>13根</code>发起解析请求，这里就是<code>迭代查询</code>，如图</p>\n<blockquote>\n<p>13根：<br>\n全球共有13个根域服务器IP地址，不是13台服务器！<br>\n因为借助任播技术，可以在全球设立这些IP的镜像站点，所以访问的不是唯一的那台主机</p>\n</blockquote>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76abac73addd452bb35c1ede3df0a904~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>很明显，整个过程会发出多次查询请求</p>\n<p>在第一次进入页面后就会把DNS解析的地址记录缓存在客户端，之后再进的话至少不需要发起后面的迭代查询了，从而速度更快</p>\n<h2 id=\"浏览器缓存（http缓存）\">浏览器缓存（HTTP缓存）<a title=\"#浏览器缓存（http缓存）\" href=\"#浏览器缓存（http缓存）\"></a></h2>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6993358764481085453#heading-11\" target=\"_blank\">(建议收藏)为什么第二次打开页面快？五步吃透前端缓存，让页面飞起</a></p>\n</blockquote>\n<p>浏览器缓是指将http请求获取的页面资源存储在本地，之后再加载直接从缓存中获取而不用请求服务器，从而响应的更快</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/507d2f8b12f14e48983267afcb44b349~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"1.-强缓存\">1. 强缓存<a title=\"#1.-强缓存\" href=\"#1.-强缓存\"></a></h3>\n<p>第一次请求，服务器把资源过期的时间通过响应头中的<code>Expires</code>和<code>Cache-Control</code>两个字段告诉浏览器。通过这两个字段的内容，浏览器之后请求这个服务器的资源前，会判断有没有过期，如果没有过期就直接使用，不用再发HTTP请求。</p>\n<p><strong>（1）Expires</strong></p>\n<p><code>Expires</code>即过期时间，存在于服务端返回的响应头中，告诉浏览器在这个过期时间之前可以直接从缓存里面获取数据，无需再次请求。比如下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 表示资源在2019年11月22号8点41分过期，过期了就得向服务端发请求。</span></span><br><span class=\"line\"><span class=\"title class_\">Expires</span>: <span class=\"title class_\">Wed</span>, <span class=\"number\">22</span> <span class=\"title class_\">Nov</span> <span class=\"number\">2019</span> <span class=\"number\">08</span>:<span class=\"number\">41</span>:<span class=\"number\">00</span> <span class=\"variable constant_\">GMT</span></span><br></pre></td></tr></table></figure>\n<p><strong>缺点：</strong> <strong>服务器的时间和浏览器的时间可能并不一致</strong>，那服务器返回的这个过期时间可能就是不准确的。因此这种方式很快在后来的HTTP1.1版本中被抛弃了。</p>\n<p><strong>（2）Cache-Control</strong></p>\n<p>基于<code>Expires</code>的缺点，在HTTP1.1中采用了<code>Cache-Control</code>。<code>Cache-Control</code>通过过期时长来控制缓存。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代表这个响应返回后在 3600 秒，也就是一个小时之内可以直接使用缓存。</span></span><br><span class=\"line\"><span class=\"title class_\">Cache</span>-<span class=\"title class_\">Control</span>:max-age=<span class=\"number\">3600</span></span><br></pre></td></tr></table></figure>\n<p><strong>Cache-Control<code>请求头</code>常见属性</strong></p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>字段(单位秒)</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>max-age=300</td>\n<td>拒绝接受长于300秒的资源，为0时表示获取最新资源</td>\n</tr>\n<tr>\n<td>max-stale=100</td>\n<td>缓存过期之后的100秒内，依然拿来用</td>\n</tr>\n<tr>\n<td>min-fresh=50</td>\n<td>缓存到期时间还剩余50秒开始，就不给拿了，不新鲜了</td>\n</tr>\n<tr>\n<td>no-cache</td>\n<td>协商缓存验证</td>\n</tr>\n<tr>\n<td>no-store</td>\n<td>不使用缓存</td>\n</tr>\n<tr>\n<td>only-if-chached</td>\n<td>只使用缓存，没有就报504错误</td>\n</tr>\n<tr>\n<td>no-transform</td>\n<td>不得对资源进行转换或转变。Content-Encoding, Content-Range, Content-Type等HTTP头不能由代理修改。</td>\n</tr>\n</tbody>\n</table></div></div><p><strong>Cache-Control<code>响应头</code>常见属性</strong></p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>字段(单位秒)</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>max-age=300</td>\n<td>缓存有效期300秒</td>\n</tr>\n<tr>\n<td>s-maxage=500</td>\n<td>有效期500秒，优先级高于max-age，适用于共享缓存(如CDN)</td>\n</tr>\n<tr>\n<td>public</td>\n<td>可以被任何终端缓存，包括代理服务器、CDN等</td>\n</tr>\n<tr>\n<td>private</td>\n<td>只能被用户的浏览器终端缓存(私有缓存)</td>\n</tr>\n<tr>\n<td>no-cache</td>\n<td>先和服务端确认资源是否发生变化，没有就使用</td>\n</tr>\n<tr>\n<td>no-store</td>\n<td>不缓存</td>\n</tr>\n<tr>\n<td>no-transform</td>\n<td>与上面请求指令中的一样</td>\n</tr>\n<tr>\n<td>must-revalidate</td>\n<td>客户端缓存过期了就向源服务器验证</td>\n</tr>\n<tr>\n<td>proxy-revalidate</td>\n<td>代理缓存过期了就去源服务器重新获取</td>\n</tr>\n</tbody>\n</table></div></div><p><strong>（3）强缓存总结</strong></p>\n<p>强缓存最开始是使用<code>Expires</code>，它通过返回日期来控制缓存的时间，但是潜在的问题是如果浏览器的时间和服务器的时间不一致就会产生缓存失效的问题；于是在<code>HTTP1.1</code>中提出了<code>Cache-Control</code>，<code>Cache-Control</code>通过返回接收到请求后存储的时间来控制缓存的时间。</p>\n<p>当<strong>Expires</strong>和<strong>Cache-Control</strong>同时存在的时候，<strong>Cache-Control</strong>会优先考虑。</p>\n<p>强缓存的缺点是<strong>不管资源有没有变化，都会重新发起请求，重新获取资源</strong>。而我们希望的是在资源文件没有更新的情况下，即使过期了也不重新获取资源，继续使用旧资源。所以当强缓存失效后，就会进入协商缓存。</p>\n<h3 id=\"2.-协商缓存\">2. 协商缓存<a title=\"#2.-协商缓存\" href=\"#2.-协商缓存\"></a></h3>\n<p>强缓存失效之后，浏览器在请求头中携带相应的<code>缓存tag</code>来向服务器发请求，由服务器根据这个tag，来决定是否使用缓存，这就是<strong>协商缓存</strong>。</p>\n<p>具体来说，这样的缓存tag分为两种: <strong>Last-Modified</strong> 和 <strong>ETag</strong>。这两者各有优劣，并不存在谁对谁有<code>绝对的优势</code>，跟上面强缓存的两个 tag 不一样。</p>\n<p><strong>（1）Last-Modified</strong></p>\n<p>第一次请求资源时，服务器除了会返回给浏览器上面说的过期时间，还会在响应头添加 <code>Last-Modified</code> 字段，告诉浏览器该资源的最后修改时间</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">last-<span class=\"attr\">modified</span>: <span class=\"title class_\">Fri</span>, <span class=\"number\">27</span> <span class=\"title class_\">Oct</span> <span class=\"number\">2021</span> <span class=\"number\">08</span>:<span class=\"number\">35</span>:<span class=\"number\">57</span> <span class=\"variable constant_\">GMT</span></span><br></pre></td></tr></table></figure>\n<p>然后浏览器再次请求的时候就把这个时间再通过另一个字段<code>If-Modified-Since</code>，发送给服务器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>-modified-<span class=\"attr\">since</span>: <span class=\"title class_\">Fri</span>, <span class=\"number\">27</span> <span class=\"title class_\">Oct</span> <span class=\"number\">2021</span> <span class=\"number\">08</span>:<span class=\"number\">35</span>:<span class=\"number\">57</span> <span class=\"variable constant_\">GMT</span></span><br></pre></td></tr></table></figure>\n<p>服务器再把浏览器传来的<code>if-modified-since</code>和服务器的<code>last-modified</code>这两个字段的时间对比：</p>\n<ul>\n<li>如果是一样的，就说明文件没有被更新过，就返回状态码304和空响应体给浏览器，浏览器直接拿过期了的资源继续使用即可；</li>\n<li>如果对比不一样说明资源有更新，就返回状态码200和新的资源</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>如果本地打开了缓存文件，即使没有对文件进行修改，但还是会造成<code>Last-Modified</code>被修改，服务器端不能命中缓存导致发送相同资源</li>\n<li>因为<code>Last-Modified</code>只能以秒计时，如果在不可感知的时间内修改了文件，服务器端会认为还是命中了，无法返回正确的资源</li>\n<li>如果资源有周期性变化，如资源修改后，在一个周期内又改回了原来的样子，我们认为这个周期前的缓存是可以使用的，但是<code>Last-Modified</code>不这样认为</li>\n</ul>\n<p><strong>（2）ETag</strong></p>\n<p>第一次请求资源时，服务器除了会在响应头上返回<code>Expires</code>、<code>Cache-Control</code>、<code>Last-Modified</code>，还在返回<code>Etag</code>字段，表示当前资源文件的一个唯一标识。这个标识符由服务器基于文件内容编码生成，能精准感知文件的变化，只要文件内容不同，<code>ETag</code>就会重新生成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etag: W/&quot;132489-1627839023000&quot;</span><br></pre></td></tr></table></figure>\n<p>然后浏览器再次请求的时候就把这个文件标识 再通过另一个字段 <code>If-None-Match</code>，发送给服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if-none-match: W/&quot;132489-1627839023000&quot;</span><br></pre></td></tr></table></figure>\n<p>服务器再把这两个字段的时间对比：</p>\n<ul>\n<li>如果发现是一样的，就说明文件没有被更新过，就返回状态码304和空响应体给浏览器，浏览器直接拿过期了的资源继续使用；</li>\n<li>如果对比不一样说明资源有更新，就返回状态码200和新的资源</li>\n</ul>\n<p><strong>（3）协商缓存总结</strong></p>\n<p><strong><code>Last-Modified 和 ETag 的区别</code></strong></p>\n<ul>\n<li><code>Etag</code> 感知文件精准度要高于 <code>Last-Modified</code></li>\n<li>同时使用时，服务器校验优先 <code>Etag</code>/<code>If-None-Match</code></li>\n<li><code>Last-Modified</code> 性能上要优于 <code>Etag</code>，因为 <code>Etag</code> 生成过程中需要服务器付出额外开销，会影响服务器端的性能，所以它并不能完全替代 <code>Last-Modified</code>，只能作为补充和强化</li>\n</ul>\n<h3 id=\"3.-浏览器缓存总结\">3. 浏览器缓存总结<a title=\"#3.-浏览器缓存总结\" href=\"#3.-浏览器缓存总结\"></a></h3>\n<p>第一次请求资源时，服务器在响应头上返回<code>Expires</code>、<code>Cache-Control</code>、<code>Last-Modified</code>和<code>Etag</code>字段。</p>\n<p><code>Expires</code>和<code>Cache-Control</code>是强缓存阶段的，强缓存最开始是使用<code>Expires</code>，它通过返回日期来控制缓存的时间，但是潜在的问题是如果浏览器的时间和服务器的时间不一致就会产生缓存失效的问题；于是在<code>HTTP1.1</code>中提出了<code>Cache-Control</code>，<code>Cache-Control</code>通过返回接收到请求后存储的时间来控制缓存的时间。当<strong>Expires</strong>和<strong>Cache-Control</strong>同时存在的时候，<strong>Cache-Control</strong>会优先考虑。</p>\n<p>强缓存的缺点是<strong>不管资源有没有变化，都会重新发起请求，重新获取资源</strong>。而我们希望的是在资源文件没有更新的情况下，即使过期了也不重新获取资源，继续使用旧资源。所以当强缓存失效后，就会进入协商缓存。</p>\n<p><code>Last-Modified</code>和<code>Etag</code>是协商缓存阶段的，<code>Last-Modified</code>是记录文件最后一次修改的时间，但是有很多的缺点，如：在补课感知的时间内改变了、周期性的变化以及打开文件却没有修改等，都会造成<br>\n<code>Last-Modified</code>修改。<code>Etag</code>则能精准感知文件的变化，只要文件内容不同，<code>ETag</code>就会重新生成。 <code>Etag</code> 感知文件精准度要高于 <code>Last-Modified</code>但是<code>Last-Modified</code> 性能上要优于 <code>Etag</code>，因为 <code>Etag</code> 生成过程中需要服务器付出额外开销，会影响服务器端的性能，所以它并不能完全替代 <code>Last-Modified</code>，只能作为补充和强化</p>\n<h3 id=\"4.-缓存文案\">4. 缓存文案<a title=\"#4.-缓存文案\" href=\"#4.-缓存文案\"></a></h3>\n<ul>\n<li>协商缓存一般存储：<code>HTML</code></li>\n<li>强缓存一般存储：<code>css</code>, <code>image</code>, <code>js</code>，文件名带上 <code>hash</code></li>\n</ul>\n<h2 id=\"浏览器本地存储:cookie、localstorage和sessionstore\">浏览器本地存储:cookie、localStorage和sessionStore<a title=\"#浏览器本地存储:cookie、localstorage和sessionstore\" href=\"#浏览器本地存储:cookie、localstorage和sessionstore\"></a></h2>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6993358764481085453#heading-11\" target=\"_blank\">(建议收藏)为什么第二次打开页面快？五步吃透前端缓存，让页面飞起</a></p>\n</blockquote>\n<h3 id=\"1.-cookie\">1. cookie<a title=\"#1.-cookie\" href=\"#1.-cookie\"></a></h3>\n<p><code>HTTP</code> 协议是一个无状态协议，<code>Cookie</code> 最开始被设计出来其实并不是来做本地存储的，而是为了弥补<code>HTTP</code>在<strong>状态管理上的不足</strong>。</p>\n<p>Cookie 本质上就是浏览器里面存储的一个很小的文本文件，内部以键值对的方式来存储(在chrome开发者面板的<code>Application</code>这一栏可以看到)。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77e9f1df70e04c75b9203948a928c92d~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>向同一个域名下发送请求，都会携带相同的 Cookie，服务器拿到 Cookie 进行解析，便能拿到客户端的状态。</p>\n<p><strong>Cookie都有哪些字段：</strong></p>\n<ul>\n<li><code>Name</code>、<code>Size</code> 故名思意</li>\n<li><code>Value</code>：保存用户登录状态，应该将该值加密，不能使用明文</li>\n<li><code>Path</code>：可以访问此 Cookie 的路径。比如 <a href=\"http://juejin.cn/editor\">juejin.cn/editor</a> ，path是/editor，只有/editor这个路径下的才可以读取 Cookie</li>\n<li><code>httpOnly</code>：表示禁止通过 JS 访问 Cookie，减少 XSS 攻击。</li>\n<li><code>Secure</code>：只能在 https 请求中携带</li>\n<li><code>SameSite</code>：规定浏览器不能在跨域请求中携带 Cookie 减少 CSRF 攻击，详细说明<a href=\"https://juejin.cn/post/6991888178890145828\" title=\"https://juejin.cn/post/6991888178890145828\" target=\"_blank\">看这里</a></li>\n<li><code>Domain</code>：域名，跨域或者 Cookie 的白名单，允许一个子域获取或操作父域的 Cookie，实现单点登录的话会非常有用</li>\n<li><code>Expires</code>/<code>Max-size</code>：指定时间或秒数的过期时间，没设置的话就和 Session 一样关闭浏览器就失效</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>容量缺陷。Cookie 的体积上限只有<code>4KB</code>，只能用来存储少量的信息。</li>\n<li>性能缺陷。Cookie 紧跟域名，不管域名下面的某一个地址需不需要这个 Cookie ，请求都会携带上完整的 Cookie，这样随着请求数的增多，其实会造成巨大的性能浪费的，因为请求携带了很多不必要的内容。</li>\n<li>安全缺陷。由于 Cookie 以纯文本的形式在浏览器和服务器中传递，很容易被非法用户截获，然后进行一系列的篡改，在 Cookie 的有效期内重新发送给服务器，这是相当危险的。另外，在<code>HttpOnly</code>为 false 的情况下，Cookie 信息能直接通过 JS 脚本来读取。</li>\n<li>夸域名不能共享 Cookie</li>\n</ul>\n<h3 id=\"2.-localstorage\">2. localStorage<a title=\"#2.-localstorage\" href=\"#2.-localstorage\"></a></h3>\n<p><code>localStorage</code>有一点跟<code>Cookie</code>一样，就是针对一个域名，即在同一个域名下，会存储相同的一段<strong>localStorage</strong>。</p>\n<p>不过它相对<code>Cookie</code>还是有相当多的区别的:</p>\n<ul>\n<li>容量。localStorage 的容量上限为<strong>5M</strong>，相比于<code>Cookie</code>的 4K 大大增加。当然这个 5M 是针对一个域名的，因此对于一个域名是持久存储的。</li>\n<li>只存在客户端，默认不参与与服务端的通信。这样就很好地避免了 Cookie 带来的<strong>性能问题</strong>和<strong>安全问题</strong>。</li>\n<li>接口封装。通过<code>localStorage</code>暴露在全局，并通过它的 <code>setItem</code> 和 <code>getItem</code>等方法进行操作，非常方便。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;wk&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;;</span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;wk&quot;</span>); </span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;info&quot;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> info = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;info&quot;</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"应用场景\">应用场景<a title=\"#应用场景\" href=\"#应用场景\"></a></h4>\n<p>利用<code>localStorage</code>的较大容量和持久特性，可以利用<code>localStorage</code>存储一些内容稳定的资源，比如官网的<code>logo</code>，存储<code>Base64</code>格式的图片资源，因此利用<code>localStorage</code></p>\n<h3 id=\"3.-sessionstorage\">3. sessionStorage<a title=\"#3.-sessionstorage\" href=\"#3.-sessionstorage\"></a></h3>\n<p><code>sessionStorage</code>以下方面和<code>localStorage</code>一致:</p>\n<ul>\n<li>容量。容量上限也为 5M。</li>\n<li>只存在客户端，默认不参与与服务端的通信。</li>\n<li>接口封装。除了<code>sessionStorage</code>名字有所变化，存储方式、操作方式均和<code>localStorage</code>一样。</li>\n</ul>\n<p>但<code>sessionStorage</code>和<code>localStorage</code>有一个本质的区别，那就是前者只是会话级别的存储，并不是持久化存储。会话结束，也就是页面关闭，这部分<code>sessionStorage</code>就不复存在了。</p>\n<h4 id=\"应用场景-1\">应用场景<a title=\"#应用场景-1\" href=\"#应用场景-1\"></a></h4>\n<ul>\n<li>可以用它对表单信息进行维护，将表单信息存储在里面，可以保证页面即使刷新也不会让之前的表单信息丢失。</li>\n<li>可以用它存储本次浏览记录。如果关闭页面后不需要这些记录，用<code>sessionStorage</code>就再合适不过了。</li>\n</ul>\n<h3 id=\"4.-indexeddb\">4. IndexedDB<a title=\"#4.-indexeddb\" href=\"#4.-indexeddb\"></a></h3>\n<p><code>IndexedDB</code>是运行在浏览器中的<code>非关系型数据库</code>, 本质上是数据库，绝不是和刚才WebStorage的 5M 一个量级，理论上这个容量是没有上限的。</p>\n<p>关于它的使用，本文侧重原理，而且 MDN 上的教程文档已经非常详尽，这里就不做赘述了，感兴趣可以看一下<a href=\"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FIndexedDB_API%2FUsing_IndexedDB\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB\" target=\"_blank\">使用文档</a>。</p>\n<p>接着我们来分析一下<code>IndexedDB</code>的一些重要特性，除了拥有数据库本身的特性，比如<code>支持事务</code>，<code>存储二进制数据</code>，还有这样一些特性需要格外注意：</p>\n<ul>\n<li>键值对存储。内部采用<code>对象仓库</code>存放数据，在这个对象仓库中数据采用<strong>键值对</strong>的方式来存储。</li>\n<li>异步操作。数据库的读写属于 I/O 操作, 浏览器中对异步 I/O 提供了支持。</li>\n<li>受同源策略限制，即无法访问跨域的数据库。</li>\n</ul>\n<h3 id=\"5.-对比\">5. 对比<a title=\"#5.-对比\" href=\"#5.-对比\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th>Cookie</th>\n<th>SessionStorage</th>\n<th>LocalStorage</th>\n<th>indexDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储大小</td>\n<td>4k</td>\n<td>5M或更大</td>\n<td>5M或更大</td>\n<td>无限</td>\n</tr>\n<tr>\n<td>存储时间</td>\n<td>可指定时间,没指定关闭窗口就失效</td>\n<td>浏览器窗口关闭就失效</td>\n<td>永久有效</td>\n<td>永久有效</td>\n</tr>\n<tr>\n<td>作用域</td>\n<td>同浏览器，所有同源标签页</td>\n<td>当前标签页</td>\n<td>同浏览器，所有同源标签页</td>\n<td></td>\n</tr>\n<tr>\n<td>存在于</td>\n<td>请求中来回传递</td>\n<td>客户端本地</td>\n<td>客户端本地</td>\n<td>客户端本地</td>\n</tr>\n<tr>\n<td>同源策略</td>\n<td>同浏览器，只能被同源同路径页面访问共享</td>\n<td>自己用</td>\n<td>同浏览器，只能被同源页面访问共享</td>\n<td></td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"从网络的角度：输入url发生了什么\">从网络的角度：输入URL发生了什么<a title=\"#从网络的角度：输入url发生了什么\" href=\"#从网络的角度：输入url发生了什么\"></a></h2>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844904021308735502\" target=\"_blank\">(1.6w字)浏览器灵魂之问，请问你能接得住几个？</a></p>\n</blockquote>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a5b870563504bf98894d07114de5e94~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"从浏览器解析的角度：输入url发生了什么\">从浏览器解析的角度：输入URL发生了什么<a title=\"#从浏览器解析的角度：输入url发生了什么\" href=\"#从浏览器解析的角度：输入url发生了什么\"></a></h2>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844904021308735502\" target=\"_blank\">(1.6w字)浏览器灵魂之问，请问你能接得住几个？</a></p>\n</blockquote>\n<p>进过网络请求以后，因为浏览器不认识HTML和CSS的语法，所以需要先将HTML和CSS转换成浏览器认识的DOM树和CSSOM树，接着浏览器会将DOM树和CSSOM树生成一棵布局树。接着要做的事情就是要将这些内容渲染到屏幕上，让用户可以看得见。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8e936917e7045c29dea0a98d77eaff7~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"从浏览器渲染的角度：输入url发生了什么\">从浏览器渲染的角度：输入URL发生了什么<a title=\"#从浏览器渲染的角度：输入url发生了什么\" href=\"#从浏览器渲染的角度：输入url发生了什么\"></a></h2>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844904021308735502\" target=\"_blank\">(1.6w字)浏览器灵魂之问，请问你能接得住几个？</a></p>\n</blockquote>\n<p>渲染的过程挺复杂的，没看明白，日后有机会接触再去了解。</p>\n<h2 id=\"从浏览器回流和重绘的角度：输入url发生了什么\">从浏览器回流和重绘的角度：输入URL发生了什么<a title=\"#从浏览器回流和重绘的角度：输入url发生了什么\" href=\"#从浏览器回流和重绘的角度：输入url发生了什么\"></a></h2>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844904021308735502\" target=\"_blank\">(1.6w字)浏览器灵魂之问，请问你能接得住几个？</a></p>\n</blockquote>\n<p><strong>回流</strong>：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）。</p>\n<p><strong>重绘</strong>：当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示的回流环节）。这个过程叫做重绘。</p>\n<p>由此我们可以看出，<strong>重绘不一定导致回流，回流一定会导致重绘</strong>。硬要比较的话，回流比重绘做的事情更多，带来的开销也更大。但这两个说到底都是吃性能的，所以都不是什么善茬。我们在开发中，要从代码层面出发，尽可能把回流和重绘的次数最小化。</p>\n<h2 id=\"跨域的解决办法\">跨域的解决办法<a title=\"#跨域的解决办法\" href=\"#跨域的解决办法\"></a></h2>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844903767226351623\" target=\"_blank\">九种跨域方式实现原理（完整版)</a></p>\n</blockquote>\n<ul>\n<li>JSONP</li>\n<li>CORS：后端设置可以跨域的网站</li>\n<li>服务器之间没有跨域，可以用服务器向资源服务器请求到数据进行一次代理</li>\n<li>webSocket可以建立双向通信，支持跨域</li>\n</ul>\n<h2 id=\"网络安全\">网络安全<a title=\"#网络安全\" href=\"#网络安全\"></a></h2>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6991888178890145828#heading-13\" target=\"_blank\">吃透浏览器安全（同源限制/XSS/CSRF/中间人攻击）｜ 8月更文挑战</a></p>\n</blockquote>\n<ul>\n<li>同源策略</li>\n<li>XSS攻击</li>\n<li>CSRF攻击</li>\n<li>对称加密、非对称加密</li>\n<li>HTTPS、数字签名</li>\n</ul>\n","prev":{"title":"秋招保驾护航——HTML、CSS篇","link":"2021/08/21/秋招保驾护航—HTML、CSS篇"},"next":{"title":"秋招保驾护航——js面试篇（下）","link":"2021/08/10/秋招保驾护航———js面试篇（下）"},"plink":"http://example.com/2021/08/10/秋招保驾护航———浏览器篇/","toc":[{"id":"网页中使用js","title":"网页中使用js","index":"1","children":[{"id":"1.-代码嵌入网页的方法","title":"1. 代码嵌入网页的方法","index":"1.1"},{"id":"2.-script的工作原理","title":"2. script的工作原理","index":"1.2"},{"id":"3.-解决网页阻塞","title":"3. 解决网页阻塞","index":"1.3"}]},{"id":"dns缓存","title":"DNS缓存","index":"2"},{"id":"浏览器缓存（http缓存）","title":"浏览器缓存（HTTP缓存）","index":"3","children":[{"id":"1.-强缓存","title":"1. 强缓存","index":"3.1"},{"id":"2.-协商缓存","title":"2. 协商缓存","index":"3.2"},{"id":"3.-浏览器缓存总结","title":"3. 浏览器缓存总结","index":"3.3"},{"id":"4.-缓存文案","title":"4. 缓存文案","index":"3.4"}]},{"id":"浏览器本地存储:cookie、localstorage和sessionstore","title":"浏览器本地存储:cookie、localStorage和sessionStore","index":"4","children":[{"id":"1.-cookie","title":"1. cookie","index":"4.1"},{"id":"2.-localstorage","title":"2. localStorage","index":"4.2"},{"id":"3.-sessionstorage","title":"3. sessionStorage","index":"4.3"},{"id":"4.-indexeddb","title":"4. IndexedDB","index":"4.4"},{"id":"5.-对比","title":"5. 对比","index":"4.5"}]},{"id":"从网络的角度：输入url发生了什么","title":"从网络的角度：输入URL发生了什么","index":"5"},{"id":"从浏览器解析的角度：输入url发生了什么","title":"从浏览器解析的角度：输入URL发生了什么","index":"6"},{"id":"从浏览器渲染的角度：输入url发生了什么","title":"从浏览器渲染的角度：输入URL发生了什么","index":"7"},{"id":"从浏览器回流和重绘的角度：输入url发生了什么","title":"从浏览器回流和重绘的角度：输入URL发生了什么","index":"8"},{"id":"跨域的解决办法","title":"跨域的解决办法","index":"9"},{"id":"网络安全","title":"网络安全","index":"10"}],"reading_time":"5501 words in 37 min"}