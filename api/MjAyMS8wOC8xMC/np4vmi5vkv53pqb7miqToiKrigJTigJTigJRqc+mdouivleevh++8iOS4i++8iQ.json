{"title":"秋招保驾护航——js面试篇（下）","date":"2021-08-10T15:54:00.000Z","date_formatted":{"ll":"Aug 10, 2021","L":"08/10/2021","MM-DD":"08-10"},"link":"2021/08/10/秋招保驾护航———js面试篇（下）","tags":["面试"],"categories":["JavaScript","前端"],"updated":"2023-05-07T09:43:09.701Z","content":"<p>秋招正在逼近！快点学起来，本文从js的常见面试题出发，结合基本经典的js书籍《JavaScript高级程序设计》、《你不知道的JavaScript》系列以及一些大神的博客进行总结归纳。大致内容纲要如下：</p>\n<p><a href=\"https://juejin.cn/post/6987776819281805342/\" target=\"_blank\">秋招保驾护航——js面试篇（上）</a></p>\n<ul>\n<li>js中的数据类型</li>\n<li>js的垃圾回收机制</li>\n<li>js中的数组</li>\n<li>js中的函数</li>\n<li>js的面向对象编程</li>\n</ul>\n<p><a href=\"https://juejin.cn/post/6988515657105047559\" target=\"_blank\">秋招保驾护航——js面试篇（下）</a></p>\n<ul>\n<li>js的异步编程</li>\n<li>js的模块化管理</li>\n<li>ES6新特性</li>\n<li>DOM</li>\n<li>事件</li>\n</ul>\n<h2 id=\"js的异步编程\">js的异步编程<a title=\"#js的异步编程\" href=\"#js的异步编程\"></a></h2>\n<blockquote>\n<p>参考另一篇文章<a href=\"https://juejin.cn/post/6961009179351842830#heading-0\" target=\"_blank\">JavaScript中的异步编程</a></p>\n</blockquote>\n<h3 id=\"1.-为什么js是单线程的？\">1. 为什么js是单线程的？<a title=\"#1.-为什么js是单线程的？\" href=\"#1.-为什么js是单线程的？\"></a></h3>\n<p>浏览器的渲染进程是多线程的，如下：</p>\n<ul>\n<li>JS引擎线程</li>\n<li>事件触发线程</li>\n<li>定时触发器线程</li>\n<li>异步http请求线程</li>\n<li>GUI渲染线程</li>\n</ul>\n<p>而js因为防止对DOM的操作产生混乱，因此它是单线程的。单线程就是一次只能只能一个任务，有多个任务的话需要一个个的执行，为了解决异步事件，js引擎产生了Event Loop机制。</p>\n<h3 id=\"2.-说一说js中的事件循环机制\">2. 说一说js中的事件循环机制<a title=\"#2.-说一说js中的事件循环机制\" href=\"#2.-说一说js中的事件循环机制\"></a></h3>\n<p><strong>（1）同步任务和异步任务</strong></p>\n<ul>\n<li>\n<p><strong>同步任务：</strong> 是那些没有被引擎挂起、在主线程上排队执行的任务。只有前一个任务执行完毕，才能执行后一个任务。</p>\n</li>\n<li>\n<p><strong>异步任务：</strong> 是那些被引擎放在一边，不进入主线程、而进入任务队列的任务。只有引擎认为某个异步任务可以执行了（比如 Ajax 操作从服务器得到了结果），该任务（采用回调函数的形式）才会进入主线程执行。排在异步任务后面的代码，不用等待异步任务结束会马上运行，也就是说，异步任务不具有“堵塞”效应。</p>\n</li>\n</ul>\n<p><strong>（2）任务队列和事件循环</strong></p>\n<p>JavaScript 运行时，除了一个正在运行的主线程，引擎还提供一个任务队列（task queue），里面是各种需要当前程序处理的异步任务。（实际上，根据异步任务的类型，存在多个任务队列。为了方便理解，这里假设只存在一个队列。）</p>\n<ul>\n<li>\n<p><strong>主线程：</strong> 首先，主线程会去执行所有的同步任务。等到同步任务全部执行完，就会去看任务队列里面的异步任务。如果满足条件，那么异步任务就重新进入主线程开始执行，这时它就变成同步任务了。等到执行完，下一个异步任务再进入主线程开始执行。一旦任务队列清空，程序就结束执行。</p>\n</li>\n<li>\n<p><strong>任务队列：</strong> 异步任务的写法通常是回调函数。一旦异步任务重新进入主线程，就会执行对应的回调函数。如果一个异步任务没有回调函数，就不会进入任务队列，也就是说，不会重新进入主线程，因为没有用回调函数指定下一步的操作。</p>\n</li>\n<li>\n<p><strong>事件循环（Event Loop）：</strong> JavaScript 引擎怎么知道异步任务有没有结果，能不能进入主线程呢？答案就是引擎在不停地检查，一遍又一遍，只要同步任务执行完了，引擎就会去检查那些挂起来的异步任务，是不是可以进入主线程了。这种循环检查的机制，就叫做事件循环（Event Loop）。</p>\n</li>\n</ul>\n<p><strong>事件循环机制示意图：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db6f1d4b587f4c169cba4962921d0223~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>（3）宏任务</strong></p>\n<p><strong>我们可以将每次执行栈执行的代码当做是一个宏任务包括每次从事件队列中获取一个事件回调并放到执行栈中执行， 每一个宏任务会从头到尾执行完毕。</strong></p>\n<p>常见宏任务：</p>\n<ul>\n<li>主代码块</li>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>Node：setImmediate()</li>\n<li>浏览器：requestAnimationFrame()</li>\n</ul>\n<p><strong>（4）微任务</strong></p>\n<ul>\n<li>\n<p>对每个宏任务而言，内部有一个都有一个微任务，引入微任务的初衷是为了解决异步回调的问题。</p>\n<ul>\n<li>将异步回调进行宏任务队列的入队操作：采用该方式，那么执行回调的时机应该是在前面所有的宏任务完成之后，倘若现在的任务队列非常长，那么回调迟迟得不到执行，造成应用卡顿。</li>\n<li>将异步回调放到当前宏任务的末尾：为了规避第一种方式中的这样的问题，V8 引入了第二种方式，这就是微任务的解决方式。在每一个宏任务中定义一个微任务队列，当该宏任务执行完成，会检查其中的微任务队列，如果为空则直接执行下一个宏任务，如果不为空，则依次执行微任务，执行完成才去执行下一个宏任务。</li>\n</ul>\n</li>\n<li>\n<p>常见的微任务：</p>\n<ul>\n<li>Node：process.nextTick</li>\n<li>Promise.then()</li>\n<li>catch</li>\n<li>finally</li>\n<li>Object.observe</li>\n<li>MutationObserver</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3.-说出下面这段代码的输出\">3. 说出下面这段代码的输出<a title=\"#3.-说出下面这段代码的输出\" href=\"#3.-说出下面这段代码的输出\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>); </span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout&#x27;</span>); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;resolve&#x27;</span>); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;end&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\">// start</span></span><br><span class=\"line\"><span class=\"comment\">// end</span></span><br><span class=\"line\"><span class=\"comment\">// resolve</span></span><br><span class=\"line\"><span class=\"comment\">// timeout</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>先执行同步队列的任务，因此先打印start和end</li>\n<li>setTimeout 作为一个宏任务放入任务队列</li>\n<li>Promise.then作为一个为微任务放入到第一次代码执行的微任务队列</li>\n<li>Promise.resolve()将Promise的状态变为已成功，即相当于本次宏任务执行完，检查微任务队列，发现一个Promise.then, 执行</li>\n<li>接下来进入到下一个宏任务——setTimeout, 执行</li>\n</ul>\n<p>再来一题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout1&#x27;</span>) </span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise2&#x27;</span>)     </span><br><span class=\"line\">  &#125;) </span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>); </span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise1&#x27;</span>)   </span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout2&#x27;</span>) </span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>) </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// start </span></span><br><span class=\"line\"><span class=\"comment\">// Promise1 </span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout1 </span></span><br><span class=\"line\"><span class=\"comment\">// Promise2 </span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout2 </span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4.异步编程的发展\">4.异步编程的发展<a title=\"#4.异步编程的发展\" href=\"#4.异步编程的发展\"></a></h3>\n<p><strong>（1）回调地狱</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">step1</span>(<span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">step2</span>(value1, <span class=\"keyword\">function</span>(<span class=\"params\">value2</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">step3</span>(value2, <span class=\"keyword\">function</span>(<span class=\"params\">value3</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">step4</span>(value3, <span class=\"keyword\">function</span>(<span class=\"params\">value4</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这种代码常常被成为<strong>回调地狱</strong>， 有时候也叫<strong>毁灭金字塔</strong>。因为多个异步操作形成了<strong>强耦合</strong>，只要有一个操作需要修改，只要有一个操作需要修改，它的上层回调函数和下层回调函数就需要跟着修改，想要理解、更新或维护这样的代码十分的困难。</p>\n<p><strong>（2）Promise</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">readFilePromise</span>(<span class=\"string\">&#x27;1.json&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">readFilePromise</span>(<span class=\"string\">&#x27;2.json&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">readFilePromise</span>(<span class=\"string\">&#x27;3.json&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">readFilePromise</span>(<span class=\"string\">&#x27;4.json&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>ES6 中新增的 Promise 就很好了解决了<code>回调地狱</code>的问题，同时了合并了错误处理。</p>\n<p><strong>（3）Generator</strong></p>\n<ul>\n<li>\n<p>promise存在的问题<br>\nPromise解决了回调函数的回调地狱的问题，但是Promise最大的问题是代码的冗余，原来的任务被Promise包装后，无论什么操作，一眼看过去都是许多then的堆积，原来的语义变得很不清楚。</p>\n</li>\n<li>\n<p>协程： 传统的编程语言中早有异步编程的解决方案，其中一个叫做<strong>协程</strong>，意思为多个线程相互作用，完成异步任务。它的运行流程如下：</p>\n<ul>\n<li>协程A开始执行</li>\n<li>协程A执行到一般暂停，执行权交到协程B中</li>\n<li>一段时间后，协程B交还执行权</li>\n<li>协程A恢复执行</li>\n</ul>\n<p><strong>它最大的优点就是，代码写法很像同步操作。</strong></p>\n</li>\n<li>\n<p>Generator：Generator函数是协程在ES6中最大的实现，整个Generator函数就是一个封装的异步任务容器，异步操作需要用yield表明。Generator他能封装异步任务的原因如下：</p>\n<ul>\n<li>暂停和恢复执行</li>\n<li>函数体内外的数据交换</li>\n<li>错误处理机制</li>\n</ul>\n</li>\n<li>\n<p>自动交回执行权：Generator函数是一个异步操作的容器，它的自动执行需要一种机制，当异步操作有了结果，这种机制需要自动交回执行权，有两种方法可以做到：</p>\n<ul>\n<li>回调函数：将异步操作包装成Thunk函数，在回调函数里面交回执行权</li>\n<li>Promise对象：将异步操作包装成Promise对象，使用then方法交回执行权</li>\n</ul>\n</li>\n<li>\n<p>最终方案：利用协程完成 Generator 函数，用 co 库让代码依次执行完，同时以同步的方式书写，也让异步操作按顺序执行。（co模块使用的不是Thunk函数，而是通过Promise的then方法交回执行权）</p>\n</li>\n</ul>\n<p><strong>（4）Async</strong></p>\n<p>ES2017标准引入了async函数，使得异步操作变得更加方便。<strong>async函数就是Generator函数的语法糖</strong>。</p>\n<p>async函数就是将Generator函数的*换成async，将yield换成await。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">varasyncReadFile = <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r1 = <span class=\"keyword\">await</span> <span class=\"title function_\">readFileThunk</span>(<span class=\"string\">&#x27;/etc/fstab&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r1.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r2 = <span class=\"keyword\">await</span> <span class=\"title function_\">readFileThunk</span>(<span class=\"string\">&#x27;/etc/shell&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r2.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>async对于Generator的改进有三点：</p>\n<ul>\n<li>内置执行器：不需要像Generator函数那样引入Thunk函数和co模块来解决自动执行的问题</li>\n<li>适用性更广：Generator函数中yield后只能跟Thunk函数或者Promise对象，在async函数中可以是Promise对象和原始类型的值（数值、字符串和布尔值，但此之等同于同步操作）</li>\n<li>返回值是Promise：比Generator函数的返回值是一个Iterator对象方便了很多</li>\n</ul>\n<h3 id=\"5.-防抖和节流\">5. 防抖和节流<a title=\"#5.-防抖和节流\" href=\"#5.-防抖和节流\"></a></h3>\n<p><strong>手写防抖：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> t = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(t)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//注意此处改成箭头函数，因为直接使用函数argument会指向自身的实参列表</span></span><br><span class=\"line\">      <span class=\"comment\">//而不是return的函数的列表</span></span><br><span class=\"line\">      <span class=\"comment\">//apply绑定了this指向了return的函数，并将return的函数的参数列表传给了fun</span></span><br><span class=\"line\">    t = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>手写节流：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, delay</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> begin = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cur = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((cur - begin) &gt; delay) &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">      begin = cur</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6.-手写promise\">6. 手写Promise<a title=\"#6.-手写promise\" href=\"#6.-手写promise\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Promise</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">executor</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = <span class=\"string\">&#x27;pending&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolvedCallbacks</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">rejectedCallbacks</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">resolve</span> = value =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = <span class=\"string\">&#x27;fulfilled&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">        <span class=\"comment\">// 对应发布消息的动作，当状态改变时，通知所有的订阅者</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">resolveCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> <span class=\"title function_\">fn</span>())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">reject</span> = reason =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = <span class=\"string\">&#x27;reject&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">reason</span> = reason;</span><br><span class=\"line\">        <span class=\"comment\">// 对应发布消息的动作，当状态改变时，通知所有的订阅者</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">rejectedCallbacks</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> <span class=\"title function_\">fn</span>())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">executor</span>(resolve, reject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">then</span>(<span class=\"params\">onFulfilled, onRejected</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// onFulfilled返回一个普通的值，成功时直接等于 value =&gt; value</span></span><br><span class=\"line\">    onFulfilled = <span class=\"keyword\">typeof</span> onFulfilled ? onFulfilled : <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value</span><br><span class=\"line\">    <span class=\"comment\">// onRejected返回一个普通的值，失败时如果直接等于 value =&gt; value，</span></span><br><span class=\"line\">    <span class=\"comment\">// 则会跑到下一个then中的onFulfilled中，所以直接扔出一个错误reason =&gt; throw err</span></span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected ? onRejected : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> err&#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 对于同步事件，执行完后状态会马上改变</span></span><br><span class=\"line\">      <span class=\"comment\">// 所以执行传递进来的函数</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// onFulfilled或onRejected不能同步被调用，必须异步调用。我们就用setTimeout解决异步问题</span></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">            <span class=\"title function_\">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">resolvedCallbacks</span>(promise2, x, resolve, reject)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 对于异步事件，第一次宏任务执行完毕以后任然是pending状态</span></span><br><span class=\"line\">      <span class=\"comment\">// 需要执行一个类似订阅的动作，当状态发生改变时，再依次执行</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = <span class=\"title function_\">onFulfilled</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">            <span class=\"title function_\">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = <span class=\"title function_\">onRejected</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">reason</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">resolvedCallbacks</span>(promise2, x, resolve, reject)</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolvePromise</span>(<span class=\"params\">promise2, x, resolve, reject</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 循环引用报错</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x === promise2)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// reject报错</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Chaining cycle detected for promise&#x27;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 防止多次调用</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> called;</span><br><span class=\"line\">  <span class=\"comment\">// x不是null 且x是对象或者函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x != <span class=\"literal\">null</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;object&#x27;</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;function&#x27;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// A+规定，声明then = x的then方法</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.<span class=\"property\">then</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果then是函数，就默认是promise了</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">&#x27;function&#x27;</span>) &#123; </span><br><span class=\"line\">        <span class=\"comment\">// 就让then执行 第一个参数是this   后面是成功的回调 和 失败的回调</span></span><br><span class=\"line\">        then.<span class=\"title function_\">call</span>(x, <span class=\"function\"><span class=\"params\">y</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 成功和失败只能调用一个</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"comment\">// resolve的结果依旧是promise 那就继续解析</span></span><br><span class=\"line\">          <span class=\"title function_\">resolvePromise</span>(promise2, y, resolve, reject);</span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 成功和失败只能调用一个</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"title function_\">reject</span>(err);<span class=\"comment\">// 失败了就失败了</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(x); <span class=\"comment\">// 直接成功即可</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 也属于失败</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 取then出错了那就不要在继续执行了</span></span><br><span class=\"line\">      <span class=\"title function_\">reject</span>(e); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">resolve</span> = <span class=\"keyword\">function</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(val)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">reject</span> = <span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(reason)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">race</span> = <span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      promises[i].<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">all</span> = <span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">processData</span>(<span class=\"params\">index, data</span>) &#123;</span><br><span class=\"line\">    arr[index] = data;</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === arr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(arr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      promises[i].<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">processData</span>(i, data)</span><br><span class=\"line\">      &#125;, reject)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"js模块化管理\">js模块化管理<a title=\"#js模块化管理\" href=\"#js模块化管理\"></a></h2>\n<blockquote>\n<p>参考文章<a href=\"https://zhuanlan.zhihu.com/p/265632724\" target=\"_blank\">前端模块化的十年征程</a></p>\n</blockquote>\n<h3 id=\"1.-外部模块管理\">1. 外部模块管理<a title=\"#1.-外部模块管理\" href=\"#1.-外部模块管理\"></a></h3>\n<p><strong>（1）npm之前</strong></p>\n<p>在一开始没有npm的时候，如果我们需要在项目里使用某个外部模块，我们可能会去官网直接把文件下载下来放到项目中，同时在入口html中通过script标签引用它。</p>\n<p>缺点：</p>\n<ul>\n<li>使用上缺乏便利性</li>\n<li>难以跟踪各个外部模块的来源</li>\n<li>没有统一的版本管理机制</li>\n</ul>\n<p><strong>（2）npm之后</strong></p>\n<p>npm是一个Node自带的模块管理工具。从概念上看它由以下两个部分组成</p>\n<ul>\n<li>NPM是一个远程的JavaScript代码仓库，所有的开发者都可以向这里提交可共享的模块，并给其他开发者下载和使用</li>\n<li>NPM还包含一个命令行工具，开发者通过运行npm publish命令把自己写的模块发布到NPM仓库上去，通过运行npm install [模块名]，可以将别人的模块下载到自己项目根目录中一个叫node_modules的子目录下</li>\n</ul>\n<h3 id=\"2.-内部模块的管理\">2. 内部模块的管理<a title=\"#2.-内部模块的管理\" href=\"#2.-内部模块的管理\"></a></h3>\n<p><strong>（1）原生js组织阶段</strong></p>\n<p>在最原始的时代，我们是通过将不同的JS文件在html中一一引入来组织模块代码，每个文件代表一个模块。将每个模块包裹在一个函数作用域里面执行，这样就可以最大程度地避免污染全局执行环境；通过执行匿名函数得到模块输出，可以暴露给下面的其他模块使用</p>\n<p>存在的问题：</p>\n<ul>\n<li>随着项目扩大，html文件中会包含大量script标签。</li>\n<li>script标签的先后顺序并不能很好地契合模块间的依赖关系。在复杂应用中，模块的依赖关系通常树状或网状的，如a.js依赖于b.js和c.js，b.js依赖于b1.js和b2.js。相对复杂的依赖关系难以用script标签的先后顺序组织。</li>\n<li>让代码的逻辑关系难以理解，也不便于维护，容易出现某个脚本加载时依赖的变量尚未加载而导致的错误。</li>\n<li>因为对script标签顺序的要求而使用同步加载，但这却容易导致加载时页面卡死的问题</li>\n<li>仍然会因为全局变量污染全局环境，导致命名冲突</li>\n</ul>\n<p>我们需要针对这些问题提出解决方案，<strong>而AMD和CMD就是为解决这些问题而提出的规范</strong></p>\n<p><strong>（2）AMD&amp;CMD</strong></p>\n<blockquote>\n<p>AMD和CMD只是一种设计规范，而不是一种实现。</p>\n</blockquote>\n<p>AMD的理念可以用如下两个API概括，define和require</p>\n<ul>\n<li><strong>define</strong>方法用于定义一个模块，它接收两个参数：\n<ul>\n<li>第一个参数是一个数组，表示这个模块所依赖的其他模块</li>\n<li>第二个参数是一个方法，这个方法通过入参的方式将所依赖模块的输出依次取出，并在方法内使用，同时将返回值传递给依赖它的其他模块使用。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// module0.js</span></span><br><span class=\"line\"><span class=\"title function_\">define</span>([<span class=\"string\">&#x27;Module1&#x27;</span>, <span class=\"string\">&#x27;Module2&#x27;</span>], <span class=\"keyword\">function</span> (<span class=\"params\">module1, module2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result1 = module1.<span class=\"title function_\">exec</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result2 = module2.<span class=\"title function_\">exec</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">result1</span>: result1,</span><br><span class=\"line\">      <span class=\"attr\">result2</span>: result2</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);     </span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>require</strong>用于真正执行模块，通常AMD框架会以require方法作为入口，进行依赖关系分析并依次有序地进行加载</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 入口文件</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">&#x27;math&#x27;</span>], <span class=\"keyword\">function</span> (<span class=\"params\">math</span>) &#123;</span><br><span class=\"line\">  math.<span class=\"title function_\">sqrt</span>(<span class=\"number\">15</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>CMD没有提供前置的依赖数组，而是接收一个factory函数，这个factory函数包括3个参数</p>\n<ul>\n<li>require: 一个方法标识符，调用它可以动态的获取一个依赖模块的输出</li>\n<li>exports: 一个对象，用于对其他模块提供输出接口，例如:exports.name = “xxx”</li>\n<li>module: 一个对象，存储了当前模块相关的一些属性和方法，其中module.exports属性等同于上面的exports</li>\n</ul>\n<p>如下所示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// CMD</span><br><span class=\"line\">define(function (requie, exports, module) &#123;</span><br><span class=\"line\">    //依赖就近书写</span><br><span class=\"line\">    var module1 = require(&#x27;Module1&#x27;);</span><br><span class=\"line\">    var result1 = module1.exec();</span><br><span class=\"line\">    module.exports = &#123;</span><br><span class=\"line\">      result1: result1,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// AMD</span><br><span class=\"line\">define([&#x27;Module1&#x27;], function (module1) &#123;</span><br><span class=\"line\">    var result1 = module1.exec();</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      result1: result1,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;); </span><br></pre></td></tr></table></figure>\n<p><strong>（3）CommonJS &amp;&amp; ES6</strong></p>\n<p>伴随着babel等编译工具和webpack等自动化工具的出现，AMD/CMD逐渐湮没在历史的浪潮当中，然后大家都习惯于用CommonJS和ES6的模块化方式编写代码了。</p>\n<p>CommonJS是Node.js使用的模块化方式，而import/export则是ES6提出的模块化规范。它们的语法规则如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; foo &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./foo&#x27;</span>; <span class=\"comment\">// 输入</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> bar = <span class=\"number\">1</span>;        <span class=\"comment\">// 输出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CommonJS</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./foo&#x27;</span>); <span class=\"comment\">// 输入</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;            <span class=\"comment\">// 输出</span></span><br><span class=\"line\">    <span class=\"attr\">bar</span>:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但在最开始的时候，我们却不能在前端页面中使用它们，因为浏览器并不能理解这种语法。<strong>但后来，编译工具babel的出现让这变成了可能</strong>。babel是一个JavaScript 编译器，它让我们能够使用符合开发需求的编程风格去编写代码，然后通过babel的编译转化成对浏览器兼容良好的JavaScript。</p>\n<p><strong>（4）webpack等打包工具</strong></p>\n<p>一开始的CMD/AMD方案，可看作是“<strong>在线编译</strong>”模块的方案，也就是等到用户浏览web页面下载了js文件之后，才开始进行模块依赖分析，确定加载顺序和执行顺序。但这样却不可避免的带来了一些问题</p>\n<ul>\n<li>在线组织模块的方式会延长前端页面的加载时间，影响用户体验。</li>\n<li>加载过程中发出了海量的http请求，降低了页面性能。</li>\n</ul>\n<p>webpack应运而生，它通过预先打包的方式，把前端项目里面的多个文件打包成单个文件或少数几个文件，这样的话就可以压缩首次页面访问时的http请求数量，从而提高性能。</p>\n<p><strong>（5）gulp、grunt、webpack等自动化构建工具</strong></p>\n<p>什么叫自动化构建工具呢？自动化构建工具在开发流程中给开发者最大的自由度和便捷性，不仅极大的提高了工作效率，同时在生产流程中能保证浏览器兼容性和良好性能的工具。而所有的功能已经由插件直接提供，所以被称作“自动化” 构建工具。</p>\n<ul>\n<li>开发时使用丰富且方便的JS新特性，如用ES6，typescript编程，由自动化构建工具转化成浏览器兼容的ES5格式的JS代码</li>\n<li>用Sass，less编写阅读性和扩展性良好的样式代码，由自动化构建工具转化成浏览器兼容的CSS代码</li>\n<li>提供开发时SourceMap功能，也即提供生产代码(如ES5)到源代码(typescript)的映射，方便开发调试</li>\n<li>提供生产时代码压缩功能，压缩js和css，删除注释，替换变量名(长变短)，减少代码加载体积</li>\n<li>提供开发热重载功能(Hot Module Reload), 也即在编辑器保存代码的时候自动刷新浏览调试页面。</li>\n<li>当然也还包括基本的模块打包功能</li>\n<li>其他…</li>\n</ul>\n<h2 id=\"es6新特性\">ES6新特性<a title=\"#es6新特性\" href=\"#es6新特性\"></a></h2>\n<h3 id=\"1.-let-&amp;&amp;-const\">1. let &amp;&amp; const<a title=\"#1.-let-&amp;&amp;-const\" href=\"#1.-let-&amp;&amp;-const\"></a></h3>\n<p><code>let</code>和<code>const</code>是ES6新增的变量声明命令</p>\n<p><strong>共有的特性：</strong></p>\n<ul>\n<li>没有变量提升：ES6之前的变量声明使用的是<code>var</code>，会出现变量提升这种情况。</li>\n<li>不允许重复声明：在同一个作用域内不能重复声明同一个变量。</li>\n<li>块级作用域：ES6之前只有全局作用域和函数作用域，导致很多场景不合理</li>\n</ul>\n<p><strong>区别：</strong></p>\n<ul>\n<li><code>const</code>声明的是一个常量，一旦声明就不能改变（注意：对于引用类型的是不能改变引用的地址）。</li>\n</ul>\n<h3 id=\"2.-解构赋值\">2. 解构赋值<a title=\"#2.-解构赋值\" href=\"#2.-解构赋值\"></a></h3>\n<p>解构赋值是指允许按照一定的模式从数组和对象中提取值，然后对变量进行赋值</p>\n<p><strong>（1）数组的解构赋值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, [[b], c]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a, b, c) <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = <span class=\"number\">2</span>] = [<span class=\"number\">3</span>, <span class=\"literal\">undefined</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x, y) <span class=\"comment\">// 3 2</span></span><br></pre></td></tr></table></figure>\n<p><strong>（2）对象的解构赋值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo, bar) <span class=\"comment\">// aaa bbb</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解构赋值是先找到同名属性，再赋值给对应的变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;aaa&#x27;</span>, <span class=\"attr\">bar</span>: <span class=\"string\">&#x27;bbb&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(baz) <span class=\"comment\">// aaa</span></span><br></pre></td></tr></table></figure>\n<p><strong>（3）函数的解构赋值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>]].<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">[a, b]</span>) =&gt;</span> a + b)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr) <span class=\"comment\">// [3, 7, 11]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">5</span>&#125; = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">move</span>(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;)) <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p><strong>（4）用途</strong></p>\n<ul>\n<li>\n<p>使用解构赋值遍历Map</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;first&#x27;</span>, <span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">map.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;second&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(key + <span class=\"string\">&#x27;is&#x27;</span> + value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>加载模块</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./requirement&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3.-模板字符串\">3. 模板字符串<a title=\"#3.-模板字符串\" href=\"#3.-模板字符串\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> value = <span class=\"string\">&#x27;小猪皮皮呆&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;value&#125;</span> is 帅小伙`</span>) <span class=\"comment\">// 小猪皮皮呆 is 帅小伙</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4.-箭头函数\">4. 箭头函数<a title=\"#4.-箭头函数\" href=\"#4.-箭头函数\"></a></h3>\n<p>普通函数通过<code>function</code>关键字定义，<code>this</code>无法结合词法作用域使用，在运行时绑定，只取决于函数的调用方式，在哪里被调用，调用位置。（取决于调用者，和是否独立运行）</p>\n<p>箭头函数使用被称为 “胖箭头” 的操作<code>=&gt;</code>定义，箭头函数不应用普通函数<code>this</code>绑定的四种规则，而是根据外层（函数或全局）的作用域来决定<code> this</code>，且箭头函数的绑定无法被修改（<code>new</code>也不行）。</p>\n<ul>\n<li>箭头函数常用于回调函数中，包括事件处理器或定时器</li>\n<li>箭头函数和<code>var self = this</code>，都试图取代传统的<code>this</code>运行机制，将<code>this</code>的绑定拉回到词法作用域</li>\n<li>没有原型、没有<code>this</code>、没有<code>super</code>，没有<code>arguments</code>，没有<code>new.target</code></li>\n<li>不能通过<code>new</code>关键字调用。<code>new</code>一个函数时，会将<strong>返回的对象的原型</strong>指向该<strong>函数的原型</strong>，而箭头函数没有原型，所以会报错。</li>\n</ul>\n<h3 id=\"5.-扩展运算符\">5. 扩展运算符<a title=\"#5.-扩展运算符\" href=\"#5.-扩展运算符\"></a></h3>\n<p>（1）合并数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([...arr1, ...arr2]) <span class=\"comment\">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure>\n<p>（2）与解构赋值结合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first) <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rest) <span class=\"comment\">// [ 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<p>（3）将任何Iterator接口的对象换成真正的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([...<span class=\"variable language_\">arguments</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>) <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6.-set-&amp;&amp;-map\">6. Set &amp;&amp; Map<a title=\"#6.-set-&amp;&amp;-map\" href=\"#6.-set-&amp;&amp;-map\"></a></h3>\n<p>（1）Set</p>\n<p>Set类型是一种有序列表，其中含有一些相互独立的非重复值。</p>\n<ul>\n<li>size属性：返回Set 集合的成员总数。</li>\n<li>add(value) 方法：添加某个值，返回 Set 集合本身。</li>\n<li>delete(value)方法：删除某个值，返回一个布尔值，表示删除是否成功。</li>\n<li>has(value) 方法：返回一个布尔值，表示该值是否为Set的成员。</li>\n<li>clear() 方法：清除所有成员，没有返回值。</li>\n</ul>\n<p>注意：</p>\n<blockquote>\n<p>1、Set 集合不会添加重复的成员。<br>\n2、Set 构造函数可以接受所有可迭代对象作为参数。</p>\n</blockquote>\n<p>（2）Map</p>\n<ul>\n<li>clear()方法：从映射中移除所有元素。</li>\n<li>delete()方法：从映射中移除指定的元素。</li>\n<li>forEach()方法：对映射中的每个元素执行指定操作。</li>\n<li>get()方法：返回映射中的指定元素。</li>\n<li>has()方法：如果映射包含指定元素，则返回 true。</li>\n<li>set()方法：添加一个新建元素到映射。</li>\n<li>toString()方法：返回映射的字符串表示形式。</li>\n<li>valueOf()方法：返回指定对象的原始值。</li>\n</ul>\n","prev":{"title":"前端秋招保驾护航——浏览器篇","link":"2021/08/10/秋招保驾护航———浏览器篇"},"next":{"title":"秋招保驾护航——js面试篇（上）","link":"2021/07/24/秋招保驾护航———js面试篇（上）"},"plink":"http://example.com/2021/08/10/秋招保驾护航———js面试篇（下）/","toc":[{"id":"js的异步编程","title":"js的异步编程","index":"1","children":[{"id":"1.-为什么js是单线程的？","title":"1. 为什么js是单线程的？","index":"1.1"},{"id":"2.-说一说js中的事件循环机制","title":"2. 说一说js中的事件循环机制","index":"1.2"},{"id":"3.-说出下面这段代码的输出","title":"3. 说出下面这段代码的输出","index":"1.3"},{"id":"4.异步编程的发展","title":"4.异步编程的发展","index":"1.4"},{"id":"5.-防抖和节流","title":"5. 防抖和节流","index":"1.5"},{"id":"6.-手写promise","title":"6. 手写Promise","index":"1.6"}]},{"id":"js模块化管理","title":"js模块化管理","index":"2","children":[{"id":"1.-外部模块管理","title":"1. 外部模块管理","index":"2.1"},{"id":"2.-内部模块的管理","title":"2. 内部模块的管理","index":"2.2"}]},{"id":"es6新特性","title":"ES6新特性","index":"3","children":[{"id":"1.-let-&&-const","title":"1. let &amp;&amp; const","index":"3.1"},{"id":"2.-解构赋值","title":"2. 解构赋值","index":"3.2"},{"id":"3.-模板字符串","title":"3. 模板字符串","index":"3.3"},{"id":"4.-箭头函数","title":"4. 箭头函数","index":"3.4"},{"id":"5.-扩展运算符","title":"5. 扩展运算符","index":"3.5"},{"id":"6.-set-&&-map","title":"6. Set &amp;&amp; Map","index":"3.6"}]}],"reading_time":"6293 words in 42 min"}