{"title":"去哪了网项目总结","date":"2021-03-14T09:24:58.000Z","date_formatted":{"ll":"Mar 14, 2021","L":"03/14/2021","MM-DD":"03-14"},"link":"2021/03/14/去哪了网项目总结","tags":["前端"],"categories":["Vue"],"updated":"2023-05-17T12:20:27.583Z","content":"<h1 id=\"《去哪网》制作到上线总结\">《去哪网》制作到上线总结<a title=\"#《去哪网》制作到上线总结\" href=\"#《去哪网》制作到上线总结\"></a></h1>\n<p>上学期末接触了vue，寒假的时候在慕课网上买了Dell老师的vue课程<a href=\"https://coding.imooc.com/learn/list/203.html\" target=\"_blank\">开发去哪儿网</a>，学习vue到完成项目使用了将近一个月的时间，当解决最后一个跨越问题，觉得自己学了很多又学的很少。昨天阅读了月影老师16年的一篇<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5NzkwNDk3MQ==&amp;mid=2650585787&amp;idx=1&amp;sn=@46373c6b9f8412008147ee12bf3b46bd&amp;source=41#wechat_redirect\" target=\"_blank\">博客</a>后恍然大悟。自己在大二转专业以来自己可能并不是真的喜欢计算机，但是从接触了前端以后才体会到了计算机的魅力，不同于C语言的黑洞洞的窗口，前端五彩斑斓的世界激发了我的创造欲。我在追求创造的过程中，学习了html，css，js，vue等，但却也在身边追求工作的狂热中慢慢失去了热爱的初心，单纯的追求技术去学习，貌似失去了最初对问题刨根问底的精神。做了很多项目，解决了问题就不再深究，似乎没有最初的干劲和解决bug的成就感。因此写下本文，回忆总结自己在这个项目中学到的知识，也给自己一个警示，耐下心来认真学习。</p>\n<p>项目成品：<a href=\"http://travel.wutortoise.cn/#/\" target=\"_blank\">去哪网仿写</a></p>\n<p>下面内容纯属个人理解，有错误的地方欢迎指出，轻喷！！！我也是个菜鸡！！！</p>\n<h1 id=\"1.-vue\">1. Vue<a title=\"#1.-vue\" href=\"#1.-vue\"></a></h1>\n<p>课程的最开始不必说，肯定是从vue开始说起，vue的文档很健全，可以在官网上进行查询：<a href=\"https://cn.vuejs.org/\" target=\"_blank\">vue官方文档</a>。本文仅记录自己学习过程中学到的知识！</p>\n<h2 id=\"1.1-mvvm模式\">1.1 MVVM模式<a title=\"#1.1-mvvm模式\" href=\"#1.1-mvvm模式\"></a></h2>\n<ul>\n<li>M：Model层，数据模型</li>\n<li>V：View层，视图层</li>\n<li>VM：ViewModel层，监听模型数据的改变和控制视图变化</li>\n</ul>\n<p>我们都知道在使用js在开发的过程中对DOM的操作十分的繁琐，而是人总是喜欢“偷懒“的。在vue还没有出现的时代很多传统的服务端代码放到了浏览器中，这样就产生了成千上万行的javascript代码，它们连接了各式各样的HTML 和CSS文件，但缺乏正规的组织形式。而且手机移动端的Web不断的兴起，各种复杂的交互变得多了起来：社交、购物、新闻、视频分享、音乐互动等等一系列让前端项目越来越大，项目的可维护性、可拓展性、安全性等成了主要的问题。为了解决兼容的问题，出现了很多的库，最经典的就是我们耳熟能详的就是jQuery。但是他们一就没有实现对业务逻辑的成分，维护性和拓展性极差。vue则很大程度上的解决了这一问题。</p>\n<p>vue采用的是MVVM模式，其中每个字母代表的意思已经在上面叙述了，他让我们在前端代码编写的时候减少了对DOM层的关注，将更多的精力放在了业务逻辑上，同时webpack等打包工具的使用使前端项目模块化，相比于原先更加有调理，更易维护和拓展。</p>\n<blockquote>\n<p>参考：<a href=\"https://www.jianshu.com/p/ad12f0f05263\" target=\"_blank\">Vue使用的背景、核心以及适用范围</a></p>\n</blockquote>\n<h2 id=\"1.2-前端组件化\">1.2 前端组件化<a title=\"#1.2-前端组件化\" href=\"#1.2-前端组件化\"></a></h2>\n<h4 id=\"1.2.1-什么是组件？\">1.2.1 什么是组件？<a title=\"#1.2.1-什么是组件？\" href=\"#1.2.1-什么是组件？\"></a></h4>\n<p>组件是可复用的的vue实例，所以它们与 new Vue 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el 这样根实例特有的选项。</p>\n<h4 id=\"1.2.2-函数data\">1.2.2 函数data<a title=\"#1.2.2-函数data\" href=\"#1.2.2-函数data\"></a></h4>\n<p>因为组件的复用，为了防止data的内容在不同组件使用的地方进行了串联，所以不能用对象来表示，而是用函数，这样就可以将不同引用的组件的data的值存储到不同地址</p>\n<h4 id=\"1.2.3-组件之间的组织\">1.2.3 组件之间的组织<a title=\"#1.2.3-组件之间的组织\" href=\"#1.2.3-组件之间的组织\"></a></h4>\n<p><img src=\"https://img-blog.csdnimg.cn/20210314103153913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\nvue的组件有两个组件的注册类型：<strong>全局注册</strong>和<strong>局部注册</strong></p>\n<p><strong>1.全局注册</strong><br>\n全局注册的组件可以通过 Vue.component 全局注册，注意：<br>\n（1）全局注册的组件可以用在其被注册之后的任何 (通过 new Vue) 新创建的 Vue 根实例，也包括其组件树中的所有子组件的模板中。<br>\n（2）在用脚手架搭建的项目里，我们会在index.js入口文件处注册一个全局的Vue根实例，挂载到html的ID为#app的div上。</p>\n<p><strong>2.局部注册</strong><br>\n局部注册则是在已有的Vue的实例内部components中进行注册，在项目的过程中业主要是使用局部注册，注意：<br>\n（1）局部注册的组件在其子组件中不可用。<br>\n（2）有时看到的对象内部只有一个变量名，其实是ES6的语法，变量名和值相同时可以缩写成一个。</p>\n<p><strong>3.模块系统</strong><br>\n在看了一些webpack后理解到vue之间的模块是通过webpack进行的打包，我们将组件放在单独的vue文件中，并使用export default将其暴露在外部，可供需要调用的进行import引入。注意：<br>\n（1）阅读了webpack的一些文章后明白，其实webpack本身并不能知道如何去打包和理解这些vue文件，所以需要下载一些loader辅助他进行解析。<br>\n（2）package.json其实是npm包管理的内容，和node的使用息息相关，最近在学习node，理解了其中的一些配置。webpack也是npm包管理的一个对象。</p>\n<h4 id=\"1.2.4-组件之间的传值\">1.2.4 组件之间的传值<a title=\"#1.2.4-组件之间的传值\" href=\"#1.2.4-组件之间的传值\"></a></h4>\n<p><strong>1.父组件向子组件传值</strong><br>\n（1）父组件在子组件标签中绑定自定义属性；<br>\n（2）子组件通过 props 属性进行接收。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件 </span></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./....&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123; <span class=\"attr\">components</span>:&#123; <span class=\"title class_\">Child</span> &#125; &#125;</span><br><span class=\"line\">&lt;<span class=\"title class_\">Child</span> :name=<span class=\"string\">&quot;mychild&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子组件 </span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123; <span class=\"attr\">props</span>: [<span class=\"string\">&quot;name&quot;</span>]<span class=\"comment\">//此处亦可指定数据类型 &#125;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>2.子组件向父组件传值</strong><br>\n（1）在父组件在子组件标签中绑定自定义事件；<br>\n（2）子组件通过this.$emit()方法触发自定义事件，传值给父组件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父组件 </span></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Child</span> @<span class=\"attr\">changeName</span>=<span class=\"string\">&quot;changeName&quot;</span> /&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> <span class=\"title class_\">Child</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./....&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123; </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t<span class=\"attr\">components</span>:&#123; <span class=\"title class_\">Child</span> &#125;, </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t<span class=\"attr\">data</span>:&#123; <span class=\"attr\">name</span>:<span class=\"string\">&quot;123&quot;</span> &#125;, </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t<span class=\"attr\">methods</span>:&#123; </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t\t<span class=\"title function_\">changeName</span>(<span class=\"params\">value</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = value</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t\t&#125; </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t&#125; </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子组件 </span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeParentName&quot;</span>&gt;</span>改变父组件的name<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123; </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t<span class=\"attr\">methods</span>:&#123; </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t\t<span class=\"attr\">changeParentName</span>:<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123; <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&quot;changeName&quot;</span>,<span class=\"string\">&quot;456&quot;</span>) &#125; </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t&#125; </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>3.Vuex</strong><br>\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。为了解决除了父子组件之间传值，提出把组件的共享状态抽取出来，以一个全局单例模式管理。详细可看官方文档：<a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\">Vuex文档</a><br>\n<img src=\"https://img-blog.csdnimg.cn/20210314112824300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n（1）state，驱动应用的数据源；</p>\n<ul>\n<li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li>\n<li>你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vuex.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vuex</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">Vuex</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    increment (state) &#123;</span><br><span class=\"line\">      state.<span class=\"property\">count</span>++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用或者修改state里面的数据</span></span><br><span class=\"line\">store.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;increment&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"property\">state</span>.<span class=\"property\">count</span>) <span class=\"comment\">// -&gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;increment&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将其放在vue实例内部，这样就可以通过this.$store来访问数据了</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">store</span>: store,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>（2）view，以声明方式将 state 映射到视图；<br>\n（3）actions，响应在 view 上的用户输入导致的状态变化。</p>\n<h2 id=\"1.3-vue实例以及生命周期\">1.3 Vue实例以及生命周期<a title=\"#1.3-vue实例以及生命周期\" href=\"#1.3-vue实例以及生命周期\"></a></h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20210314124519930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"1.4-计算属性，方法和监听器\">1.4 计算属性，方法和监听器<a title=\"#1.4-计算属性，方法和监听器\" href=\"#1.4-计算属性，方法和监听器\"></a></h2>\n<ul>\n<li>\n<p>compute：为了减少模板里面的复杂逻辑运算，方便维护<br>\n（1）支持缓存，只有依赖数据发生变化时，才会重新进行计算函数；<br>\n（2）计算属性内不支持异步操作；<br>\n（3）计算属性的函数中都有一个 get(默认具有，获取计算属性)和 set(手动添加，设置计算属性)方法；<br>\n（4）计算属性是自动监听依赖值的变化，从而动态返回内容。</p>\n</li>\n<li>\n<p>watch：侦听属性<br>\n（1）不支持缓存，只要数据发生变化，就会执行侦听函数；<br>\n（2）侦听属性内支持异步操作；<br>\n（3）侦听属性的值可以是一个对象，接收 handler 回调，deep，immediate 三个属性；<br>\n（4）监听是一个过程，在监听的值变化时，可以触发一个回调，并做一些其他事情。</p>\n</li>\n</ul>\n<h2 id=\"1.5-vue中的指令\">1.5 Vue中的指令<a title=\"#1.5-vue中的指令\" href=\"#1.5-vue中的指令\"></a></h2>\n<ul>\n<li>v-if  v-else-if v-else\n<ul>\n<li>进行条件判断来渲染</li>\n</ul>\n</li>\n<li>v-for\n<ul>\n<li>进行循环</li>\n</ul>\n</li>\n<li>v-show\n<ul>\n<li>进行条件判断来决定display是否为null</li>\n<li>在一些DOM变化比较频繁的地方使用v-show更好，因为v-if是对DOM的操作，性能消耗比较大</li>\n</ul>\n</li>\n<li>v-bind，缩写:\n<ul>\n<li>动态地绑定一个或多个 attribute，或一个组件 prop 到表达式。</li>\n</ul>\n</li>\n<li>v-on，缩写@click\n<ul>\n<li>绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略。</li>\n<li>修饰符\n<ul>\n<li>.stop- 调用event.stopPropagation()。</li>\n<li>.prevent- 调用event.preventDefault()。</li>\n<li>.capture- 添加事件侦听器时使用 capture 模式。</li>\n<li>.self- 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li>\n<li>.{keyCode | keyAlias}- 只当事件是从特定键触发时才触发回调。</li>\n<li>.native- 监听组件根元素的原生事件。</li>\n<li>.once- 只触发一次回调。</li>\n<li>.left- (2.2.0) 只当点击鼠标左键时触发。</li>\n<li>.right- (2.2.0) 只当点击鼠标右键时触发。</li>\n<li>.middle- (2.2.0) 只当点击鼠标中键时触发。</li>\n<li>.passive- (2.3.0) 以{ passive: true }模式添加侦听器</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1.7-路由（vue-router）\">1.7 路由（Vue Router）<a title=\"#1.7-路由（vue-router）\" href=\"#1.7-路由（vue-router）\"></a></h2>\n<p>Vue Router 是 Vue.js 官方的路由管理器。</p>\n<h2 id=\"1.8-keep-alive\">1.8 keep-alive<a title=\"#1.8-keep-alive\" href=\"#1.8-keep-alive\"></a></h2>\n<ul>\n<li>\n<p>Props：</p>\n<ul>\n<li>include - 字符串或正则表达式。只有名称匹配的组件会被缓存。</li>\n<li>exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。</li>\n<li>max - 数字。最多可以缓存多少组件实例。</li>\n</ul>\n</li>\n<li>\n<p>用法：</p>\n<ul>\n<li>&lt;keep-alive&gt; 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。</li>\n<li>&lt;keep-alive&gt; 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在组件的父组件链中。</li>\n<li>当组件在&lt;keep-alive&gt; 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1.9-数据双向绑定\">1.9 数据双向绑定<a title=\"#1.9-数据双向绑定\" href=\"#1.9-数据双向绑定\"></a></h2>\n<blockquote>\n<p>详细见，我是你的超级英雄博客：<a href=\"https://juejin.cn/post/6844903903822086151\" target=\"_blank\">0 到 1 掌握：Vue 核心之数据双向绑定</a></p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20210314122136802.png\" alt=\"在这里插入图片描述\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>视图变化更新数据：通过事件监听的方式，Object.defineProperty方法属性拦截的方式，把data对象里每个数据的读写转化成getter/setter，来通知视图进行更新。</li>\n<li>数据变化更新视图：\n<ul>\n<li>实现一个监听器 Observer ，用来劫持并监听所有属性，如果属性发生变化，就通知订阅者；\n<ul>\n<li>该构造函数主要使用了Object.defineProperty方法来感知数据的变化，并去通知订阅者</li>\n</ul>\n</li>\n<li>实现一个订阅器 Dep，用来收集订阅者，对监听器 Observer 和 订阅者 Watcher 进行统一管理；\n<ul>\n<li>该构造函数完成的功能是在Observer感知到数据变化后统一收集Wather，然后统一更新</li>\n</ul>\n</li>\n<li>实现一个订阅者 Watcher，可以收到属性的变化通知并执行相应的方法，从而更新视图；\n<ul>\n<li>该构造函数主要实现初始化时将自身添加进Dep订阅器中</li>\n</ul>\n</li>\n<li>实现一个解析器 Compile，可以解析每个节点的相关指令，对模板数据和订阅器进行初始化。<br>\n<img src=\"https://img-blog.csdnimg.cn/20210314122323174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\"></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"2.项目开发问题\">2.项目开发问题<a title=\"#2.项目开发问题\" href=\"#2.项目开发问题\"></a></h1>\n<h2 id=\"2.1-字题图标使用\">2.1 字题图标使用<a title=\"#2.1-字题图标使用\" href=\"#2.1-字题图标使用\"></a></h2>\n<p>字体图标主要是上<a href=\"https://www.iconfont.cn/\" target=\"_blank\">阿里巴巴的矢量图标库</a>，使用方法也很简单，如下：</p>\n<ol>\n<li>找到自己需要的图标并加入到项目中</li>\n<li>下载压缩包后将一下几个文件放在自己项目的静态文件中<br>\n<img src=\"https://img-blog.csdnimg.cn/20210314171331564.png\" alt=\"在这里插入图片描述\" loading=\"lazy\"></li>\n<li>在index入口文件处引入iconfont.css<br>\n<img src=\"https://img-blog.csdnimg.cn/20210314171518101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\"></li>\n<li>在需要用到的地方直接使用<br>\n<img src=\"https://img-blog.csdnimg.cn/20210314171618980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\"></li>\n</ol>\n<h2 id=\"2.2-防抖和节流\">2.2 防抖和节流<a title=\"#2.2-防抖和节流\" href=\"#2.2-防抖和节流\"></a></h2>\n<p>见另一篇博客：<a href=\"http://blog.wutortoise.cn/2021/02/06/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81\" target=\"_blank\">防抖和节流</a></p>\n<h2 id=\"2.3-nginx部署前端项目\">2.3 Nginx部署前端项目<a title=\"#2.3-nginx部署前端项目\" href=\"#2.3-nginx部署前端项目\"></a></h2>\n<ol>\n<li>在vue项目中使用npm run build生成dist文件</li>\n<li>将dist文件上传到自己服务器某文件夹处</li>\n<li>按照nginx配置好信息后重启nginx</li>\n</ol>\n<blockquote>\n<p>参考文章：<br>\n1.<a href=\"https://www.cnblogs.com/netlock/p/13099139.html\" target=\"_blank\">Ubuntu使用Nginx 部署你的静态网页</a><br>\n2.<a href=\"https://hjxlog.com/posts/20191130a1.html\" target=\"_blank\">将Hexo部署到阿里云轻量服务器（保姆级教程）</a></p>\n</blockquote>\n<h2 id=\"2.4-node.js部署后端接口\">2.4 Node.js部署后端接口<a title=\"#2.4-node.js部署后端接口\" href=\"#2.4-node.js部署后端接口\"></a></h2>\n<ol>\n<li>使用node写好接口</li>\n<li>上传到服务器</li>\n<li>使用forever或pm2进行运行</li>\n</ol>\n<p>ps：注意后端服务器要确保设置了可跨域</p>\n","prev":{"title":"计算机网络自顶向下笔记","link":"2021/03/19/计算机网络自顶向下笔记"},"next":{"title":"寒假回顾","link":"2021/02/25/寒假回顾"},"plink":"http://example.com/2021/03/14/去哪了网项目总结/","toc":[{"id":"《去哪网》制作到上线总结","title":"《去哪网》制作到上线总结","index":"1"},{"id":"1.-vue","title":"1. Vue","index":"2","children":[{"id":"1.1-mvvm模式","title":"1.1 MVVM模式","index":"2.1"},{"id":"1.2-前端组件化","title":"1.2 前端组件化","index":"2.2"},{"id":"1.3-vue实例以及生命周期","title":"1.3 Vue实例以及生命周期","index":"2.3"},{"id":"1.4-计算属性，方法和监听器","title":"1.4 计算属性，方法和监听器","index":"2.4"},{"id":"1.5-vue中的指令","title":"1.5 Vue中的指令","index":"2.5"},{"id":"1.7-路由（vue-router）","title":"1.7 路由（Vue Router）","index":"2.6"},{"id":"1.8-keep-alive","title":"1.8 keep-alive","index":"2.7"},{"id":"1.9-数据双向绑定","title":"1.9 数据双向绑定","index":"2.8"}]},{"id":"2.项目开发问题","title":"2.项目开发问题","index":"3","children":[{"id":"2.1-字题图标使用","title":"2.1 字题图标使用","index":"3.1"},{"id":"2.2-防抖和节流","title":"2.2 防抖和节流","index":"3.2"},{"id":"2.3-nginx部署前端项目","title":"2.3 Nginx部署前端项目","index":"3.3"},{"id":"2.4-node.js部署后端接口","title":"2.4 Node.js部署后端接口","index":"3.4"}]}],"reading_time":"3515 words in 23 min"}