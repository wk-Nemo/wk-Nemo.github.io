{"title":"Java中的注解","date":"2021-11-12T09:06:13.000Z","date_formatted":{"ll":"Nov 12, 2021","L":"11/12/2021","MM-DD":"11-12"},"link":"2021/11/12/Java中的注解","categories":["Java"],"updated":"2023-05-17T12:22:10.797Z","content":"<h2 id=\"注解\">注解<a title=\"#注解\" href=\"#注解\"></a></h2>\n<p><strong>概念：</strong> 注解，也叫元数据。JDK1.5后提出的新特性，用于描述新特性。使用注解：<code>@注解名称</code></p>\n<p><strong>作用分类：</strong></p>\n<ul>\n<li>\n<p>编写文档：通过代码里标识的注解生成文档</p>\n</li>\n<li>\n<p>代码分析：通过代码里的标识的注解对代码进行分析【使用反射】</p>\n</li>\n<li>\n<p>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查</p>\n</li>\n</ul>\n<h2 id=\"jdk预定义的注解\">jdk预定义的注解<a title=\"#jdk预定义的注解\" href=\"#jdk预定义的注解\"></a></h2>\n<ul>\n<li>@Deprecated 已过期，表示方法是不被建议使用的</li>\n<li>@Override 重写，标识覆盖它的父类的方法</li>\n<li>@SuppressWarnings 压制警告，抑制警告</li>\n</ul>\n<p><strong>Deprecated 注解</strong></p>\n<p>可以修饰类、方法、变量，在java源码中被@Deprecated修饰的类、方法、变量等表示不建议使用的，可能会出现错误的，可能以后会被删除的类、方法等，如果现在使用，则在以后使用了这些类、方法的程序在更新新的JDK、jar包等就会出错，不再提供支持。<br>\n个人程序中的类、方法、变量用@Deprecated修饰同样是不希望自己和别人在以后的时间再次使用此类、方法。当编译器编译时遇到了使用@Deprecated修饰的类、方法、变量时会提示相应的警告信息。</p>\n<p><strong>Override 注解</strong></p>\n<p>指明被注解的方法需要覆写超类中的方法，如果某个方法使用了该注解，却没有覆写超类中的方法(如大小写写错了，或者参数错了，或者是子类自己定义的方法)，编译器就会生成一个错误。<br>\n在子类中重写父类或接口的方法，@Overide并不是必须的。但是还是建议使用这个注解，在某些情况下，假设你修改了父类的方法的名字，那么之前重写的子类方法将不再属于重写，如果没有@Overide，你将不会察觉到这个子类的方法。有了这个注解修饰，编译器则会提示你这些信息。</p>\n<p><strong>Suppresswarnings 注解</strong></p>\n<p>@SuppressWarnings用来抑制编译器生成警告信息，可以修饰的元素为类，方法，方法参数，属性，局部变量。它可以达到抑制编译器编译时产生警告的目的，使用@SuppressWarnings注解，采用就近原则，比如一个方法出现警告，尽量使用@SuppressWarnings注解这个方法，而不是注解方法所在的类。所属范围越小越好，因为范围大了，不利于发现该类下其他方法的警告信息。<br>\n但是很不建议使用@SuppressWarnings注解，使用此注解，开发人员看不到编译时编译器提示的相应的警告，不能选择更好、更新的类、方法或者不能编写更规范的编码。同时后期更新JDK、jar包等源码时，使用@SuppressWarnings注解的代码可能受新的JDK、jar包代码的支持，出现错误，仍然需要修改。</p>\n<h2 id=\"自己定义注解\">自己定义注解<a title=\"#自己定义注解\" href=\"#自己定义注解\"></a></h2>\n<p><strong>格式：</strong> <code>public @interface 名称</code></p>\n<p><strong>本质：</strong> 就是一个接口，默认继承<code>Annotation</code>接口</p>\n<ul>\n<li><code>public interface MyAnno extends java.lang.annotation.Annotation &#123;&#125;</code></li>\n</ul>\n<p><strong>属性：</strong> 接口中的抽象方法，有如下要求：</p>\n<ul>\n<li>属性的返回值类型\n<ul>\n<li>基本数据类型</li>\n<li>字符串 <code>String</code></li>\n<li>枚举</li>\n<li>注解</li>\n<li>以上类型的数组</li>\n</ul>\n</li>\n<li>定义了属性，在使用时需要给属性赋值\n<ul>\n<li>可以使用<code>default</code>初始化默认值</li>\n<li>如果只有一个属性需要赋值，并且属性的名称是<code>value</code>可以直接写值</li>\n<li>数组赋值时，使用大括号。如果数组中只有一个值，大括号可以省略</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.itcast.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnno &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">show1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  String <span class=\"title function_\">show2</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  Person <span class=\"title function_\">per</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  MyAnno2 <span class=\"title function_\">anno2</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  String[] strs();</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">age</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  String <span class=\"title function_\">name</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;wk&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.itcast.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@MyAnno(age=12, name=&quot;cy&quot;, ...)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Worker</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>元注解：</strong> 用于描述注解的注解</p>\n<ul>\n<li><code>@Target</code>：描述注解能够作用的位置\n<ul>\n<li><code>ElemenType.TYPE</code>：类</li>\n<li><code>ElemenType.METHOD</code>：方法</li>\n<li><code>ElemenType.FIELD</code>：成员变量上</li>\n</ul>\n</li>\n<li><code>@Retention</code>：描述注解被保留的阶段\n<ul>\n<li><code>@Retention(value=&#123;RetentionPolicy.RUNTIME&#125;)</code>：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</li>\n</ul>\n</li>\n<li><code>@Documented</code>：描述注解是否被抽取到api文档</li>\n<li><code>@Inherited</code>：描述注解是否被子类继承</li>\n</ul>\n<h2 id=\"在程序中使用注解\">在程序中使用注解<a title=\"#在程序中使用注解\" href=\"#在程序中使用注解\"></a></h2>\n<p>配合反射进行一个小测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.itcast.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.ElementType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Target;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 描述需要去执行的类名和方法名</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Pro &#123;</span><br><span class=\"line\">  String <span class=\"title function_\">className</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  String <span class=\"title function_\">methodName</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.itcast.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Annotation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pro(className = &quot;cn.itcast.annotation.Demo1&quot;, methodName = &quot;show&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReflectTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 解析注解</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.1 获取该类的字节码文件</span></span><br><span class=\"line\">    Class&lt;ReflectTest&gt; reflectTestClass = ReflectTest.class;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. 获取上边的注解对象</span></span><br><span class=\"line\">    <span class=\"type\">Pro</span> <span class=\"variable\">an</span> <span class=\"operator\">=</span> reflectTestClass.getAnnotation(Pro.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3. 调用注解中的抽象方法，获取返回值</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> an.className();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> an.methodName();</span><br><span class=\"line\">    System.out.println(className);</span><br><span class=\"line\">    System.out.println(methodName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4. 加载该类进内存</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">cls</span> <span class=\"operator\">=</span> Class.forName(className);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 5.创建对象</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> cls.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 6. 获取方法对象</span></span><br><span class=\"line\">    <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> cls.getMethod(methodName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 7. 执行方法</span></span><br><span class=\"line\">    method.invoke(obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","prev":{"title":"Java中的反射","link":"2021/11/12/Java中的反射"},"next":{"title":"Java中的泛型","link":"2021/11/10/Java中的泛型"},"plink":"http://example.com/2021/11/12/Java中的注解/","toc":[{"id":"注解","title":"注解","index":"1"},{"id":"jdk预定义的注解","title":"jdk预定义的注解","index":"2"},{"id":"自己定义注解","title":"自己定义注解","index":"3"},{"id":"在程序中使用注解","title":"在程序中使用注解","index":"4"}],"reading_time":"1353 words in 9 min"}