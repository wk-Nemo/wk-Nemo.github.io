{"title":"秋招保驾护航——数据库篇","date":"2021-09-09T03:29:04.000Z","date_formatted":{"ll":"Sep 9, 2021","L":"09/09/2021","MM-DD":"09-09"},"link":"2021/09/09/秋招保驾护航——数据库篇","tags":["计算机基础"],"categories":["数据库"],"updated":"2023-05-17T12:19:56.976Z","content":"<h1 id=\"数据库\">数据库<a title=\"#数据库\" href=\"#数据库\"></a></h1>\n<p>基础课程之一，开发过程中经常使用。先看视频简历知识体系，后学习java的过程中逐渐深入。</p>\n<h2 id=\"基本概念\">基本概念<a title=\"#基本概念\" href=\"#基本概念\"></a></h2>\n<h4 id=\"1.-什么是数据库？什么是数据库管理系统？什么是sql？他们的关系是什么？\">1. 什么是数据库？什么是数据库管理系统？什么是SQL？他们的关系是什么？<a title=\"#1.-什么是数据库？什么是数据库管理系统？什么是sql？他们的关系是什么？\" href=\"#1.-什么是数据库？什么是数据库管理系统？什么是sql？他们的关系是什么？\"></a></h4>\n<p>数据库（database）：按照一定格式存储数据的一些文件的组合</p>\n<p>数据库管理系统（DataBaseManagement）：用于管理数据库中的数据，可以对数据进行增删改查</p>\n<p>SQL：结构化查询语言，程序运猿编写SQL语句，DBMS负责执行SQL语句，最终完成数据的增删改查</p>\n<p>关系：DBMS执行SQL语句操作DB</p>\n<h4 id=\"2.-数据库常见指令\">2. 数据库常见指令<a title=\"#2.-数据库常见指令\" href=\"#2.-数据库常见指令\"></a></h4>\n<ul>\n<li>exit：退出</li>\n<li>show databases：查看数据库</li>\n<li>use name：使用某个数据库</li>\n<li>create database name：创建数据库</li>\n</ul>\n<h4 id=\"3.-表\">3. 表<a title=\"#3.-表\" href=\"#3.-表\"></a></h4>\n<p>表（table）：数据库中最基本的单元</p>\n<ul>\n<li>\n<p>数据库中以表的形式存储数据，表的形式比较直观</p>\n</li>\n<li>\n<p>任何一张表都有行和列</p>\n<ul>\n<li>行（row）：称位数据/记录</li>\n<li>列（column）：被称为字段</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"sql语句\">SQL语句<a title=\"#sql语句\" href=\"#sql语句\"></a></h2>\n<h4 id=\"1.-假设一个表的主键是创建日期和id，还有一个属性是访问量，怎么通过sql语句求出平均每天访问量最大的id\">1. 假设一个表的主键是创建日期和id，还有一个属性是访问量，怎么通过sql语句求出平均每天访问量最大的id<a title=\"#1.-假设一个表的主键是创建日期和id，还有一个属性是访问量，怎么通过sql语句求出平均每天访问量最大的id\" href=\"#1.-假设一个表的主键是创建日期和id，还有一个属性是访问量，怎么通过sql语句求出平均每天访问量最大的id\"></a></h4>\n<p><strong>主要思路：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select  id  </span><br><span class=\"line\">from ( select </span><br><span class=\"line\">       表名.id as id, </span><br><span class=\"line\">       表名.访问量/(日期差计算函数(表名.create_time , now())+1) as 平均日访问量</span><br><span class=\"line\">    from 表名</span><br><span class=\"line\">)  as  临时表</span><br><span class=\"line\">where 临时表.平均日访问量 = (</span><br><span class=\"line\">    select</span><br><span class=\"line\">         max( 表名.访问量/(日期差计算函数(表名.create_time , now())+1) )</span><br><span class=\"line\">    from 表名  </span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在<code>mysql</code>中,如果<code>create_time</code>使用的是<code>TIMESTAMP</code>类型，则用 <code>TIMESTAMPDIFF( DAY, create_time , now()) + 1</code> 计算日期差</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select  表名.id </span><br><span class=\"line\">from    表名 </span><br><span class=\"line\">inner join (</span><br><span class=\"line\">    select </span><br><span class=\"line\">        表名.id as id,</span><br><span class=\"line\">        表名.create_time as create_time,</span><br><span class=\"line\">        max( 表名.访问量/(日期差计算函数(表名.create_time , now())+1) ) as 最大平均日访问量</span><br><span class=\"line\">    from 表名 </span><br><span class=\"line\">) as 临时表 on (表名.id = 临时表.id and 表名.create_time = 临时表.create_time)</span><br></pre></td></tr></table></figure>\n<h2 id=\"约束\">约束<a title=\"#约束\" href=\"#约束\"></a></h2>\n<p>对表中的数据进行限定，保证数据的正确性、有效性和完整性</p>\n<ul>\n<li>\n<p>非空约束：<code>not null</code></p>\n</li>\n<li>\n<p>唯一约束：<code>unique</code></p>\n</li>\n<li>\n<p>主键约束：<code>primary key</code></p>\n</li>\n<li>\n<p>外键约束：<code>foreign key</code></p>\n</li>\n</ul>\n<h4 id=\"1.-非空约束\">1. 非空约束<a title=\"#1.-非空约束\" href=\"#1.-非空约束\"></a></h4>\n<p><code>not null</code>，限制某一列的值不能为null</p>\n<ul>\n<li>\n<p>创建表时添加约束</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE stu(</span><br><span class=\"line\">    id INT,</span><br><span class=\"line\">    NAME VARCHAR(20) NOT NULL -- name不能为null</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建表后添加约束：<code>ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;</code></p>\n</li>\n<li>\n<p>删除约束：<code>ALTER TABLE stu MODIFY NAME VARCHAR(20);</code></p>\n</li>\n</ul>\n<h4 id=\"2.-唯一约束\">2. 唯一约束<a title=\"#2.-唯一约束\" href=\"#2.-唯一约束\"></a></h4>\n<p><code>unique</code>，限制某一列的值不能重复，受约束的列最多只能有一条记录为null</p>\n<ul>\n<li>\n<p>创建表时添加约束</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE stu(</span><br><span class=\"line\">    id INT,</span><br><span class=\"line\">    phone_number VARCHAR(20) UNIQUE -- 手机号</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建表后添加约束：<code>ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;</code></p>\n</li>\n<li>\n<p>删除唯一约束：<code>ALTER TABLE stu DROP INDEX phone_number;</code></p>\n</li>\n</ul>\n<h4 id=\"3.-主键约束\">3. 主键约束<a title=\"#3.-主键约束\" href=\"#3.-主键约束\"></a></h4>\n<p><code>primary key</code>，（1）主键非空且唯一（2）主键就是记录的唯一标识（3）一张表只能有一个字段为主键</p>\n<ul>\n<li>\n<p>创建表时添加约束：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table stu(</span><br><span class=\"line\">    id int primary key,-- 给id添加主键约束</span><br><span class=\"line\">    name varchar(20)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建表后添加约束：<code>ALTER TABLE stu MODIFY id INT PRIMARY KEY;</code></p>\n</li>\n<li>\n<p>删除主键约束</p>\n<ul>\n<li>（错误）<code>alter table stu modify id int;</code></li>\n<li>（正确）<code>ALTER TABLE stu DROP PRIMARY KEY;</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>自动增长:</strong></p>\n<ol>\n<li>\n<p>概念：如果某一列的数据类型为数值类型，可以使用<code>auto_increment</code>设置值的自动增长</p>\n</li>\n<li>\n<p>创建表时，添加主键约束，并且设置自动增长</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> stu(</span><br><span class=\"line\">    id <span class=\"type\">int</span> <span class=\"keyword\">primary</span> key auto_increment,<span class=\"comment\">-- 给id添加主键约束</span></span><br><span class=\"line\">    name <span class=\"type\">varchar</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>创建表后，设置自动增长：<code>ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</code></p>\n</li>\n<li>\n<p>删除自动增长：<code>ALTER TABLE stu MODIFY id INT;</code></p>\n</li>\n</ol>\n<h4 id=\"4.-外键约束\">4. 外键约束<a title=\"#4.-外键约束\" href=\"#4.-外键约束\"></a></h4>\n<p><code>foreign key</code>，让表与表产生关系，从而保证数据的正确性</p>\n<ul>\n<li>\n<p>创建表时添加外键：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table 表名(</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    外键列名 数据类型,</span><br><span class=\"line\">    constraint 外键名称 foreign key (外键列名) references 主表名称(主表列名)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>删除外键：<code>alter table 表名 drop foreign key 外键名称;</code></p>\n</li>\n<li>\n<p>创建表后添加外键：<code>alter table 表名 add constraint 外键名称 foreign key (外键列名) references 主表名称(主表列名);</code></p>\n</li>\n<li>\n<p>级联操作</p>\n<ul>\n<li>\n<p>添加级联：<code>alter table 表名 add constraint 外键名称 foreign key (外键列名) references 主表名称(主表列名) on update cascade on delete cascade;</code></p>\n</li>\n<li>\n<p>级联分类</p>\n<ul>\n<li>\n<p>级联更新：<code>on update cascade</code></p>\n</li>\n<li>\n<p>级联删除：<code>on delete cascade</code></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>外键可以为null，但是不可以为不存在的外键值</p>\n</li>\n</ul>\n<h2 id=\"事务\">事务<a title=\"#事务\" href=\"#事务\"></a></h2>\n<h4 id=\"1.-什么是事务？\">1. 什么是事务？<a title=\"#1.-什么是事务？\" href=\"#1.-什么是事务？\"></a></h4>\n<p>一个事务其实就是一个完整的业务逻辑</p>\n<p>eg. a账户向b账户转账100元</p>\n<ul>\n<li>a账户钱 -100（update语句）</li>\n<li>b账户 +100（update语句）</li>\n</ul>\n<p>以上操作是一个最小的工作单元，要么同时成功，要么同时失败，不可再分。</p>\n<h4 id=\"2.-只有dml才有事务一说，其他语句和事务无关\">2. 只有DML才有事务一说，其他语句和事务无关<a title=\"#2.-只有dml才有事务一说，其他语句和事务无关\" href=\"#2.-只有dml才有事务一说，其他语句和事务无关\"></a></h4>\n<p>只有insert、delete、update三个语句和事务有关，因为只有以上三个语句是数据库表中的数据进行增删改。而涉及到增删改就要考虑安全问题。</p>\n<h4 id=\"3.-事务的理解\">3. 事务的理解<a title=\"#3.-事务的理解\" href=\"#3.-事务的理解\"></a></h4>\n<p>事务不是一个语句完成的，是由多个语句共同协作完成的。因为完成一个业务逻辑，需要多个步骤对应多个语句完成，如果任何事务一条DML语句执行，那么事务就失去了价值。<strong>所以事务可以认为是一批同时成功、同时失败的DML语句。</strong></p>\n<h4 id=\"4.-事务是如何实现的？\">4. 事务是如何实现的？<a title=\"#4.-事务是如何实现的？\" href=\"#4.-事务是如何实现的？\"></a></h4>\n<p>在执行事务时，每一条DML的操作都会记录到“事务性活动文件中”，在事务执行的过程中可以<strong>提交事务</strong>，也可以<strong>回滚事务</strong>。</p>\n<ul>\n<li>提交事务：清空事务性活动日志，将数据全部彻底持久化到数据库表中。标志着事务的成功结束。</li>\n<li>回滚事务：将之前的所有DML操作全部撤销，清空事务性活动日志。标志着事务的失败结束。</li>\n</ul>\n<h4 id=\"5.-事务的特性\">5. 事务的特性<a title=\"#5.-事务的特性\" href=\"#5.-事务的特性\"></a></h4>\n<ul>\n<li>原子性：事务是最小的工作单元，不可再分</li>\n<li>一致性：同一个事务中的操作同时成功或同时失败，以保证数据的一致性</li>\n<li>隔离性：两个事务之间有一定的隔离</li>\n<li>持久性：事务最终结束时，将数据进行存储</li>\n</ul>\n<h4 id=\"6.-事务隔离级别\">6. 事务隔离级别<a title=\"#6.-事务隔离级别\" href=\"#6.-事务隔离级别\"></a></h4>\n<p>四个级别：</p>\n<ul>\n<li>读未提交：read uncommitted（级别最低）\n<ul>\n<li>事务A可以读取到事务B未提交的数据</li>\n<li>存在的问题：脏读（Dirty Read）现象</li>\n</ul>\n</li>\n<li>读已提交：read committed\n<ul>\n<li>事务A只能读取到事务B已提交的数据，这是大多数据库的隔离级别</li>\n<li>解决的问题：脏读现象</li>\n<li>存在的问题：不可重复读取数据，在事务开启后</li>\n</ul>\n</li>\n<li>可重复读：repeatable read\n<ul>\n<li>可重复读取：事务A开启后，不管多久，每一次在事务A中读取的数据都是一致的。</li>\n<li>解决了问题：不可重复读</li>\n</ul>\n</li>\n<li>序列化：serializable（级别最高）</li>\n</ul>\n<h2 id=\"索引\">索引<a title=\"#索引\" href=\"#索引\"></a></h2>\n<h4 id=\"1.-什么是索引？\">1. 什么是索引？<a title=\"#1.-什么是索引？\" href=\"#1.-什么是索引？\"></a></h4>\n<p>索引是在数据库表的字段上添加的，是为了提高查询效率的一种机制。</p>\n<h4 id=\"2.-mysql两种存储引擎区别\">2. MySql两种存储引擎区别<a title=\"#2.-mysql两种存储引擎区别\" href=\"#2.-mysql两种存储引擎区别\"></a></h4>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>引擎</th>\n<th>特性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MYISAM</td>\n<td>不支持外键，表锁，插入数据时，锁定整个表，查表总行数时，不需要全表扫描</td>\n</tr>\n<tr>\n<td>INNODB</td>\n<td>支持外键，行锁，查表总行数时，全表扫描</td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"3.-索引的方式\">3. 索引的方式<a title=\"#3.-索引的方式\" href=\"#3.-索引的方式\"></a></h4>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>索引</th>\n<th>区别</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Hash</td>\n<td>hash索引，等值查询效率高，不能排序,不能进行范围查询</td>\n</tr>\n<tr>\n<td>B+</td>\n<td>数据有序,范围查询</td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"4.-索引的分类\">4. 索引的分类<a title=\"#4.-索引的分类\" href=\"#4.-索引的分类\"></a></h4>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>索引类型</th>\n<th>概念</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>普通索引</td>\n<td>最基本的索引，没有任何限制</td>\n</tr>\n<tr>\n<td>唯一索引</td>\n<td>数据有序,范围查询</td>\n</tr>\n<tr>\n<td>主键索引</td>\n<td>它是一种特殊的唯一索引，不允许有空值。</td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>针对较大的数据，生成全文索引很耗时好空间。</td>\n</tr>\n<tr>\n<td>组合索引</td>\n<td>为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则</td>\n</tr>\n</tbody>\n</table></div></div><h4 id=\"5.-索引的优缺点，什么时候使用索引，什么时候不能使用索引\">5. 索引的优缺点，什么时候使用索引，什么时候不能使用索引<a title=\"#5.-索引的优缺点，什么时候使用索引，什么时候不能使用索引\" href=\"#5.-索引的优缺点，什么时候使用索引，什么时候不能使用索引\"></a></h4>\n<p>索引最大的好处是提高查询速度， 缺点是更新数据时效率低，因为要同时更新索引 对数据进行频繁查询进建立索引，如果要频繁更改数据不建议使用索引。</p>\n<h2 id=\"数据库的设计\">数据库的设计<a title=\"#数据库的设计\" href=\"#数据库的设计\"></a></h2>\n<h4 id=\"1.-表与表之间的关系\">1. 表与表之间的关系<a title=\"#1.-表与表之间的关系\" href=\"#1.-表与表之间的关系\"></a></h4>\n<p>（1）<strong>一对多（多对一）</strong></p>\n<ul>\n<li>在<strong>多</strong>的一方建立外键，指向<strong>一</strong>的一方的主键</li>\n</ul>\n<p>（2）<strong>多对多</strong></p>\n<ul>\n<li>借助第三张中间表，中间表至少包含两个字段，这两个字段作为中间表的外键，分别指向两张表的主键</li>\n</ul>\n<p>（3）<strong>一对一</strong></p>\n<ul>\n<li>在任意一方添加唯一外键指向另一方的主键</li>\n<li>一对一通常合并为一张表，不必拆分为两张表。</li>\n</ul>\n<h4 id=\"2.-范式\">2. 范式<a title=\"#2.-范式\" href=\"#2.-范式\"></a></h4>\n<p>设计数据库时，为了设计出合理的关系型数据库，所遵循的不同的规范要求</p>\n<ul>\n<li>\n<p>**第一范式（1NF）**每一列都是不可分割的原子数据项</p>\n</li>\n<li>\n<p>**第二范式（2NF）**在1NF的基础上，非主属性必须完全依赖于主属性（在1NF的基础上，消除非主属性对主属性的部分函数依赖）</p>\n</li>\n<li>\n<p>**第三范式（3NF）**在2NF的基础上，任何非主属性不依赖于其他非主属性（在2NF的基础上，消除传递依赖）</p>\n</li>\n<li>\n<p><strong>巴斯-科德范式（BCNF）</strong></p>\n</li>\n<li>\n<p><strong>第四范式(4NF）</strong></p>\n</li>\n<li>\n<p><strong>第五范式（5NF，又称完美范式</strong>）</p>\n</li>\n</ul>\n","prev":{"title":"秋招保驾护航——操作系统篇","link":"2021/09/14/秋招保驾护航——操作系统篇"},"next":{"title":"秋招保驾护航——计算机网络","link":"2021/09/07/秋招保驾护航——计算机网络"},"plink":"http://example.com/2021/09/09/秋招保驾护航——数据库篇/","toc":[{"id":"数据库","title":"数据库","index":"1","children":[{"id":"基本概念","title":"基本概念","index":"1.1"},{"id":"sql语句","title":"SQL语句","index":"1.2"},{"id":"约束","title":"约束","index":"1.3"},{"id":"事务","title":"事务","index":"1.4"},{"id":"索引","title":"索引","index":"1.5"},{"id":"数据库的设计","title":"数据库的设计","index":"1.6"}]}],"reading_time":"2402 words in 16 min"}