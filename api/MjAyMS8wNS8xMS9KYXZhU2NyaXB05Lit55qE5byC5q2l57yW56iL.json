{"title":"JavaScript中的异步编程","date":"2021-05-11T12:14:43.000Z","date_formatted":{"ll":"May 11, 2021","L":"05/11/2021","MM-DD":"05-11"},"link":"2021/05/11/JavaScript中的异步编程","categories":["JavaScript"],"updated":"2023-05-17T12:22:16.578Z","content":"<h1 id=\"你不知道的javascript（中）\">你不知道的JavaScript（中）<a title=\"#你不知道的javascript（中）\" href=\"#你不知道的javascript（中）\"></a></h1>\n<p>你不知道的JavaScript深入的解析了JavaScript这门语言，而第二本中册主要讲了两大板块：JS中的类型和JS中的异步，本篇内容重在总结归纳异步编程部分。</p>\n<h3 id=\"第一章、异步：现在与将来\">第一章、异步：现在与将来<a title=\"#第一章、异步：现在与将来\" href=\"#第一章、异步：现在与将来\"></a></h3>\n<h6 id=\"1、js是单线程\">1、js是单线程<a title=\"#1、js是单线程\" href=\"#1、js是单线程\"></a></h6>\n<p>浏览器的渲染进程是多线程的，如下：</p>\n<ul>\n<li>JS引擎线程</li>\n<li>事件触发线程</li>\n<li>定时触发器线程</li>\n<li>异步http请求线程</li>\n<li>GUI渲染线程</li>\n</ul>\n<p>而js因为防止对DOM的操作产生混乱，因此它是单线程的。单线程就是一次只能只能一个任务，有多个任务的话需要一个个的执行，为了解决异步事件，js引擎产生了Event Loop机制。</p>\n<h4 id=\"1.1-事件循环(eventloop)\">1.1 事件循环(EventLoop)<a title=\"#1.1-事件循环(eventloop)\" href=\"#1.1-事件循环(eventloop)\"></a></h4>\n<p>js引擎不是独立运行的，它运行在<strong>宿主环境</strong>中，我们常见的便是浏览器，但是随着发展，nodej.s已经进入了服务器的领域，js还渗透到了其他的一些领域。这些宿主环境每个人都提供了各自的<strong>事件循环机制</strong>。</p>\n<p>那么什么是事件循环机制呢？js是单线程的，单线程就是一次只能只能一个任务，有多个任务的话需要一个个的执行，为了解决异步事件，js引擎产生了Event Loop机制。js中任务执行时会有任务队列，setTimeout是在设定的时间后加到任务队列的尾部。因此它虽然是定时器，但是在设定的时间结束时，回调函数是否执行取决于任务队列的状态。换个通俗点的话来说，setTimeout是一个“不太准确”的定时器。</p>\n<p>直到ES6中，js中才从本质上改变了在哪里管理事件循环，ES6精确得制定了事件循环的工作细节，其中最主要的原因是Promise的引入，这使得对事件循环队列调度的运行能直接进行精细的控制，而不像上面说到的”不太准确“的定时器。</p>\n<h6 id=\"1、宏任务\">1、宏任务<a title=\"#1、宏任务\" href=\"#1、宏任务\"></a></h6>\n<ul>\n<li>在 JS 中，大部分的任务都是在主线程上执行，常见的任务有:\n<ul>\n<li>渲染事件</li>\n<li>用户交互事件</li>\n<li>js脚本执行</li>\n<li>网络请求、文件读写完成事件等等。</li>\n<li>setTimeout、setInterval</li>\n</ul>\n</li>\n<li>为了让这些事件有条不紊地进行，JS引擎需要对之执行的顺序做一定的安排，V8 其实采用的是一种队列的方式来存储这些任务， 即先进来的先执行。</li>\n</ul>\n<h6 id=\"2、微任务\">2、微任务<a title=\"#2、微任务\" href=\"#2、微任务\"></a></h6>\n<p>（1）对每个宏任务而言，内部有一个都有一个微任务</p>\n<p>（2）引入微任务的初衷是为了解决异步回调的问题</p>\n<ul>\n<li>将异步回调进行宏任务队列的入队操作。</li>\n</ul>\n<p>采用改方式，那么执行回调的时机应该是在前面所有的宏任务完成之后，倘若现在的任务队列非常长，那么回调迟迟得不到执行，造成应用卡顿。</p>\n<ul>\n<li>将异步回调放到当前宏任务的末尾。</li>\n</ul>\n<p>为了规避第一种方式中的这样的问题，V8 引入了第二种方式，这就是微任务的解决方式。在每一个宏任务中定义一个微任务队列，当该宏任务执行完成，会检查其中的微任务队列，如果为空则直接执行下一个宏任务，如果不为空，则依次执行微任务，执行完成才去执行下一个宏任务。</p>\n<p>（3）常见的微任务有：</p>\n<ul>\n<li>MutationObserver</li>\n<li>Promise.then(或.reject) 以及以</li>\n<li>Promise 为基础开发的其他技术(比如fetch API)</li>\n<li>V8 的垃圾回收过程。</li>\n</ul>\n<p>我们来看一个常见的面试题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>); </span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout&#x27;</span>); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;resolve&#x27;</span>); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;end&#x27;</span>); </span><br></pre></td></tr></table></figure>\n<p>（1）先执行同步队列的任务，因此先打印start和end<br>\n（2）setTimeout 作为一个宏任务放入宏任务队列<br>\n（3）Promise.then作为一个为微任务放入到微任务队列<br>\n（4）Promise.resolve()将Promise的状态变为已成功，即相当于本次宏任务执行完，检查微任务队列，发现一个Promise.then, 执行<br>\n（5）接下来进入到下一个宏任务——setTimeout, 执行</p>\n<p>再看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise1&#x27;</span>)   </span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout2&#x27;</span>) </span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>) </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout1&#x27;</span>) </span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise2&#x27;</span>)     </span><br><span class=\"line\">  &#125;) </span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>); </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// start </span></span><br><span class=\"line\"><span class=\"comment\">// Promise1 </span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout1 </span></span><br><span class=\"line\"><span class=\"comment\">// Promise2 </span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout2 </span></span><br></pre></td></tr></table></figure>\n<p>接下来从js异步发展的历史来学习异步的相关知识</p>\n<h3 id=\"第二章、回调函数\">第二章、回调函数<a title=\"#第二章、回调函数\" href=\"#第二章、回调函数\"></a></h3>\n<p>回调是js中最基础的异步模式。</p>\n<h4 id=\"2.1-回调地狱\">2.1 回调地狱<a title=\"#2.1-回调地狱\" href=\"#2.1-回调地狱\"></a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">listen</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span> <span class=\"title function_\">handle</span>(<span class=\"params\">evt</span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">request</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">ajax</span>(<span class=\"string\">&quot;...&quot;</span>, <span class=\"keyword\">function</span> <span class=\"title function_\">response</span>(<span class=\"params\">test</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (text === <span class=\"string\">&quot;hello&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">handle</span>();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">request</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这种代码常常被成为<strong>回调地狱</strong>， 有时候也叫<strong>毁灭金字塔</strong>。因为多个异步操作形成了<strong>强耦合</strong>，只要有一个操作需要修改，只要有一个操作需要修改，它的上层回调函数和下层回调函数就需要跟着修改，想要理解、更新或维护这样的代码十分的困难。</p>\n<h4 id=\"2.2-信任问题\">2.2 信任问题<a title=\"#2.2-信任问题\" href=\"#2.2-信任问题\"></a></h4>\n<p>有的回调函数不是由你自己编写的，也不是在你直接的控制下的。多数情况下是第三方提供的。这种称位<strong>控制反转</strong>，就i是把自己程序的一部分执行控制交给了第三方。而你的代码和第三方工具之间没有一份明确表达的契约。会造成大量的混乱逻辑，导致信任链完全断裂。</p>\n<h3 id=\"第三章、promise\">第三章、Promise<a title=\"#第三章、promise\" href=\"#第三章、promise\"></a></h3>\n<p>回调函数的两个缺陷：回调地狱和缺乏可信任性。Promise解决了这两个问题。</p>\n<h4 id=\"3.1-promise的含义\">3.1 Promise的含义<a title=\"#3.1-promise的含义\" href=\"#3.1-promise的含义\"></a></h4>\n<p>Promise简单来说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。</p>\n<ul>\n<li>Promise对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：<strong>Pending（进行中）</strong>、<strong>Fulfilled（已成功）</strong>、<strong>Reject（已失败）</strong>。只有异步操作的结果可以决定当前是哪一种状态，其他任何操作都无法改变这个状态。</li>\n<li>一旦状态改变就不会再变，任何时候都可以得到这个结果。Promise的状态改变有两种可能：从Pending到Fulfilled和从Pending到Rejected。状态一旦发生改变就不会再变，会一直保持这个结果。</li>\n</ul>\n<p>Promise相当于购餐时的订单号，当我们付钱购买了想要的食物后，便会拿到小票。这时餐厅就在厨房后面为你准备可口的午餐，你在等待的过程中可以做点其他的事情，比如看个视频，打个游戏。当服务员喊道我们的订单时，我们就可以拿着小票去前台换我们的午餐。当然有时候，前台会跟你说你点的鸡腿没有了。这就是Promise的工作方式。</p>\n<h4 id=\"3.2-基本用法\">3.2 基本用法<a title=\"#3.2-基本用法\" href=\"#3.2-基本用法\"></a></h4>\n<h6 id=\"1、promise\">1、Promise<a title=\"#1、promise\" href=\"#1、promise\"></a></h6>\n<p>ES6规定，Promise对象是一个构造函数，用来生成Promise实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolvem reject</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// some code</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"comment\">/*异步操作成功*/</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>resolve的作用是将Promise对象的状态从“未完成”变成“成功”，在异步操作成功时调用，并将异步操作结果作为参数传递出去</li>\n<li>reject的作用是将Promise对象的状态从“未完成”变成“失败“，在异步操作失败时调用，并将异步操作爆出的错误作为参数传递出去</li>\n</ul>\n<h5 id=\"2、resolve函数、reject函数和then()方法\">2、resolve函数、reject函数和then()方法<a title=\"#2、resolve函数、reject函数和then()方法\" href=\"#2、resolve函数、reject函数和then()方法\"></a></h5>\n<p>Promise实例生成以后，可以使用then方法分别指定Resolved状态和Rejected状态的回调函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span>(<span class=\"params\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>then方法接受两个参数：第一个回调函数是Promise状态变为Resolved时调用的，第二个是Promise状态变成Rejected时调用</p>\n</li>\n<li>\n<p>第二个参数是可选的，不一定要提供</p>\n</li>\n<li>\n<p>两个函数都接受Promise对象传出去的值做参数。</p>\n<ul>\n<li>\n<p>reject函数传递的参数一半时Error对象的实例，表示抛出错误。</p>\n</li>\n<li>\n<p>resolve函数除了传递正常值以外，还可以传递一个Promise实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这种情况下，p1的状态决定了p2的状态。p2必须等到p1的状态变为resolve或reject才会执行回调函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t<span class=\"title function_\">resolve</span>(p1);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3.3-promise.prototype.then()\">3.3 Promise.prototype.then()<a title=\"#3.3-promise.prototype.then()\" href=\"#3.3-promise.prototype.then()\"></a></h4>\n<p>then方法是定义在原型对象Promise.prototype上的。它的作用是为Promise实例添加改变状态时的回调函数。</p>\n<ul>\n<li>\n<p>then方法接受两个参数：第一个回调函数是Promise状态变为Resolved时调用的，第二个是Promise状态变成Rejected时调用</p>\n</li>\n<li>\n<p>then方法返回的是一个新的Promise实例。因此可以采用<strong>链式</strong>的写法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>采用链式的写法可以指定一组按照次序调用的回调函数。如果前一个回调函数返回了一个Promise实例，那么后一个回调函数就会等待该Promise对象状态的变化再被调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">comments</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;resolved: &quot;</span>, comments)</span><br><span class=\"line\">&#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;rejected: &quot;</span>, err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者可以写的更加简洁一些</span></span><br><span class=\"line\"><span class=\"title function_\">promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;...&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"params\">comments</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;resolved: &quot;</span>, comments),</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;rejected: &quot;</span>, err)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"3.4-promise.prototype.catch()\">3.4 Promise.prototype.catch()<a title=\"#3.4-promise.prototype.catch()\" href=\"#3.4-promise.prototype.catch()\"></a></h4>\n<p>Promise.prototype.catch()是方法.then(null, rejection)的别名，用于指定发生错误时的回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getJSON</span>(<span class=\"string\">&#x27;/post.json&#x27;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">posts</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ....</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;发生错误&quot;</span>, error);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>getJSON返回一个Promise对象，如果该对象变成Resolved则会调用then()方法</p>\n</li>\n<li>\n<p>如果异步发生错误或者then方法发生错误，则会被catch捕捉</p>\n</li>\n<li>\n<p>Promise在resolve语句后面再抛出错误不会被捕获，因为Promise的状态一旦改变就不会再改变了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;ok&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;test&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promise</span><br><span class=\"line\">\t.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value)&#125;)</span><br><span class=\"line\">\t.<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error)&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Promise对象的错误具有“冒泡”的性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch捕获。一般来说不要再then中定义第二个函数，而总是用catch方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;ok&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;test&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 不推荐</span></span><br><span class=\"line\">promise</span><br><span class=\"line\">\t.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">\t\t<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value)&#125;,</span><br><span class=\"line\">\t\t<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error)&#125;</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">//推荐</span></span><br><span class=\"line\">promise</span><br><span class=\"line\">\t.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value)&#125;)</span><br><span class=\"line\">\t.<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error)&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>和传统的try/catch不同，如果没有使用catch指定错误处理的回调函数，promise对象抛出的错误不会传递到外层代码，即不会有任何反应</p>\n</li>\n<li>\n<p>catch返回的也是一个Promise对象，后面还可以跟then</p>\n</li>\n</ul>\n<h4 id=\"3.5-done()和finally()\">3.5 done()和finally()<a title=\"#3.5-done()和finally()\" href=\"#3.5-done()和finally()\"></a></h4>\n<h5 id=\"1.-done()\">1. done()<a title=\"#1.-done()\" href=\"#1.-done()\"></a></h5>\n<p>无论Promise对象的回调链是以then方法结束还是以catch方法结束，只要最后一个方法抛出错误，都有可能无法捕捉到（因为Promise内部的错误不会冒泡到全局）。为此可以提供一个done()方法，他总是在回调链的尾部，保证抛出任何可能出现的错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asyncFunc ()</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(f1)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(f2)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(f3)</span><br><span class=\"line\">.<span class=\"title function_\">done</span>()</span><br></pre></td></tr></table></figure>\n<p>它的源码实现很简单：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">prototypr</span>.<span class=\"property\">done</span> = <span class=\"keyword\">function</span> (<span class=\"params\">onFulfilled, onRejected</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(onFulfilled, onRejected)</span><br><span class=\"line\">\t.<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 抛出一个全局错误</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;<span class=\"keyword\">throw</span> reason&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2.-finally()\">2. finally()<a title=\"#2.-finally()\" href=\"#2.-finally()\"></a></h5>\n<p>finally方法用于指定不管Promise对象最后如何都会执行的操作。他与done方法的最大区别在于它接受一个回调函数作为参数，该函数不管怎么样都会执行。来看看它的实现方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">finally</span> = <span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> P = <span class=\"variable language_\">this</span>.<span class=\"property\">constructor</span></span><br><span class=\"line\">    <span class=\"comment\">// 巧妙的使用Promise.resolve方法，达到不管前面的Promise状态是fulfilled还是rejected，都会执行回调函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> P.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">callback</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> value),</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> P.<span class=\"title function_\">resolve</span>(<span class=\"title function_\">callback</span>()).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">throw</span> reason)</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3.6-promise.all()\">3.6 Promise.all()<a title=\"#3.6-promise.all()\" href=\"#3.6-promise.all()\"></a></h4>\n<p>Promise.all方法用于将多个Promise实例包装成一个新的Promise实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([p1, p2, p3])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>p1、p2、p3都是Promise实例，如果不是，则会使用Promise.resolve方法，将参数转化为Promise实例，再进行处理</p>\n</li>\n<li>\n<p>该方法的参数不一定是要数组，但必须要有Iterator接口，且每个组员都是Promise实例</p>\n</li>\n<li>\n<p>p的状态由p1、p2、p3决定</p>\n<ul>\n<li>只有p1、p2、p3的状态都变成Fulfilled，p的状态才会变成Fulfilled，此时p1、p2、p3的返回值组成一个数组传递给p的回调函数</li>\n<li>只要p1、p2、p3有一个状态变成Rejected，p的状态就会变成Rejected，此时第一个Rejected的实例的返回值传递给p的回调函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promises = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>].<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">id</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">getJSON</span>(<span class=\"string\">`/post/<span class=\"subst\">$&#123;id&#125;</span>.json`</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(promises).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">posts</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>如果作为参数的Promise实例自身定义了catch方法，那么它被rejected时并不会出发Promise.all()的catch方法</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(resolve, reject) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;error&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(resolve, reject) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;error&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p2的catch返回了一个新的Promise实例，该实例的最终状态是resolved</span></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([p1, p2])</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e)</span><br><span class=\"line\"><span class=\"comment\">// [&quot;hello&quot;, Error: error]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// p3没有自己的catch，所以错误被Promise.all的catch捕获倒了</span></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([p1, p3])</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> result)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e)</span><br><span class=\"line\"><span class=\"comment\">// Error: error</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3.7-promise.race()\">3.7 Promise.race()<a title=\"#3.7-promise.race()\" href=\"#3.7-promise.race()\"></a></h4>\n<p>Promise.race方法用于将多个Promise实例包装成一个新的Promise实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([p1, p2, p3])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>p1、p2、p3都是Promise实例，如果不是，则会使用Promise.resolve方法，将参数转化为Promise实例，再进行处理</p>\n</li>\n<li>\n<p>该方法的参数不一定是要数组，但必须要有Iterator接口，且每个组员都是Promise实例</p>\n</li>\n<li>\n<p>p的状态由p1、p2、p3决定，只要p1、p2、p3有一个实例率先改变状态，p的状态就会跟着改变。率先改变状态的实例的返回值传递给p的回调函数。</p>\n</li>\n</ul>\n<h4 id=\"3.8-promise.resolve()\">3.8 Promise.resolve()<a title=\"#3.8-promise.resolve()\" href=\"#3.8-promise.resolve()\"></a></h4>\n<p>Promise.resolve方法将现有对象转换成Promise对象，分为以下四种情况：</p>\n<h5 id=\"1.-参数是一个promise实例\">1. 参数是一个Promise实例<a title=\"#1.-参数是一个promise实例\" href=\"#1.-参数是一个promise实例\"></a></h5>\n<p>Promise.resolve不做任何改变</p>\n<h5 id=\"2.-参数是一个thenable对象\">2. 参数是一个thenable对象<a title=\"#2.-参数是一个thenable对象\" href=\"#2.-参数是一个thenable对象\"></a></h5>\n<p>thenable对象是指具有then方法的对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thenable = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">then</span>: <span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">resolve</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(thenable)</span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value) <span class=\"comment\">// 42</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Promise.resolve会将这个对象转换成Promise对象，然后立即执行thenable对象的then方法</p>\n<h5 id=\"3.-参数是不具有then方法或根本不是对象\">3. 参数是不具有then方法或根本不是对象<a title=\"#3.-参数是不具有then方法或根本不是对象\" href=\"#3.-参数是不具有then方法或根本不是对象\"></a></h5>\n<p>该情况下，Promise.resolve返回一个新的Promise对象，状态为Resolved</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;hello&#x27;</span>);</span><br><span class=\"line\">p.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">s</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"4.-不带任何参数\">4. 不带任何参数<a title=\"#4.-不带任何参数\" href=\"#4.-不带任何参数\"></a></h5>\n<p>此情况下，Promise.resolve方法返回一个Resolved状态的Promise对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>); </span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout&#x27;</span>); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;resolve&#x27;</span>); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;end&#x27;</span>); </span><br></pre></td></tr></table></figure>\n<p>（1）先执行同步队列的任务，因此先打印start和end<br>\n（2）setTimeout 作为一个宏任务放入宏任务队列<br>\n（3）Promise.then作为一个为微任务放入到微任务队列<br>\n（4）Promise.resolve()将Promise的状态变为已成功，即相当于本次宏任务执行完，检查微任务队列，发现一个Promise.then, 执行<br>\n（5）接下来进入到下一个宏任务——setTimeout, 执行</p>\n<h4 id=\"3.9-promise.reject()\">3.9 Promise.reject()<a title=\"#3.9-promise.reject()\" href=\"#3.9-promise.reject()\"></a></h4>\n<p>Promise.reject方法会返回一个新的Promise实例，状态为Rejected</p>\n<p>与Promise.resolve不同，Promise.reject会原封不动的将其参数作为reject的理由传递给后续的方法，因此没有那么多的情况分类</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thenable = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">then</span>: <span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">resolve</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(thenable)</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e === thenable)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第四章、gnerator\">第四章、Gnerator<a title=\"#第四章、gnerator\" href=\"#第四章、gnerator\"></a></h3>\n<p>Promise解决了回调函数的回调地狱的问题，但是Promise最大的问题是代码的冗余，原来的任务被Promise包装后，无论什么操作，一眼看过去都是许多then的堆积，原来的语义变得很不清楚。</p>\n<p>传统的编程语言中早有异步编程的解决方案，其中一个叫做<strong>协程</strong>，意思为多个线程相互作用，完成异步任务。它的运行流程如下：</p>\n<ul>\n<li>协程A开始执行</li>\n<li>协程A执行到一般暂停，执行权交到协程B中</li>\n<li>一段时间后，协程B交还执行权</li>\n<li>协程A恢复执行</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> *asyncJob () &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f = <span class=\"keyword\">yield</span> <span class=\"title function_\">readFile</span>(fileA);</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>它最大的优点就是，代码写法很像同步操作。</strong></p>\n<h4 id=\"4.1-generator封装异步任务\">4.1 Generator封装异步任务<a title=\"#4.1-generator封装异步任务\" href=\"#4.1-generator封装异步任务\"></a></h4>\n<p>Generator函数是协程在ES6中最大的实现，最大的特点就是可以交出函数的执行权。</p>\n<p>整个Generator函数就是一个封装的异步任务容器，异步操作需要用yield表明。Generator他能封装异步任务的原因如下：</p>\n<ul>\n<li>暂停和恢复执行</li>\n<li>函数体内外的数据交换</li>\n<li>错误处理机制</li>\n</ul>\n<p>上面代码的Generator函数的语法相关已经在上一篇<a href=\"http://blog.wutortoise.cn/2021/05/08/Generator%E5%87%BD%E6%95%B0\" target=\"_blank\">博客</a>中总结了，不能理解此处可以前往复习。</p>\n<p>Generator函数是一个异步操作的容器，它的自动执行需要一种机制，当异步操作有了结果，这种机制需要自动交回执行权，有两种方法可以做到：</p>\n<ul>\n<li>\n<p>回调函数：将异步操作包装成Thunk函数，在回调函数里面交回执行权</p>\n</li>\n<li>\n<p>Promise对象：将异步操作包装成Promise对象，使用then方法交回执行权</p>\n</li>\n</ul>\n<h4 id=\"4.2-thunk函数\">4.2 Thunk函数<a title=\"#4.2-thunk函数\" href=\"#4.2-thunk函数\"></a></h4>\n<blockquote>\n<p>参数的求值策略有两种，一种是传值调用，另一种是传名调用</p>\n<ul>\n<li>传值调用，在参数进入函数体前就进行计算；可能会造成性能损失。</li>\n<li>传名调用，在参数被调用时再进行计算。</li>\n</ul>\n</blockquote>\n<p>编译器的<strong>传名调用</strong>的实现将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫Thunk函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">m</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">f</span>(x + <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Thunk</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">thunk</span>) () &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">thunk</span>() * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"1.-js中的thunk函数\">1. js中的Thunk函数<a title=\"#1.-js中的thunk函数\" href=\"#1.-js中的thunk函数\"></a></h5>\n<p>js语言是按值调用的，它的Thunk函数含义和上述的有些不同。在js中，Thunk函数替换的不是表达式，而是多参数函数，将其替换成一个只接受回调函数作为参数的单参数函数。</p>\n<p>（1）在js中，任何函数，只要参数有回调函数就可以写成Thunk函数的形式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Thunk</span> = <span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">\t\t\t\targs.<span class=\"title function_\">push</span>(callback);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Thunk</span> = <span class=\"keyword\">function</span> (<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> fn.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, ...args, callback)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span> (a, cb) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">cb</span>(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ft = <span class=\"title class_\">Thunk</span>(f);</span><br><span class=\"line\"><span class=\"title function_\">ft</span>(<span class=\"number\">1</span>)(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n<p>（2）生产环境中使用Thunkify模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install <span class=\"title class_\">Thunkify</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> thunkify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;thunkify&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> read = <span class=\"title function_\">thunkify</span>(fs.<span class=\"property\">readFile</span>);</span><br><span class=\"line\"><span class=\"title function_\">read</span>(<span class=\"string\">&#x27;package.json&#x27;</span>)(<span class=\"keyword\">function</span>(<span class=\"params\">err, str</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"2.-generator函数的流程管理\">2. Generator函数的流程管理<a title=\"#2.-generator函数的流程管理\" href=\"#2.-generator函数的流程管理\"></a></h5>\n<p>前面提到了Thunk可以用于Generator函数的自动流程管理</p>\n<p>（1）Generator可以自动执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> *<span class=\"title function_\">gen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> res = g.<span class=\"title function_\">next</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (!res.<span class=\"property\">done</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">value</span>);</span><br><span class=\"line\">\tres = g.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这不适合异步操作，如果必须满足上一步执行完成才能执行下一步，上面的自动执行就不可行。</p>\n<p>（2）Thunk函数自动执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> thunkify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;thunkify&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> readFileThunk = <span class=\"title function_\">thunkify</span>(fs.<span class=\"property\">readFile</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"keyword\">function</span>* () &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> r1 = <span class=\"keyword\">yield</span> <span class=\"title function_\">readFileThunk</span>(<span class=\"string\">&#x27;/etc/fstab&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r1.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> r2 = <span class=\"keyword\">yield</span> <span class=\"title function_\">readFileThunk</span>(<span class=\"string\">&#x27;/etc/shell&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r2.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将同一个函数反复传入next方法的value属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r1 = g.<span class=\"title function_\">next</span>();</span><br><span class=\"line\">r1.<span class=\"title function_\">value</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> r2 = g.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">\tr2.<span class=\"title function_\">value</span>(<span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">\t\tg.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Thunk函数自动化流程管理</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span> (fn) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> gen = <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">next</span> (err, data) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> result = gen.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result.<span class=\"property\">done</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\tresult.<span class=\"title function_\">value</span>(next)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">run</span>(g)</span><br></pre></td></tr></table></figure>\n<p>上述的run函数就是以一个Generator函数自动执行器。有了这个执行器，不管内部有多少个异步操作，直接在将Generator函数传入run函数即可，但是要注意，<strong>每一个异步操作都是Thunk函数，也就是说yield后面必须是Thunk函数</strong>。</p>\n<h4 id=\"4.3-co模块\">4.3 co模块<a title=\"#4.3-co模块\" href=\"#4.3-co模块\"></a></h4>\n<p>co模块不需要编写Generator函数的执行器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;co&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// gen函数自动执行</span></span><br><span class=\"line\"><span class=\"title function_\">co</span>(gen);</span><br><span class=\"line\"><span class=\"comment\">// co函数返回一个Promise对象，因此可以用then方法添加回调</span></span><br><span class=\"line\"><span class=\"title function_\">co</span>(gen).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Generator函数执行完毕&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"1.-基于promise对象的自动执行\">1. 基于Promise对象的自动执行<a title=\"#1.-基于promise对象的自动执行\" href=\"#1.-基于promise对象的自动执行\"></a></h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">\t\tfs.<span class=\"title function_\">readFile</span>(fileName, <span class=\"keyword\">function</span> (<span class=\"params\">error, data</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (error) <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">resolve</span>(data);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"keyword\">function</span>* () &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> r1 = <span class=\"keyword\">yield</span> <span class=\"title function_\">readFileThunk</span>(<span class=\"string\">&#x27;/etc/fstab&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r1.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> r2 = <span class=\"keyword\">yield</span> <span class=\"title function_\">readFileThunk</span>(<span class=\"string\">&#x27;/etc/shell&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r2.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">gen</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 手动执行，使用then方法层层添加回调函数</span></span><br><span class=\"line\">g.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">\tg.<span class=\"title function_\">next</span>(data).<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">\t\tg.<span class=\"title function_\">next</span>(data)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据手动执行，写一个自动执行器</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span> (gen) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> g = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">next</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = g.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result.<span class=\"property\">done</span>) <span class=\"keyword\">return</span> result.<span class=\"property\">value</span>;</span><br><span class=\"line\">        result.<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">run</span>(gen)</span><br></pre></td></tr></table></figure>\n<h3 id=\"第五章、async函数\">第五章、async函数<a title=\"#第五章、async函数\" href=\"#第五章、async函数\"></a></h3>\n<p>ES2017标准引入了async函数，使得异步操作变得更加方便。<strong>async函数就是Generator函数的语法糖</strong>。</p>\n<p>async函数就是将Generator函数的*换成async，将yield换成await。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">varasyncReadFile = <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> r1 = <span class=\"keyword\">await</span> <span class=\"title function_\">readFileThunk</span>(<span class=\"string\">&#x27;/etc/fstab&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r1.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> r2 = <span class=\"keyword\">await</span> <span class=\"title function_\">readFileThunk</span>(<span class=\"string\">&#x27;/etc/shell&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(r2.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>async对于Generator的改进有三点：</p>\n<ul>\n<li>内置执行器：不需要像Generator函数那样引入Thunk函数和co模块来解决自动执行的问题</li>\n<li>适用性更广：Generator函数中yield后只能跟Thunk函数或者Promise对象，在async函数中可以是Promise对象和原始类型的值（数值、字符串和布尔值，但此之等同于同步操作）</li>\n<li>返回值是Promise：比Generator函数的返回值是一个Iterator对象方便了很多</li>\n</ul>\n<h5 id=\"1.-async函数的声明\">1. async函数的声明<a title=\"#1.-async函数的声明\" href=\"#1.-async函数的声明\"></a></h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数式声明</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"keyword\">async</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;&#125; &#125;</span><br><span class=\"line\">obj.<span class=\"title function_\">foo</span>().<span class=\"title function_\">then</span>(...)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// class方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Storage</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span> () &#123; ... &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2.-语法\">2. 语法<a title=\"#2.-语法\" href=\"#2.-语法\"></a></h5>\n<p>（1）async函数返回一个Promise对象</p>\n<ul>\n<li>async函数内部return语句的返回值，会成为then方法回调函数的参数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">f</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v)) <span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>async函数内部抛出的错误会导致返回的Promise对象变成reject状态，抛出的错误对象会被catch方法回调函数接收到。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;出错了&#x27;</span>)；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">f</span>().<span class=\"title function_\">then</span>(</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v)</span><br><span class=\"line\">\te =&gt; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// Error: 出错了</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>async函数返回的Promise对象必须等到内部所有的await命令后面的Promise对象执行完毕才会发生状态改变，除非遇到return语句或者抛出错误。</li>\n</ul>\n<p>（2）await命令</p>\n<ul>\n<li>\n<p>正常情况下await命令后面是一个Promise对象，如果不是会被resolve立即转成一个Promise对象</p>\n</li>\n<li>\n<p>await命令后面的Promise对象如果变成reject状态，则reject的参数会被catch方法的而回调函数接收到</p>\n</li>\n<li>\n<p>有时不希望抛出错误终止后面的步骤</p>\n<ul>\n<li>将await放在try…catch结构里面</li>\n<li>在await后面的Promise对象后添加一个catch方法</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;出错了&#x27;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">f</span>().<span class=\"title function_\">then</span>( <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v)) <span class=\"comment\">// hello</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">f1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;出错了&#x27;</span>)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">f1</span>().<span class=\"title function_\">then</span>( <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v)) <span class=\"comment\">// hello</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>await命令只能在async函数中使用，否则会报错</p>\n</li>\n<li>\n<p>如果await命令后面的异步操作不是继发关系，最好让他们同步触发</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"title function_\">getFoo</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"title function_\">getBar</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo, bar] = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([<span class=\"title function_\">getFoo</span>(), <span class=\"title function_\">getBar</span>()])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> fooPromise = <span class=\"title function_\">getFoo</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> barPromise = <span class=\"title function_\">getBar</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"keyword\">await</span> fooPromise;</span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"keyword\">await</span> barPromise;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"边学浏览器边学计网——白嫖篇","link":"2021/05/18/边学浏览器边学计网——白嫖篇"},"next":{"title":"Generator函数","link":"2021/05/08/Generator函数"},"plink":"http://example.com/2021/05/11/JavaScript中的异步编程/","toc":[{"id":"你不知道的javascript（中）","title":"你不知道的JavaScript（中）","index":"1","children":[{"id":"第一章、异步：现在与将来","title":"第一章、异步：现在与将来","index":"1.1"},{"id":"第二章、回调函数","title":"第二章、回调函数","index":"1.2"},{"id":"第三章、promise","title":"第三章、Promise","index":"1.3"},{"id":"第四章、gnerator","title":"第四章、Gnerator","index":"1.4"},{"id":"第五章、async函数","title":"第五章、async函数","index":"1.5"}]}],"reading_time":"6267 words in 42 min"}