{"title":"秋招保驾护航——js面试篇（上）","date":"2021-07-23T16:01:48.000Z","date_formatted":{"ll":"Jul 24, 2021","L":"07/24/2021","MM-DD":"07-24"},"link":"2021/07/24/秋招保驾护航———js面试篇（上）","tags":["前端","面试"],"categories":["JavaScript"],"updated":"2023-05-17T12:19:16.549Z","content":"<p>秋招正在逼近！快点学起来，本文从js的常见面试题出发，结合基本经典的js书籍《JavaScript高级程序设计》、《你不知道的JavaScript》系列以及一些大神的博客进行总结归纳。大致内容纲要如下：</p>\n<p><a href=\"https://juejin.cn/post/6987776819281805342/\" target=\"_blank\">秋招保驾护航——js面试篇（上）</a></p>\n<ul>\n<li>js中的数据类型</li>\n<li>js的垃圾回收机制</li>\n<li>js中的数组</li>\n<li>js中的函数</li>\n<li>js的面向对象编程</li>\n</ul>\n<p><a href=\"https://juejin.cn/post/6988515657105047559\" target=\"_blank\">秋招保驾护航——js面试篇（下）</a></p>\n<ul>\n<li>js的异步编程</li>\n<li>js的模块化管理</li>\n<li>ES6新特性</li>\n<li>DOM</li>\n<li>事件</li>\n</ul>\n<h2 id=\"js中的数据类型\">js中的数据类型<a title=\"#js中的数据类型\" href=\"#js中的数据类型\"></a></h2>\n<h3 id=\"1.-js中的数据类型有哪些？\">1. js中的数据类型有哪些？<a title=\"#1.-js中的数据类型有哪些？\" href=\"#1.-js中的数据类型有哪些？\"></a></h3>\n<p>在js中数据类型分为基本类型和引用类型：</p>\n<p>（1）基本类型有：</p>\n<ul>\n<li>null</li>\n<li>undefined</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>symbol（ES6引入）</li>\n</ul>\n<p>（2）js的引用类型是从object的子类型，有如下几种：</p>\n<ul>\n<li>Object</li>\n<li>Function</li>\n<li>Array</li>\n<li>RegExp</li>\n<li>Date</li>\n<li>包装类：String、Number、Boolean</li>\n<li>Math</li>\n</ul>\n<h3 id=\"2.-js中的基本类型和引用类型分别是如何存储的？\">2. js中的基本类型和引用类型分别是如何存储的？<a title=\"#2.-js中的基本类型和引用类型分别是如何存储的？\" href=\"#2.-js中的基本类型和引用类型分别是如何存储的？\"></a></h3>\n<p>（1）先记结论：<strong>基本类型的数据类型都存储在栈空间，引用类型的值保存在堆中的。</strong></p>\n<p>（2）再看道题目加强理解：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义四个变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = num1;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;小猪皮皮呆&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改num1和obj1</span></span><br><span class=\"line\">num1 = <span class=\"number\">4</span></span><br><span class=\"line\">obj1.<span class=\"property\">name</span> = <span class=\"string\">&#x27;小猪&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出四个变量</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num1) <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num2) <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">name</span>) <span class=\"comment\">// 小猪</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2.<span class=\"property\">name</span>) <span class=\"comment\">// 小猪</span></span><br></pre></td></tr></table></figure>\n<p>上面代码num1和num2的输出我们能够很好的理解，因为在<strong>js中基本类型的数据类型都存储在栈空间</strong>。如果一个变量向另一个变量赋值<strong>基本类型</strong>的值，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/acf91d455b0347fead040760fd350eb1~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>那么为什么obj1和obj2的name输出的结果都改变了呢？这是因为在<strong>js中引用类型的值保存在堆中的</strong>。如果一个变量向另一个变量赋值<strong>引用类型</strong>的值，同样会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上，但与基础类型不同的是，这个值是一个指针，这个指针指向了<strong>堆</strong>中的同一个对象，因此在修改其中任何一个对象都是在对同一个对象修改。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91e154e72d5140748fde5c0d24afbe72~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"3.-js中传递参数的方式是怎么样的？\">3. js中传递参数的方式是怎么样的？<a title=\"#3.-js中传递参数的方式是怎么样的？\" href=\"#3.-js中传递参数的方式是怎么样的？\"></a></h3>\n<p>（1）先记结论：在js中，<strong>所有函数的参数都是按值传递的</strong>，也就是说把函数外部的值复制给函数内部使用，就像把值从一个变量复制到另一个变量里一样。这就意味着，不管是基本类型值的传递还是引用类型值的传递都如同上述所说的复制过程是一样的。</p>\n<p>（2）再看道题目加强理解：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基本类型的传递</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addTen</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">   num += <span class=\"number\">10</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> num</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"title function_\">addTen</span>(count)</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(count) <span class=\"comment\">//20</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(result) <span class=\"comment\">//30</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用类型的传递</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">    obj.<span class=\"property\">name</span> = <span class=\"string\">&quot;小猪皮皮呆&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;&#125;</span><br><span class=\"line\"><span class=\"title function_\">setName</span>(person)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span>) <span class=\"comment\">// 小猪皮皮呆</span></span><br></pre></td></tr></table></figure>\n<p>在这里有些同学可能会将引用类型传递参数的方式搞错，会发出疑问：访问变量有按值和按引用两种方式，为什么传递参数只有按值传递？</p>\n<p>对于上例的基础类型的值的传递可以很容易的理解，但是引用类型的传递在局部中的修改会在全局中反应出来，会有同学<strong>误以为</strong>引用类型的传递是按参数传递的。但其实真正的过程是这样的：</p>\n<ul>\n<li>创建了一个对象，保存倒了person变量中</li>\n<li>调用setName函数，person变量传递到setName中</li>\n<li>person的值复制给了obj，复制的是一个指针，指向了堆中的一个对象</li>\n<li>修改了obj</li>\n<li>person中也体现出来了</li>\n</ul>\n<p>从上述的过程中，可以看出来，person这个变量是按值传递的。我们再看个例子来说明这个问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName</span>(<span class=\"params\">obj</span>)&#123;</span><br><span class=\"line\">    obj.<span class=\"property\">name</span> = <span class=\"string\">&quot;小猪皮皮呆&quot;</span></span><br><span class=\"line\">    obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>()</span><br><span class=\"line\">    obj.<span class=\"property\">name</span> = <span class=\"string\">&quot;三元大神&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;&#125;</span><br><span class=\"line\"><span class=\"title function_\">setName</span>(person)</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(person.<span class=\"property\">name</span>) <span class=\"comment\">// 小猪皮皮呆</span></span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n<p>如果是按引用传递，显示的值应该是“三元大神”,但js中的引用类型的传递也是按值传递的，所以打印出来的是“小猪皮皮呆”。</p>\n<h3 id=\"3.-如何判断各种数据类型\">3. 如何判断各种数据类型<a title=\"#3.-如何判断各种数据类型\" href=\"#3.-如何判断各种数据类型\"></a></h3>\n<p>（1）为什么要判断？</p>\n<p>在js中变量是松散类型的，所谓松散类型就是可以保存任何类型的数据。</p>\n<p>（2）判断方法：</p>\n<ul>\n<li>typeof检测</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> === <span class=\"string\">&quot;undefined&quot;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span> === <span class=\"string\">&quot;boolean&quot;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">42</span> === <span class=\"string\">&quot;number&quot;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&quot;42&quot;</span> === <span class=\"string\">&quot;string&quot;</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;...&#125; === <span class=\"string\">&quot;object&quot;</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>null检测，因为 typeof null 会输出 object，但是这只是 JS 存在的一个悠久 Bug。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">null</span></span><br><span class=\"line\">(!a &amp;&amp; <span class=\"keyword\">typeof</span> a === <span class=\"string\">&quot;object&quot;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>引用类型的检测</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. function检测</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;...&#125; === <span class=\"string\">&quot;function&quot;</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. Array类型检测</span></span><br><span class=\"line\"><span class=\"comment\">// 2.1 根据原型链的两种方法，但是原型链可能会修改，所以有时候不靠谱</span></span><br><span class=\"line\">arr <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span> === <span class=\"literal\">true</span></span><br><span class=\"line\">arr.<span class=\"property\">proto</span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">Array</span></span><br><span class=\"line\"><span class=\"comment\">// 2.2 靠谱的方法</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">apply</span>(arr) === “[object <span class=\"title class_\">Array</span>]”</span><br><span class=\"line\"><span class=\"comment\">// 2.3 官方提供方法，可靠可行，简单 </span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(arr) === <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4.-讲一讲undefined和null的区别\">4. 讲一讲undefined和null的区别<a title=\"#4.-讲一讲undefined和null的区别\" href=\"#4.-讲一讲undefined和null的区别\"></a></h3>\n<p>（1）null：</p>\n<ul>\n<li>null 指空值，指曾经赋过值，但是当前没有值</li>\n<li>null 是一个特殊关键字，不是标识符，不能<strong>当作变量来使用</strong>和<strong>赋值</strong></li>\n</ul>\n<p>（2）undefined</p>\n<ul>\n<li>未初始化的值默认值是undefined</li>\n<li>undefined 指没有值，指从未赋过值</li>\n<li>undifined 是一个标识符，可以当作变量来使用和赋值</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非严格模式下可以为全局标识符undefined赋值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"literal\">undefined</span> = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">\t<span class=\"literal\">undefined</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在严格和非严格模式下，可以声明一个undefined的局部变量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> <span class=\"literal\">undefined</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"5.-0.1+0.2为什么不等于0.3？\">5. 0.1+0.2为什么不等于0.3？<a title=\"#5.-0.1+0.2为什么不等于0.3？\" href=\"#5.-0.1+0.2为什么不等于0.3？\"></a></h3>\n<p>（1）原因：0.1和0.2在转换成二进制后会无限循环，由于标准位数的限制后面多余的位数会被截掉，此时就已经出现了精度的损失，相加后因浮点数小数位的限制而截断的二进制数字在转换为十进制就会变成0.30000000000000004。</p>\n<p>（2）解决办法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先设置一个误差范围，通常成为“机器精度”，对于js来说，这个值通常是2^-52</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title class_\">Number</span>.<span class=\"property\">EPSILON</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Number</span>.<span class=\"property\">EPSILON</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, -<span class=\"number\">52</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 比较误差值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">nbumersCloseEnoughToEqual</span>(<span class=\"params\">n1, n2</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(n1 - n2) &lt; <span class=\"title class_\">Number</span>.<span class=\"property\">EPSILON</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 比较</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0.2</span> + <span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">0.3</span></span><br><span class=\"line\"><span class=\"title function_\">nbumersCloseEnoughToEqual</span>(a, b) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7.-包装类的一些知识\">7. 包装类的一些知识<a title=\"#7.-包装类的一些知识\" href=\"#7.-包装类的一些知识\"></a></h3>\n<p>字符串是基本类型，不是对象，为什么会有调用方法这种操作？下面代码过程中发生了什么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">S1</span> = <span class=\"string\">&quot;some test&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = s1.<span class=\"title function_\">substring</span>(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建String类型的一个实例</li>\n<li>在实例上调用了指定的方法</li>\n<li>销毁这个实例</li>\n</ul>\n<h3 id=\"8.-js的类型转换\">8. js的类型转换<a title=\"#8.-js的类型转换\" href=\"#8.-js的类型转换\"></a></h3>\n<p><strong>（1）[] == ![]结果是什么？为什么？</strong></p>\n<ul>\n<li>== 中，左右两边都需要转换为数字然后进行比较。</li>\n<li>[]转换为数字为0。</li>\n<li>![] 首先是转换为布尔值，由于[]作为一个引用类型转换为布尔值为true,</li>\n<li>因此![]为false，进而在转换成数字，变为0。</li>\n<li>0 == 0 ， 结果为true</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!<span class=\"literal\">null</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">!!<span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">!!<span class=\"literal\">undefined</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">!!<span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br><span class=\"line\">!!<span class=\"title class_\">NaN</span> <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">!!<span class=\"number\">1</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">!!&#123;&#125; <span class=\"comment\">// true</span></span><br><span class=\"line\">!![] <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p><strong>（2）== 和 ===有什么区别？</strong></p>\n<ul>\n<li>===叫做严格相等，是指：左右两边不仅值要相等，类型也要相等，例如’1’===1的结果是false，因为一边是string，另一边是number。</li>\n<li>==不像===那样严格，对于一般情况，只要值相等，就返回true，但==还涉及一些类型转换，它的转换规则如下：\n<ul>\n<li>两边的类型是否相同，相同的话就比较值的大小，例如1==2，返回false</li>\n<li>判断的是否是null和undefined，是的话就返回true</li>\n<li>判断的类型是否是String和Number，是的话，把String类型转换成Number，再进行比较</li>\n<li>判断其中一方是否是Boolean，是的话就把Boolean转换成Number，再进行比较</li>\n<li>如果其中一方为Object，且另一方为String、Number或者Symbol，会将Object转换成字符串，再进行比较</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125; == <span class=\"literal\">true</span>);<span class=\"comment\">//false </span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125; == <span class=\"string\">&quot;[object Object]&quot;</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">100</span> == <span class=\"string\">&#x27;100&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"literal\">false</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj === <span class=\"literal\">null</span> || obj === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>（3）字符串拼接</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">100</span> + <span class=\"number\">10</span> <span class=\"comment\">// 110</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">100</span> + <span class=\"string\">&#x27;10&#x27;</span> <span class=\"comment\">// &#x27;110&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"literal\">true</span> + <span class=\"string\">&#x27;10&#x27;</span> <span class=\"comment\">// &#x27;true10&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"js的垃圾回收机制\">js的垃圾回收机制<a title=\"#js的垃圾回收机制\" href=\"#js的垃圾回收机制\"></a></h2>\n<blockquote>\n<p>参考另一篇文章<a href=\"https://juejin.cn/post/6962860870791593998\" target=\"_blank\">js的垃圾回收机制</a></p>\n</blockquote>\n<p><strong>（1）调用栈中的垃圾回收机制</strong></p>\n<p>js中栈中的数据回收依靠ESP（记录当前执行状态的指针）的下移来消除栈中保存的的执行上下文。</p>\n<p><strong>（2）堆中的垃圾回收机制</strong></p>\n<p>在v8中，堆分为<strong>新生代</strong>和<strong>老生代</strong>两个区域。</p>\n<ul>\n<li>新生代存放的是生存时间短的对象，内存在1~8M之间，<strong>使用js中的副垃圾回收器</strong>。</li>\n<li>老生代中存放着生成时间久的对象，内存容量较大，<strong>使用js中的主垃圾回收器</strong>。</li>\n</ul>\n<p>工作流程如下：</p>\n<ul>\n<li>标记空间中活动对象和非活动对象。所谓活动对象就是还在使用的对象，非活动对象就是可以进行垃圾回收的对象。</li>\n<li>回收非活动对象所占据的内存。其实就是在所有的标记完成之后，统一清理内存中所有被标记为可回收的对象。</li>\n<li>内存整理。一般来说，频繁回收对象后，内存中就会存在大量不连续空间，我们把这些不连续的内存空间称为内存碎片。当内存中出现了大量的内存碎片之后，如果需要分配较大连续内存的时候，就有可能出现内存不足的情况。所以最后一步需要整理这些内存碎片，但这步其实是可选的，因为有的垃圾回收器不会产生内存碎片，比如副垃圾回收器。</li>\n</ul>\n<p>注意：</p>\n<p>上面已经了解了js的垃圾回收机制，不过由于 JavaScript 是运行在单线程之上的，一旦执行垃圾回收算法，都需要将正在执行的 JavaScript 脚本暂停下来，待垃圾回收完毕后再恢复脚本执行。我们把这种行为叫做<strong>全停顿</strong>。</p>\n<ul>\n<li>新生代的内存较小，回收较快，停顿的影响不大。</li>\n<li>老生代的内存较大，占用线程的时间较长，为了降低老生代造成的卡顿现象，使用了<strong>增量标记算法</strong>。将一个完整的垃圾回收拆分成一个个小的垃圾回收，减小了卡顿的现象。</li>\n</ul>\n<h2 id=\"js中的数组\">js中的数组<a title=\"#js中的数组\" href=\"#js中的数组\"></a></h2>\n<h3 id=\"1.-数组的检测方式有哪些？\">1. 数组的检测方式有哪些？<a title=\"#1.-数组的检测方式有哪些？\" href=\"#1.-数组的检测方式有哪些？\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据原型链的两种方法，但是原型链可能会修改，所以有时候不靠谱</span></span><br><span class=\"line\">arr <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span> === <span class=\"literal\">true</span></span><br><span class=\"line\">arr.<span class=\"property\">__proto__</span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">Array</span></span><br><span class=\"line\"><span class=\"comment\">// 靠谱的方法</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">apply</span>(arr) === “[object <span class=\"title class_\">Array</span>]”</span><br><span class=\"line\"><span class=\"comment\">// 官方提供方法，可靠可行，简单 </span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(arr) === <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p><strong>（1）通过原型的方式进行检测详解</strong></p>\n<p>看看Array的原型上有些啥？</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/805639aae73b42bcb5503f118460b657~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\"><br>\n可以看到Array的原型上定义了很多的方法，我们会在后面了解这些方法的作用和实现方法。</p>\n<p>我们回到正题，我们如何通过原型判断数组。Array的实例的__proto__属性指向Array的原型，这样说可能不太具体，因为涉及到了原型的相关知识。我们直接从下图可以看出arr的__proto__属性和上面看到的Array的原型是一样的内容。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29dbe226f2b8465a8adc9f9f6d90c6c7~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>而<code>Array</code>的原型的<code>constructor</code>属性指向<code>Array</code>构造函数，而<code>Array</code>的原型的<code>constructor</code>指向<code>Array</code>构造函数，所以<code>arr.__proto__.constructor</code>指向<code>Array</code>构造函数，因此可以进行判断。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05af7341776f4a9fb2973bf8fb05225e~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"2.-array的栈和队列方法\">2. Array的栈和队列方法<a title=\"#2.-array的栈和队列方法\" href=\"#2.-array的栈和队列方法\"></a></h3>\n<p>栈和队列的相关API在算法题里经常使用到，相关理论也和数据解构中的栈和队列对应，在此不多赘述。</p>\n<ul>\n<li>push()方法，接受任意数量的参数，把他们逐个添加到数组的末尾，并返回修改后的数组长度</li>\n<li>pop()方法，移除数组末尾最后一项，减少数组的length值，返回移除的项</li>\n<li>shift()方法，移除数组中的第一项，同时将数组的长度减一，返回移除项</li>\n<li>unshift()方法，再数组的前端依次添加参数值，返回新数组的长度</li>\n</ul>\n<h3 id=\"3.-array的转换方法\">3. Array的转换方法<a title=\"#3.-array的转换方法\" href=\"#3.-array的转换方法\"></a></h3>\n<ul>\n<li>toLocaleString()方法，输出数组的每个元素以逗号进行连接。</li>\n<li>toString()方法，同toLocaleString方法。</li>\n<li>value()方法，输出数组本身。</li>\n<li>join()方法，将数组的每个元素用传入进的参数进行连接。如果传空相当于将数组转换成字符串。</li>\n</ul>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4bfb934761b849e7bd97a6f0d456889b~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"4.-array的重排序方法\">4. Array的重排序方法<a title=\"#4.-array的重排序方法\" href=\"#4.-array的重排序方法\"></a></h3>\n<p>说到反转数组和排序，也是两道非常经典的编程题。排序更是如此，常见的几种排序方法，要在后面进行熟练的编程。</p>\n<ul>\n<li>reverse()方法，反转数组的顺序，注意改方法会改变原数组</li>\n<li>sort()方法，按升序排列数组项——最小值位于最前面，较大值位于最后面。sort()函数可以接受一个比较函数作为参数，以便我们决定哪个数在前面\n<ul>\n<li>如果第一个参数位于第二个之前，返回负数</li>\n<li>如果两个参数相等，返回0</li>\n<li>如果第一个参数位于第二个参数后面，返回正数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5.-array的操作方法\">5. Array的操作方法<a title=\"#5.-array的操作方法\" href=\"#5.-array的操作方法\"></a></h3>\n<ul>\n<li>\n<p>concat()方法，用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea299aa27ad0462e90dc5f7e0678ed77~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n</li>\n<li>\n<p>slice()方法，用于提取目标数组的一部分，返回一个新数组，原数组不变。</p>\n<ul>\n<li>它的第一个参数为起始位置（从0开始，会包括在返回的新数组之中）</li>\n<li>第二个参数为终止位置（但该位置的元素本身不包括在内）。如果省略第二个参数，则一直返回到原数组的最后一个成员</li>\n<li>没有参数，实际上等于返回一个原数组的拷贝。</li>\n</ul>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43c3f8707aed4bf09260f4b5add1b58f~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n</li>\n<li>\n<p>splice()方法，用于删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素。注意，该方法会改变原数组。</p>\n<ul>\n<li>第一个参数是删除的起始位置（从0开始）</li>\n<li>第二个参数是被删除的元素个数。</li>\n<li>如果后面还有更多的参数，则表示这些就是要被插入数组的新元素</li>\n</ul>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15d2a00685ed4e87ba094b35913590e3~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n</li>\n</ul>\n<h3 id=\"6.-array的位置方法\">6. Array的位置方法<a title=\"#6.-array的位置方法\" href=\"#6.-array的位置方法\"></a></h3>\n<ul>\n<li>indexOf()方法，返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1</li>\n<li>lastIndexOf()方法，返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1。</li>\n</ul>\n<h3 id=\"7.-array的迭代方法\">7. Array的迭代方法<a title=\"#7.-array的迭代方法\" href=\"#7.-array的迭代方法\"></a></h3>\n<p><strong>（1）map()方法</strong></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f5ad4789cbc4b3abf3432589b258f0b~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>手动实现map：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">map</span> = <span class=\"keyword\">function</span>(<span class=\"params\">callback, thisArg</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> O = <span class=\"title class_\">Object</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = O.<span class=\"property\">length</span> &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(callback.<span class=\"title function_\">call</span>(thisArg, O[i], i, <span class=\"variable language_\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr1 = arr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr1) <span class=\"comment\">// [ 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<p><strong>（2）forEach()方法</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7530df6bf5cc41b3921091187dab06af~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>手动实现forEach：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 和map类似，只是没有了返回值</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">forEach</span> = <span class=\"keyword\">function</span> (<span class=\"params\">callback, thisArg</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> O = <span class=\"title class_\">Object</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = O.<span class=\"property\">length</span> &gt;&gt;&gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">      callback.<span class=\"title function_\">call</span>(thisArg, O[i], i, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>（3）fliter()方法</strong></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a021e197362427ea0abd1fb6a9f9f4d~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">filter</span> = <span class=\"keyword\">function</span> (<span class=\"params\">callback, thisArg</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\">  <span class=\"keyword\">const</span> O = <span class=\"title class_\">Object</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = O.<span class=\"property\">length</span> &gt;&gt;&gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (callback.<span class=\"title function_\">call</span>(thisArg, O[i], i, <span class=\"variable language_\">this</span>)) &#123;</span><br><span class=\"line\">         res.<span class=\"title function_\">push</span>(O[i])</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>（4）some()方法和every()方法</strong></p>\n<ul>\n<li>some方法是只要一个成员的返回值是true，则整个some方法的返回值就是true，否则返回false。</li>\n<li>every方法是所有成员的返回值都是true，整个every方法才返回true，否则返回false。</li>\n</ul>\n<h3 id=\"8.-归并方法\">8. 归并方法<a title=\"#8.-归并方法\" href=\"#8.-归并方法\"></a></h3>\n<p><strong>（1）reduce()方法</strong></p>\n<p>从左向右，依次处理数组的每个成员，最终累计为一个值。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4529100b8271460a9815baddb24ac3e3~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>手写reduce：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">reduce</span> = <span class=\"keyword\">function</span> (<span class=\"params\">callback, initialValue</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> O = <span class=\"title class_\">Object</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = O.<span class=\"property\">length</span> &gt;&gt;&gt; <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> accumulator = initialValue ? initialValue : O[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">      accumulator = callback.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>, accumulator, O[i], i, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> accumulator</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">accumulator, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> accumulator + item;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result) <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p><strong>（2）reduceRight()方法</strong></p>\n<p>从右向左，依次处理数组的每个成员，最终累计为一个值。</p>\n<h3 id=\"9.-数组去重\">9. 数组去重<a title=\"#9.-数组去重\" href=\"#9.-数组去重\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组去重</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let arr = [1, 2, 2, 1, 3, 4, 5, 6, 4, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">arrDelRepeat1</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; arr.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] === arr[j]) &#123;</span><br><span class=\"line\">        arr.<span class=\"title function_\">splice</span>(j, <span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">arrDelRepeat2</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(arr)]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">arrDelRepeat3</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myArr = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (myArr.<span class=\"title function_\">indexOf</span>(arr[i]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      myArr.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> myArr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"10.-数组扁平化\">10. 数组扁平化<a title=\"#10.-数组扁平化\" href=\"#10.-数组扁平化\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组扁平化</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]], <span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6语法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flat1</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.<span class=\"title function_\">flat</span>(<span class=\"title class_\">Infinity</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JSON + 正则</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flat2</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(arr);</span><br><span class=\"line\">  str = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(\\[|\\])/g</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  str = <span class=\"string\">&#x27;[&#x27;</span> + str + <span class=\"string\">&#x27;]&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 递归</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flat3</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fn = <span class=\"keyword\">function</span> (<span class=\"params\">ary</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; ary.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> item = ary[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(ary[i])) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(item)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>(arr)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reduce迭代</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flat4</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre.<span class=\"title function_\">concat</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(cur) ? <span class=\"title function_\">flat4</span>(cur) : cur);</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">flat4</span>(arr));</span><br></pre></td></tr></table></figure>\n<h2 id=\"js中的函数\">js中的函数<a title=\"#js中的函数\" href=\"#js中的函数\"></a></h2>\n<h3 id=\"1.-argument是数组吗？如何转换成数组？\">1. argument是数组吗？如何转换成数组？<a title=\"#1.-argument是数组吗？如何转换成数组？\" href=\"#1.-argument是数组吗？如何转换成数组？\"></a></h3>\n<p>在js中，函数的参数arguments，DOM查询返回的元素列表，他们并非严格意义上的数组，只是用起来像数组，但本质是是对象。有时候需要将类数组转换成真正的数组，有如下几种方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设下面都发生在一个函数当中，arguments为函数的参数列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// silce方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// concat</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">concat</span>.<span class=\"title function_\">apply</span>([], <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6语法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [...<span class=\"variable language_\">arguments</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内置函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2.-new一个函数发生了什么？\">2. new一个函数发生了什么？<a title=\"#2.-new一个函数发生了什么？\" href=\"#2.-new一个函数发生了什么？\"></a></h3>\n<ul>\n<li>创造一个全新的对象</li>\n<li>这个对象会被执行 [[Prototype]] 连接，将这个新对象的 [[Prototype]] 链接到这个构造函数.prototype 所指向的对象</li>\n<li>让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</li>\n<li>判断函数的返回值类型，如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象</li>\n</ul>\n<p>手动实现一个new：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myNew</span>(<span class=\"params\">fn, args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个新对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObject = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">  <span class=\"comment\">// 执行构造函数代码，为对象添加属性</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = fn.<span class=\"title function_\">apply</span>(newObject, ...args);</span><br><span class=\"line\">  <span class=\"comment\">// 判断返回的是函数对象还是新创建的newObject</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = result &amp;&amp; (<span class=\"keyword\">typeof</span> result === <span class=\"string\">&quot;object&quot;</span> || <span class=\"keyword\">typeof</span> result === <span class=\"string\">&quot;function&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> flag ? result : newObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.-说一说作用域和作用域链\">3. 说一说作用域和作用域链<a title=\"#3.-说一说作用域和作用域链\" href=\"#3.-说一说作用域和作用域链\"></a></h3>\n<p><strong>（1）什么是全局上下文？</strong></p>\n<p>执行上下文的创建分为三种情况：</p>\n<ul>\n<li>执行全局代码，编译全局代码，创建全局上下文，且只有一个</li>\n<li>调用函数，函数体内代码会被编译，创建函数上下文，函数执行完毕后该函数上下文会被销毁</li>\n<li>使用eval函数，很少遇到，在此不讨论。</li>\n</ul>\n<p><strong>(2) 变量提升是怎么回事？</strong></p>\n<p>而在js中，上下文的管理则由<strong>调用栈</strong>负责，js执行过程中三种内存空间之一的<strong>栈空间</strong>。我们来看看它是如何负责的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">showName</span>() <span class=\"comment\">// 小猪 </span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myName) <span class=\"comment\">// undefiend </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">&quot;小猪皮皮呆&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showName</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;小猪&quot;</span>) </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>js编译全局代码，创建全局上下文，将其压入栈底</li>\n<li>全局代码执行console.log，打印出undefined</li>\n<li>为myName变量赋值“小猪皮皮呆”</li>\n<li>调用showName函数，js对其进行编译，创建showName函数的执行上下文</li>\n<li>showName函数执行完毕，showName函数的执行上下文弹出栈并销毁</li>\n<li>全局代码执行完毕，弹出栈，代码运行结束</li>\n</ol>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/418cc94b087a4a5bbacbfa74257cef45~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>看到这里我们便可以回答之前的问题了。所谓的变量提升就是js代码执行的过程中，会先将代码进行编译，编译的过程中变量的声明和函数的声明会被放入调用栈中形成上下文调用栈，剩余下的会生成执行代码。这就造成了变量提升的现象。</p>\n<p><strong>（3）下面这道题的输出是什么？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;小猪皮皮呆&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;小猪&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">showName</span>()</span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// undefiend</span></span><br></pre></td></tr></table></figure>\n<p>这道题目和作用域和变量提升有关，在上面我们已经了解了变量提升，我们由这题引出作用域的相关问题。</p>\n<p>js中存在三种作用域，ES6之前只两种作用域：</p>\n<ul>\n<li>全局作用域</li>\n<li>函数作用域</li>\n<li>块级作用域（ES6新增）</li>\n</ul>\n<p>刚开始时，会生成全局上下文，也就是全局作用域，内部有变量<code>name = &quot;小猪皮皮呆&quot;</code>。后面执行到函数<code>showName</code>时会形成showName函数的执行上下文，也就是showName的作用域，在showName的作用域中因为使用的是var声明的name，没有形成块级作用域，所以会出现变量提升的情况，所以第一个console没有打印出“小猪皮皮呆”，第二个打印之前因为if语句里面的语句没有执行，所以打印出的依然是undefined。</p>\n<p><strong>（4）下面这道题的输出是什么？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;小猪皮皮呆&quot;</span></span><br><span class=\"line\">    <span class=\"title function_\">bar</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;小猪&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>() <span class=\"comment\">// 小猪</span></span><br></pre></td></tr></table></figure>\n<p>这段代码很容易让人觉得会打印结果会是“小猪皮皮呆”，这和我们接下来要提到的另一个概念<strong>作用域链</strong>有关</p>\n<p>相信前面的执行上下文部分同学们已经理解了，接下来我们会结合执行上下文来看<strong>作用域链</strong>：</p>\n<ul>\n<li>每个执行上下文的变量环境中，都包含了一个外部引用，用来指向外部的执行上下文，我们把这个外部引用称为 outer。</li>\n<li>当一段代码使用了一个变量的时候，js引擎会在当前执行上下文查找该变量，如果没有找到，会继续在outer执行的执行上下文中去寻找。这样一级一级的查找就形成了<strong>作用域链</strong>。</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a9b958fa681432587371bcbb4424141~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li><strong>作用域链的生成由代码决定，和调用无关</strong>。所以一开始代码bar编译好了后outer就指向全局上下文，因此打印的不是foo()内部的“小猪皮皮呆”</li>\n</ul>\n<p><strong>（5）说说块级作用域形成的原理</strong></p>\n<p>在各类执行上下文中会分为环境变量和词法环境，环境变量存放一些var声明的变量，而词法环境存放let等声明的块级作用域的变量，相当于在词法环境内部形成了一个新的调用栈，在查询变量时会先查询词法环境，再去查询变量环境。</p>\n<p>我们结合执行上下文看看这个问题的详细流程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">2</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> b = <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> c = <span class=\"number\">4</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> d = <span class=\"number\">5</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>第一步是编译并创建执行上下文</p>\n<ul>\n<li>函数内部通过 var 声明的变量，在编译阶段全都被存放到变量环境里面了。</li>\n<li>通过 let 声明的变量，在编译阶段会被存放到词法环境（Lexical Environment）中。</li>\n<li>在函数的作用域块内部，通过 let 声明的变量并没有被存放到词法环境中。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/09dc2e08b2424dc8af0dcfab296fd4b3~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>\n<p>执行到代码块</p>\n<ul>\n<li>代码块内部的let声明存放在了一个新的区域中</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aaf0039a506a43f0abb0e9835b385663~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>执行console.log(a)</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc145d39ee204651a16ea911de6e47c1~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>当作用域块执行结束之后，其内部定义的变量就会从词法环境的栈顶弹出</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/408ce43951d5434e99a3d417eadbe49f~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>上述形成的新的作用域链便是js对变量提升和块级作用域同时支持的实现。</p>\n<p><strong>（6）如何解决下面的循环输出问题？</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i ++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原因：setTimeout是宏任务，等同步任务执行完毕后i为6，所以会输出五个6</li>\n<li>解决办法：使用let，形成块级作用域</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i ++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4.-说一说闭包\">4. 说一说闭包<a title=\"#4.-说一说闭包\" href=\"#4.-说一说闭包\"></a></h3>\n<p><strong>（1）什么是闭包？</strong></p>\n<p>ES5中存在两个作用域：全局作用域、函数作用域，函数作用域会在函数运行结束后自动销毁 作用域链：查找一个变量时会从自身的作用域开始沿着作用域链一直向上查找 闭包：利用了作用域，可以将函数内部的作用域的变量访问到</p>\n<p><strong>（2）闭包如何产生</strong></p>\n<ul>\n<li>返回函数 （常见）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">out</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">b</span> () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"title function_\">out</span>()</span><br><span class=\"line\"><span class=\"title function_\">b</span>() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数当作参数传递 ：当作参数的函数可以访问到函数主体的内部作用域</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">baz</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">bar</span>(baz) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在定时器、事件监听、Ajax请求、跨窗口通信、Web Workers或者任何异步中，只要使用了回调函数，其实就是上面那种情况，将函数当作参数，也就是在使用闭包。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定时器</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timeHandler</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;111&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 事件监听</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#app&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;DOM Listener&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>立即执行函数：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> <span class=\"title function_\">IIFE</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 输出2</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>IIFE(立即执行函数表达式)创建闭包, 保存了全局作用域window和当前函数的作用域，因此可以全局的变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i ++)&#123;</span><br><span class=\"line\">  (<span class=\"keyword\">function</span>(<span class=\"params\">j</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j)</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>（3）闭包的应用场景</strong></p>\n<ul>\n<li>柯里化：</li>\n</ul>\n<p>函数柯里化、前端经典面试题解密-add(1)(2)(3)(4) == 10到底是个啥？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数柯里化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数固定</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = []</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">_c</span>(<span class=\"params\">...newArgs</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.<span class=\"property\">length</span> &lt; fn.<span class=\"property\">length</span> - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      args = [...args, ...newArgs];</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _c;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      args = [...args, ...newArgs];</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, ...args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">x</span> (a, b, c, d, e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c + d + e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"title function_\">add</span>(x)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">func</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)(<span class=\"number\">5</span>)) <span class=\"comment\">// 15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数不固定</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = []</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">_c</span>(<span class=\"params\">...newArgs</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newArgs.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      args = [...args, ...newArgs]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _c</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, item</span>) =&gt;</span> sum + item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"title function_\">add</span>()</span><br><span class=\"line\"><span class=\"title function_\">func</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)(<span class=\"number\">4</span>, <span class=\"number\">5</span>)() <span class=\"comment\">// 15</span></span><br></pre></td></tr></table></figure>\n<p><strong>（4）闭包的缺点</strong></p>\n<p>全局使用闭包会造成内存泄漏，所以尽量少用</p>\n<p><strong>（5）this的指向问题</strong></p>\n<p>this：谁调用，指向谁</p>\n<ul>\n<li>默认绑定：在全局执行上下文中，this的指向全局对象。(在浏览器中，this引用 Window 对象)。</li>\n<li>隐式绑定：在函数执行上下文中，this 的值取决于该函数是如何被调用的。如果它被一个引用对象调用，那么this会被设置成那个对象，否则this的值被设置为全局对象或者undefined（在严格模式下）</li>\n<li>显示绑定：apply、call、bind</li>\n<li>箭头函数：只取决于函数的调用方式，在哪里被调用，调用位置。由外层的（函数或全局）作用域来决定。</li>\n</ul>\n<p>ps：虽然这里bar是obj.foo的引用，但此时他引用的是foo本身，调用的环境是全局</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">a</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = obj.<span class=\"property\">foo</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"title function_\">bar</span>() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>与上面一题原理类似，总结起来就是隐式绑定取决于函数是如何调用的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">a</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doFoo</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">doFoo</span>(obj.<span class=\"property\">foo</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doFoo</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">a</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">doFoo</span>(obj.<span class=\"property\">foo</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>再来看看箭头函数，<strong>由外层的（函数或全局）作用域来决定</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">a</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">foo</span>() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p><strong>箭头函数的this由外层的（函数或全局）作用域来决定!</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">a</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doFoo</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">doFoo</span>(obj.<span class=\"property\">foo</span>) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p><strong>（6）bind、call、apply</strong></p>\n<p>call、apply、bind用途：都是函数的方法、改变this的指向</p>\n<ul>\n<li>call和apply的区别：call 方法接受的是若干个参数列表，而 apply 接收的是一个包含多个参数的数组。</li>\n<li>bind与apply和call的区别在bind不会立即执行函数而是返回函数</li>\n</ul>\n<p><strong>手动实现call：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> fn = <span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\">  context[fn] = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = [...<span class=\"variable language_\">arguments</span>]</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args)</span><br><span class=\"line\">  args.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = context[fn](...args);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context[fn];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Obj</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getAge</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getAge.<span class=\"title function_\">myCall</span>(<span class=\"title class_\">Obj</span>) <span class=\"comment\">// 18</span></span><br></pre></td></tr></table></figure>\n<p><strong>手动实现apply：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">apply</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context, args</span>) &#123;</span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (args) &#123;</span><br><span class=\"line\">    result = context.<span class=\"title function_\">fn</span>(...args)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    result = context.<span class=\"title function_\">fn</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Obj</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getAge</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getAge.<span class=\"title function_\">apply</span>(<span class=\"title class_\">Obj</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>手动实现bind：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bind</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> func = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> funArgs = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 根据func的不同使用方法，绑定的this应该不同</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果this是self的实例，则说明对func使用了new进行实例化，此时调用的环境就是this</span></span><br><span class=\"line\">    <span class=\"comment\">// 否则只是正常调用，绑定context即可</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> self ? <span class=\"variable language_\">this</span> : context, ...args, ...funArgs)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  func.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"variable language_\">this</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> func</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>（6）箭头函数</strong></p>\n<p>箭头函数使用被称为 “胖箭头” 的操作 =&gt; 定义，箭头函数不应用普通函数 this 绑定的四种规则，而是根据外层（函数或全局）的作用域来决定 this，且箭头函数的绑定无法被修改（new 也不行）。</p>\n<ul>\n<li>箭头函数常用于回调函数中，包括事件处理器或定时器</li>\n<li>箭头函数的this对象就是定义时所在的对象，而不是使用时所在的对象</li>\n<li>箭头函数没有自己的this，当然就不能用call、apply、bind来改变this指向</li>\n<li>没有原型、没有 this、没有 super，没有 arguments，没有 new.target</li>\n<li>不能通过 new 关键字调用。new一个函数时，会将<strong>返回的对象的原型</strong>指向该<strong>函数的原型</strong>，而箭头函数没有原型，所以会报错。</li>\n</ul>\n<h3 id=\"5.-说出下面段代码的输出\">5. 说出下面段代码的输出<a title=\"#5.-说出下面段代码的输出\" href=\"#5.-说出下面段代码的输出\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  getName = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"title function_\">alert</span>(<span class=\"number\">1</span>); &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"title function_\">alert</span>(<span class=\"number\">2</span>); &#125;;</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"title function_\">alert</span>(<span class=\"number\">3</span>); &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"title function_\">alert</span>(<span class=\"number\">4</span>); &#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123; <span class=\"title function_\">alert</span>(<span class=\"number\">5</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请写出以下输出结果：</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">getName</span>(); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"title function_\">getName</span>(); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>().<span class=\"title function_\">getName</span>(); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"title function_\">getName</span>(); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>.<span class=\"title function_\">getName</span>(); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>().<span class=\"title function_\">getName</span>(); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>第一次做可能比较蒙，让我们来分析一下。</p>\n<p><strong>（1）首先第一个<code>Foo.getName()</code>输出的是2</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  getName = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"title function_\">alert</span>(<span class=\"number\">1</span>); &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"title function_\">alert</span>(<span class=\"number\">2</span>); &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">getName</span>(); <span class=\"comment\">// 所以Foo.getName()调用的结果输出的是2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在函数内部添加的属性，在执行new的过程中，会添加到使用该函数属性作为构造函数创建的对象身上</li>\n<li>在构造函数外部添加的属性，只作为该函数的属性，即对象属性，不会添加到对象身上</li>\n</ul>\n<p><strong>（2）第二个<code>getName()</code>输出的是4</strong></p>\n<p>这个和我们上面提到的变量提升有关</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"title function_\">alert</span>(<span class=\"number\">4</span>); &#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123; <span class=\"title function_\">alert</span>(<span class=\"number\">5</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123; <span class=\"title function_\">alert</span>(<span class=\"number\">5</span>); &#125;</span><br><span class=\"line\">getName = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"title function_\">alert</span>(<span class=\"number\">4</span>); &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 所以最后输出的是4</span></span><br><span class=\"line\"><span class=\"title function_\">getName</span>();</span><br></pre></td></tr></table></figure>\n<p><strong>（3）第三个<code>Foo().getName()</code>和第四个<code>getName()</code>原理一样</strong></p>\n<ul>\n<li>js的执行上下文分为两种：全局和函数的，函数执行完毕后，该函数的执行上下文会销毁</li>\n<li><code>Foo()</code>函数执行的过程中内部的<code>getName</code>因为没有声明，会变量提升到全局，再赋值<code>function () &#123; alert(4); &#125;</code></li>\n<li><code>Foo()</code>函数执行完毕后返回了this，该this根据this的指向规则是指向全局的，此时执行<code>this.getName()</code>相当于在全局调用了<code>getName()</code>，而在上一个步骤的我们知道此时的全局中<code>getName()</code>输出的是4</li>\n<li>执行第四条语句，执行的函数全局的<code>getName()</code>,输出的结果依然是4。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Foo</span>().<span class=\"title function_\">getName</span>();</span><br></pre></td></tr></table></figure>\n<p><strong>（4)第五个<code>new Foo.getName()</code></strong><br>\n在上面我们知道Foo.getName是一个函数，所以这里其实就是new一个函数，因为会执行函数内部的语句，所以输出2.如果该函数内部有一些this语句，那么这个会被作为一个新的对象的属性被返回</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/caae9278bfc24c5083c989c6c402b80c~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>（5）最后一个和原型有关，不在赘述</strong></p>\n<h2 id=\"js的面向对象编程\">js的面向对象编程<a title=\"#js的面向对象编程\" href=\"#js的面向对象编程\"></a></h2>\n<h3 id=\"1.-什么是原型？什么是原型链？\">1. 什么是原型？什么是原型链？<a title=\"#1.-什么是原型？什么是原型链？\" href=\"#1.-什么是原型？什么是原型链？\"></a></h3>\n<ul>\n<li>\n<p>原型对象和构造函数</p>\n<ul>\n<li>\n<p>js中每定义一个函数，会有一个自带的prototype指向函数的原型对象</p>\n<ul>\n<li>Object.isPrototypeOf()可以判读某个对象是否是传入的参数的原型prototype（ES5之前只能进行这一的判断）</li>\n<li>Object.getprototype()返回原型prototpe（ES5之前无法获取）</li>\n</ul>\n</li>\n<li>\n<p>函数经过new后，成为了构造函数会返回一个全新的实例对象，具有一个__proto__属性，指向构造函数的原型函数</p>\n<ul>\n<li>Object.hasOwnProperty()可以检测一个属性是存在于实例中还是原型中</li>\n<li>in操作符只要在对象的实例或者原型中查询到了对应的属性就会返回true</li>\n</ul>\n</li>\n<li>\n<p>而原型对象中都会有constructor属性，这个属性指向原函数。</p>\n</li>\n</ul>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3bfdda7dc0a4ed4ad01aeb1371739a6~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n</li>\n<li>\n<p>说说原型链</p>\n<ul>\n<li>JavaScript实例对象通过__proto__ 指向父类对象，直到指向Object对象为止，Object对象的__proto__指向null，这样就形成了一个原型指向的链条, 即原型链。</li>\n<li>instanceof 确定原型和实例的关系  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// person是Object、Child、Parent中任意一个类型的实例</span></span><br><span class=\"line\">person <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">person <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Child</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">person <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Parent</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">[] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>isPrototypeOf 确定原型和实例的关系  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// person是Object、Child、Parent中任意一个类型的实例</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">isPrototypeOf</span>(person) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">isPrototypeOf</span>(person) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">isPrototypeOf</span>(person) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d67c27648a744586a6e9de82d083d570~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n</li>\n</ul>\n<h3 id=\"2-构造函数经历的阶段？\">2 构造函数经历的阶段？<a title=\"#2-构造函数经历的阶段？\" href=\"#2-构造函数经历的阶段？\"></a></h3>\n<ul>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象，this也自然而然的指向了这个新对象\n<ul>\n<li>构造函数使用了new，将this指向了新创建的对象。</li>\n<li>普通的函数调用，this会指向Global，即浏览器的window对象。</li>\n</ul>\n</li>\n<li>执行构造函数中的代码，给新对象添加属性</li>\n<li>返回新对象</li>\n</ul>\n<p>解释下面的输出：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b046092a7b8a4c66a69b965e7bd9ef3b~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>先定义了一个<code>Foo</code>函数</li>\n<li>此时全局没有<code>name</code>，所以打印为&quot;&quot;</li>\n<li>执行了<code>new Foo()</code>，因为new一个函数会返回一个对象，所以对全局没有影响，<code>name</code>依旧是&quot;&quot;</li>\n<li>全局执行<code>Foo()</code>，this指向全局，所以全局的<code>this.name = &quot;wk&quot;</code></li>\n<li>打印<code>name</code>为<code>wk</code></li>\n</ul>\n<h3 id=\"3-js如何创建对象？\">3 js如何创建对象？<a title=\"#3-js如何创建对象？\" href=\"#3-js如何创建对象？\"></a></h3>\n<ul>\n<li>\n<p>Object构造函数或对象字面量都可以用来创建单个对象</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">   <span class=\"attr\">name</span>:<span class=\"string\">&quot;小猪皮皮呆&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">age</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">   <span class=\"attr\">job</span>:<span class=\"string\">&quot;students&quot;</span>,</span><br><span class=\"line\">   <span class=\"attr\">sayName</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>缺点</strong>：复用性太差。如果要创建多个对象会产生大量重复的代码，比如有100个人的信息要录入，就需要重复<br>\n上列代码100次，并赋不同的信息值。</p>\n</li>\n<li>\n<p>工厂模式：考虑在ECMAScript中无法创建类，开发人员发明了一种函数，用函数来封装以特定接口创建对象的细节。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createPerson</span> (name,age,job) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">   o.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">   o.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">   o.<span class=\"property\">job</span> = job;</span><br><span class=\"line\">   o.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"title function_\">createPerson</span>(<span class=\"string\">&quot;wk&quot;</span>,<span class=\"number\">20</span>,<span class=\"string\">&quot;student&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>缺点：</strong> 工厂模式解决了创建多个相似对象的问题，却没有解决对象识别的问题（即判断一个对象的类型）</p>\n</li>\n<li>\n<p>构造函数模式：我们知道构造函数可以创建指定类型的对象。除了Object、Array这样的原生构造函数，我们还可以自己创建定义构造函数。如下：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age,job</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">job</span> = job;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;小猪皮皮呆&quot;</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;student&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;神三元&quot;</span>, <span class=\"number\">18</span>, <span class=\"string\">&quot;student&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>缺点：</strong> 每个方法都要在每个实例上重新创建一边，导致了不同作用域链和标识符解析，不同实例上的同名函<br>\n数时不相等的。因为每通过构造函数new一个实例，构造函数中的代码就要执行一遍。对于字段属性来说，每个实例<br>\n的字段本来就应该是独立的，当然没有问题；但是对于方法属性，我们是希望所有的实例是共享同一个的。</p>\n</li>\n<li>\n<p>原型模式：所有的函数都有prototype（原型）属性,这个属性是一个指针，指向一个对象。这样就解决了构造函数模型带来的问题。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;小猪皮皮呆&quot;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">age</span> = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">job</span> = <span class=\"string\">&quot;student&quot;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">person1.<span class=\"title function_\">sayName</span>();<span class=\"comment\">//&quot;小猪皮皮呆&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">person2.<span class=\"title function_\">sayName</span>();<span class=\"comment\">//&quot;小猪皮皮呆&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(person1.<span class=\"property\">sayName</span> == person2.<span class=\"property\">sayName</span>);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p><strong>缺点：</strong> 原型模式最大的好处就是他的共享，而这也恰恰是他的缺点，有时一些数据我们并不想和其他的实例共享，比如每个人的名字都不一样，而在原型模式中所有实例的名字都会变成一样。</p>\n</li>\n<li>\n<p>组合模式：组合使用构造函数模式和原型模式，公共属性写入原型，传入属性写入构造函数。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age,job</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">job</span> = job;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">   <span class=\"attr\">constructor</span>:<span class=\"title class_\">Person</span>,</span><br><span class=\"line\">   sayName = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"4.-对象的拷贝\">4. 对象的拷贝<a title=\"#4.-对象的拷贝\" href=\"#4.-对象的拷贝\"></a></h3>\n<p><strong>（1）浅拷贝</strong></p>\n<p>浅拷贝对于非引用类型的值进行复制，对于引用类型的值复制地址（指向对象的指针）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 浅拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">shallowCopy</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newObj = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(obj) ? [] : &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Obj.hasOwnProperty判断属性是实例上的还是原型上的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.<span class=\"title function_\">hasOwnProperty</span>(i)) &#123;</span><br><span class=\"line\">      newObj[i] = obj[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>（2）深拷贝</strong></p>\n<p>对于引用类型的值，不是简单的复制对象的地址，而是在堆中新建一个全新的对象并复制其中的每一项</p>\n<ul>\n<li>\n<p>使用JSON的方法</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">jsonCopy</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>缺点：</strong> 此方法无法复制函数和正则</p>\n</li>\n<li>\n<p>递归实现</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">jsonCopy</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepCopy</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target !== <span class=\"string\">&#x27;object&#x27;</span> || obj == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cloneObj = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(target) ? [] : &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.<span class=\"title function_\">hasOwnProperty</span>(i)) &#123;</span><br><span class=\"line\">      cloneObj[i] = <span class=\"title function_\">deepCopy</span>(target[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cloneObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种实现简单的概括了深拷贝的原理，如果想进一步完善，移步我参考的博客：<a href=\"https://link.juejin.cn/?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000020255831\" title=\"https://segmentfault.com/a/1190000020255831\" target=\"_blank\">如何写出一个惊艳面试官的深拷贝?</a></p>\n</li>\n</ul>\n<h3 id=\"5.-js如何实现继承？\">5. js如何实现继承？<a title=\"#5.-js如何实现继承？\" href=\"#5.-js如何实现继承？\"></a></h3>\n<ul>\n<li>\n<p>借助原型链</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;wk&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child</span>(<span class=\"params\">age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent</span>()</span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getAge</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> child = <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span>(<span class=\"number\">18</span>)</span><br><span class=\"line\">child.<span class=\"title function_\">getName</span>() <span class=\"comment\">// wk</span></span><br><span class=\"line\">child.<span class=\"title function_\">getAge</span>() <span class=\"comment\">// 18</span></span><br></pre></td></tr></table></figure>\n<p><strong>优点：</strong></p>\n<ul>\n<li>父类方法可以复用</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>\n<p>父类的所有<code>引用属性</code>（info）会被所有子类共享，更改一个子类的引用属性，其他子类也会受影响</p>\n</li>\n<li>\n<p>子类型实例不能给父类型构造函数传参</p>\n</li>\n</ul>\n</li>\n<li>\n<p>借用构造函数：借助call()方法在Child1环境下调用了Parent1,Child1的每个实例都会有一个Parent的name属性副本。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child</span>(<span class=\"params\">name, age, job</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name, age)</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">job</span> = job;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> child = <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span>(<span class=\"string\">&#x27;wk&#x27;</span>, <span class=\"number\">18</span>, <span class=\"string\">&#x27;coder&#x27;</span>);</span><br><span class=\"line\">child.<span class=\"title function_\">getName</span>() <span class=\"comment\">// TypeError: child.getName is not a function</span></span><br></pre></td></tr></table></figure>\n<p><strong>优点：</strong></p>\n<ul>\n<li>可以在子类构造函数中向父类传参数</li>\n<li>父类的引用属性不会被共享</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>子类不能访问父类原型上定义的方法</li>\n</ul>\n</li>\n<li>\n<p>组合：融合了原型链和借用构造函数的优点，成为了js中最常用的继承模式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child</span>(<span class=\"params\">name, age, job</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name, age)</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">job</span> = job;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> child = <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span>(<span class=\"string\">&#x27;wk&#x27;</span>, <span class=\"number\">18</span>, <span class=\"string\">&#x27;coder&#x27;</span>);</span><br><span class=\"line\">child.<span class=\"title function_\">getName</span>(); <span class=\"comment\">// wk</span></span><br></pre></td></tr></table></figure>\n<p><strong>优点：</strong></p>\n<ul>\n<li>父类的方法可以复用</li>\n<li>可以在Child构造函数中向Parent构造函数中传参</li>\n<li>父类构造函数中的引用属性不会被共享</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>多执行了一次new Parent()内部的执行函数，造成了性能上的损失</li>\n</ul>\n</li>\n<li>\n<p>原型式继承：对参数对象的一种浅复制</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">objectCopy</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">Fun</span>(<span class=\"params\"></span>) &#123; &#125;;</span><br><span class=\"line\">  <span class=\"title class_\">Fun</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = obj;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Fun</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;wk&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">friends</span>: [<span class=\"string\">&quot;jack&quot;</span>, <span class=\"string\">&quot;tom&quot;</span>, <span class=\"string\">&quot;rose&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">sayName</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person1 = <span class=\"title function_\">objectCopy</span>(person);</span><br><span class=\"line\">person1.<span class=\"property\">name</span> = <span class=\"string\">&quot;wxb&quot;</span>;</span><br><span class=\"line\">person1.<span class=\"property\">friends</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;lily&quot;</span>);</span><br><span class=\"line\">person1.<span class=\"title function_\">sayName</span>(); <span class=\"comment\">// wxb</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person2 = <span class=\"title function_\">objectCopy</span>(person);</span><br><span class=\"line\">person2.<span class=\"property\">name</span> = <span class=\"string\">&quot;gsr&quot;</span>;</span><br><span class=\"line\">person2.<span class=\"property\">friends</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;kobe&quot;</span>);</span><br><span class=\"line\">person2.<span class=\"title function_\">sayName</span>(); <span class=\"comment\">// &quot;gsr&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span>); <span class=\"comment\">//wk</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">friends</span>); <span class=\"comment\">// [&quot;jack&quot;, &quot;tom&quot;, &quot;rose&quot;, &quot;lily&quot;, &quot;kobe&quot;]</span></span><br></pre></td></tr></table></figure>\n<p><strong>优点：</strong></p>\n<ul>\n<li>父类方法可复用</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>父类的引用会被所有子类所共享</li>\n<li>子类实例不能向父类传参</li>\n</ul>\n</li>\n<li>\n<p>寄生式继承：使用原型式继承对一个目标对象进行浅复制，增强这个浅复制的能力</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">objectCopy</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">Fun</span>(<span class=\"params\"></span>) &#123; &#125;;</span><br><span class=\"line\">  <span class=\"title class_\">Fun</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = obj;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Fun</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createAnother</span>(<span class=\"params\">original</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> clone = <span class=\"title function_\">objectCopy</span>(original);</span><br><span class=\"line\">  clone.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clone;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;wk&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">friend</span>: [<span class=\"string\">&quot;rose&quot;</span>, <span class=\"string\">&quot;tom&quot;</span>, <span class=\"string\">&quot;jack&quot;</span>],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person1 = <span class=\"title function_\">createAnother</span>(person);</span><br><span class=\"line\">person1.<span class=\"property\">friends</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;lily&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person1.<span class=\"property\">friends</span>);</span><br><span class=\"line\">person1.<span class=\"title function_\">getName</span>(); <span class=\"comment\">// wk</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person2 = <span class=\"title function_\">createAnother</span>(person);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person2.<span class=\"property\">friends</span>); <span class=\"comment\">// [&quot;rose&quot;, &quot;tom&quot;, &quot;jack&quot;, &quot;lily&quot;]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>寄生组合继承（组合的优化）：寄生式组合继承可以算是引用类型继承的最佳模式</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">friends</span> = [<span class=\"string\">&quot;rose&quot;</span>, <span class=\"string\">&quot;lily&quot;</span>, <span class=\"string\">&quot;tom&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// 效果类似寄生继承里的objectCopy</span></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Child</span>; <span class=\"comment\">// 改变了prototype就会改变constructor，再将其指回Child</span></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getAge</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> child1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span>(<span class=\"string\">&quot;wk&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">child1.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">// 18</span></span><br><span class=\"line\">child1.<span class=\"title function_\">getName</span>(); <span class=\"comment\">// wk</span></span><br><span class=\"line\">child1.<span class=\"property\">friends</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;jack&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child1.<span class=\"property\">friends</span>); <span class=\"comment\">// [&quot;rose&quot;, &quot;lily&quot;, &quot;tom&quot;, &quot;jack&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> child2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span>(<span class=\"string\">&quot;cy&quot;</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">child2.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">// 21</span></span><br><span class=\"line\">child2.<span class=\"title function_\">getName</span>(); <span class=\"comment\">// cy</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child2.<span class=\"property\">friends</span>); <span class=\"comment\">// [&quot;rose&quot;, &quot;lily&quot;, &quot;tom&quot;]</span></span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>只调用一次父类构造函数</li>\n<li>Child可以向Parent传参</li>\n<li>父类方法可以复用</li>\n<li>父类的引用属性不会被共享</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6.-class\">6. class<a title=\"#6.-class\" href=\"#6.-class\"></a></h3>\n<p><strong>（1）基础用法</strong></p>\n<ul>\n<li>constructor</li>\n<li>属性</li>\n<li>方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, number</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">number</span> = number</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">sayName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">sayNumber</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">number</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&quot;wk&quot;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\">a.<span class=\"title function_\">sayName</span>()</span><br><span class=\"line\">a.<span class=\"title function_\">sayNumber</span>()</span><br></pre></td></tr></table></figure>\n<p><strong>（2）继承</strong></p>\n<ul>\n<li>extends</li>\n<li>super</li>\n<li>扩展或重写方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">People</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">eat</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27; eat food&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类1</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">People</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, id</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(name)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = id</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">sayId</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类2</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Coder</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">People</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, company</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(name)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">company</span> = company</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">sayCompany</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">company</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title class_\">Teacher</span>(<span class=\"string\">&quot;wk&quot;</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\">b.<span class=\"title function_\">eat</span>()</span><br><span class=\"line\">b.<span class=\"title function_\">sayId</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> <span class=\"title class_\">Coder</span>(<span class=\"string\">&quot;cy&quot;</span>, <span class=\"string\">&quot;tencent&quot;</span>)</span><br><span class=\"line\">c.<span class=\"title function_\">eat</span>()</span><br><span class=\"line\">c.<span class=\"title function_\">sayCompany</span>()</span><br></pre></td></tr></table></figure>\n<p><strong>（3）class原理</strong></p>\n<p>class是语法糖，本质还是构造函数，属性会放在构造函数体内，而方法会写在函数的原型里</p>\n<h3 id=\"7.-看下列代码说输出\">7. 看下列代码说输出<a title=\"#7.-看下列代码说输出\" href=\"#7.-看下列代码说输出\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> A = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">n</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>();</span><br><span class=\"line\">A.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">n</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">m</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"keyword\">new</span> <span class=\"title function_\">A</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b.<span class=\"property\">n</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b.<span class=\"property\">m</span>); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c.<span class=\"property\">n</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(c.<span class=\"property\">m</span>); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>开始时，A的原型是{ n = 1 }，b在此时创建，<code>__proto__</code>属性指向{ n = 1 }，后面构造函数A的原型换成了{n:2, m :3}，但是不会影响b的<code>__proto__</code>的指向。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70da41d71e0c42c38a07e9c7b4966a9c~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"秋招保驾护航——js面试篇（下）","link":"2021/08/10/秋招保驾护航———js面试篇（下）"},"next":{"title":"vue面试题总结","link":"2021/07/20/vue面试题总结"},"plink":"http://example.com/2021/07/24/秋招保驾护航———js面试篇（上）/","toc":[{"id":"js中的数据类型","title":"js中的数据类型","index":"1","children":[{"id":"1.-js中的数据类型有哪些？","title":"1. js中的数据类型有哪些？","index":"1.1"},{"id":"2.-js中的基本类型和引用类型分别是如何存储的？","title":"2. js中的基本类型和引用类型分别是如何存储的？","index":"1.2"},{"id":"3.-js中传递参数的方式是怎么样的？","title":"3. js中传递参数的方式是怎么样的？","index":"1.3"},{"id":"3.-如何判断各种数据类型","title":"3. 如何判断各种数据类型","index":"1.4"},{"id":"4.-讲一讲undefined和null的区别","title":"4. 讲一讲undefined和null的区别","index":"1.5"},{"id":"5.-0.1+0.2为什么不等于0.3？","title":"5. 0.1+0.2为什么不等于0.3？","index":"1.6"},{"id":"7.-包装类的一些知识","title":"7. 包装类的一些知识","index":"1.7"},{"id":"8.-js的类型转换","title":"8. js的类型转换","index":"1.8"}]},{"id":"js的垃圾回收机制","title":"js的垃圾回收机制","index":"2"},{"id":"js中的数组","title":"js中的数组","index":"3","children":[{"id":"1.-数组的检测方式有哪些？","title":"1. 数组的检测方式有哪些？","index":"3.1"},{"id":"2.-array的栈和队列方法","title":"2. Array的栈和队列方法","index":"3.2"},{"id":"3.-array的转换方法","title":"3. Array的转换方法","index":"3.3"},{"id":"4.-array的重排序方法","title":"4. Array的重排序方法","index":"3.4"},{"id":"5.-array的操作方法","title":"5. Array的操作方法","index":"3.5"},{"id":"6.-array的位置方法","title":"6. Array的位置方法","index":"3.6"},{"id":"7.-array的迭代方法","title":"7. Array的迭代方法","index":"3.7"},{"id":"8.-归并方法","title":"8. 归并方法","index":"3.8"},{"id":"9.-数组去重","title":"9. 数组去重","index":"3.9"},{"id":"10.-数组扁平化","title":"10. 数组扁平化","index":"3.10"}]},{"id":"js中的函数","title":"js中的函数","index":"4","children":[{"id":"1.-argument是数组吗？如何转换成数组？","title":"1. argument是数组吗？如何转换成数组？","index":"4.1"},{"id":"2.-new一个函数发生了什么？","title":"2. new一个函数发生了什么？","index":"4.2"},{"id":"3.-说一说作用域和作用域链","title":"3. 说一说作用域和作用域链","index":"4.3"},{"id":"4.-说一说闭包","title":"4. 说一说闭包","index":"4.4"},{"id":"5.-说出下面段代码的输出","title":"5. 说出下面段代码的输出","index":"4.5"}]},{"id":"js的面向对象编程","title":"js的面向对象编程","index":"5","children":[{"id":"1.-什么是原型？什么是原型链？","title":"1. 什么是原型？什么是原型链？","index":"5.1"},{"id":"2-构造函数经历的阶段？","title":"2 构造函数经历的阶段？","index":"5.2"},{"id":"3-js如何创建对象？","title":"3 js如何创建对象？","index":"5.3"},{"id":"4.-对象的拷贝","title":"4. 对象的拷贝","index":"5.4"},{"id":"5.-js如何实现继承？","title":"5. js如何实现继承？","index":"5.5"},{"id":"6.-class","title":"6. class","index":"5.6"},{"id":"7.-看下列代码说输出","title":"7. 看下列代码说输出","index":"5.7"}]}],"reading_time":"11866 words in 79 min"}