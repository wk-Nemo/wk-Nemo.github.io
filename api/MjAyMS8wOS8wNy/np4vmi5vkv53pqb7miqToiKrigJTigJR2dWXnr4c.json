{"title":"秋招保驾护航——vue篇","date":"2021-09-07T01:21:30.000Z","date_formatted":{"ll":"Sep 7, 2021","L":"09/07/2021","MM-DD":"09-07"},"link":"2021/09/07/秋招保驾护航——vue篇","tags":["面试"],"categories":["Vue","前端"],"updated":"2023-05-07T09:43:52.280Z","content":"<p>秋招保驾护航系列文章正在持续更新，往期文章如下，需者自取：</p>\n<ul>\n<li>html、css：<a href=\"https://juejin.cn/post/6998576161382989861\" target=\"_blank\">秋招保驾护航——HTML、CSS篇</a></li>\n<li>js：<a href=\"https://juejin.cn/post/6987776819281805342/\" title=\"https://juejin.cn/post/6987776819281805342/\" target=\"_blank\">秋招保驾护航——js面试篇（上）</a>、<a href=\"https://juejin.cn/post/6988515657105047559\" title=\"https://juejin.cn/post/6988515657105047559\" target=\"_blank\">秋招保驾护航——js面试篇（下）</a></li>\n<li>浏览器：<a href=\"http://blog.wutortoise.cn/2021/08/10/%E7%A7%8B%E6%8B%9B%E4%BF%9D%E9%A9%BE%E6%8A%A4%E8%88%AA%E2%80%94%E2%80%94%E2%80%94%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AF%87\" target=\"_blank\">秋招保驾护航——浏览器篇</a></li>\n</ul>\n<h2 id=\"vue面试考察方面\">vue面试考察方面<a title=\"#vue面试考察方面\" href=\"#vue面试考察方面\"></a></h2>\n<ul>\n<li>框架的使用（基本使用，高级特性，周边插件）</li>\n<li>框架的原理（基本原理的了解，热门技术的深度，全面性）</li>\n<li>框架的实际应用，即设计能力（组件结构，数据结构）</li>\n</ul>\n<h2 id=\"基本使用\">基本使用<a title=\"#基本使用\" href=\"#基本使用\"></a></h2>\n<p>在这里，是一些日常使用的内容，在此列出来，可以思考平时是如何使用的，不太清楚的可以去看官方文档，跟着做一些demo。</p>\n<ul>\n<li>插值、表达式、指令、动态属性、v-html</li>\n<li>computed 和 watch</li>\n<li>class 和 style、动态属性</li>\n<li>v-if 和 v-show</li>\n<li>列表循环渲染v-for\n<ul>\n<li>key的重要性（后面涉及原理时再说）</li>\n<li>v-for和v-if不能一起使用：会进行重复判断</li>\n</ul>\n</li>\n<li>事件\n<ul>\n<li>event参数，event是原生的</li>\n<li>事件修饰符</li>\n<li>观察事件被绑定到哪？绑定到了当前的元素</li>\n</ul>\n</li>\n<li>表单\n<ul>\n<li>v-model</li>\n<li>常见表单项：textarea、checkbox、radio、select</li>\n<li>修饰符：lazy、number、trim</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1.-计算属性-vs-方法\">1. 计算属性 vs 方法<a title=\"#1.-计算属性-vs-方法\" href=\"#1.-计算属性-vs-方法\"></a></h3>\n<p><strong>区别：</strong> 我们可以将同一个函数定义成一个方法而不是计算属性。两者最终的结果是完全相同的。但是<strong>计算属性是基于他们的响应式依赖进行缓存</strong>。意味着依赖的值没有发生改变的话，多次访问计算属性的函数只会立即返回之前缓存的结果，不会再次执行函数。</p>\n<p><strong>优点：</strong> 进行了缓存以后，如果有一个性能开销较大的计算属性，它需要遍历一个巨大的数组并做大量的计算。我们如果进行了缓存，在依赖的数据没有变化时就可以直接返回结果，避免了性能的浪费。</p>\n<h3 id=\"2.-计算属性-vs-侦听属性\">2. 计算属性 vs 侦听属性<a title=\"#2.-计算属性-vs-侦听属性\" href=\"#2.-计算属性-vs-侦听属性\"></a></h3>\n<p>虽然计算属性在大多数的情况下更适合，但是也有需要侦听属性的时候。<strong>当需要在数据变化时执行异步或开销较大的操作时</strong>，这个方式是最有用的。</p>\n<p><strong>使用区别：</strong></p>\n<ul>\n<li><code>computed</code>可以设置<code>get</code>、<code>set</code></li>\n<li><code>watcher</code>可以设置<code>immediate</code>、<code>deep</code>\n<ul>\n<li>正常情况下，<code>侦听属性</code>提供的函数是不会立即执行的，只有在对应的<code>vue data</code>发生变化时，<code>侦听属性</code>对应的函数才会执行。那如果我们需要<code>侦听属性</code>对应的函数立即执行一次，就可以给<code>侦听属性</code>提供一个<code>immediate</code>选项，并设置其值为<code>true</code>。</li>\n<li>如果我们对一个<code>对象类型</code>的<code>vue data</code>进行侦听，当这个对象内的属性发生变化时，默认是不会触发侦听函数的。设置<code>deep</code>为true，则可以对其进行一个深层次的监听。</li>\n</ul>\n</li>\n</ul>\n<p><strong>运用场景：</strong></p>\n<ul>\n<li>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li>\n<li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li>\n</ul>\n<h3 id=\"3.-动态属性\">3. 动态属性<a title=\"#3.-动态属性\" href=\"#3.-动态属性\"></a></h3>\n<ul>\n<li>\n<p>class对象语法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;static&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;classObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">isActive</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  \t\t<span class=\"attr\">hasError</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">classObject</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">active</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;text-danger&#x27;</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>class数组语法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;[activeClass, errorClass]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">activeClass</span>: <span class=\"string\">&#x27;active&#x27;</span>,</span><br><span class=\"line\">  \t\t<span class=\"attr\">errorClass</span>: <span class=\"string\">&#x27;text-danger&#x27;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>style对象语法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">&quot;styleObject&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">    \t<span class=\"attr\">fontSize</span>: <span class=\"string\">&#x27;13px&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">styleObject</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">fontSize</span>: <span class=\"string\">&#x27;13px&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>style数组语法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:style</span>=<span class=\"string\">&quot;[style1,style2]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">style1</span>:&#123;<span class=\"attr\">fontSize</span>:<span class=\"string\">&#x27;100px&#x27;</span>&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">style2</span>:&#123;<span class=\"attr\">background</span>:<span class=\"string\">&#x27;red&#x27;</span>&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"4.-v-if-和-v-show-的区别\">4. v-if 和 v-show 的区别<a title=\"#4.-v-if-和-v-show-的区别\" href=\"#4.-v-if-和-v-show-的区别\"></a></h3>\n<ul>\n<li>\n<p><strong>v-if</strong> 是<strong>真正</strong>的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>\n</li>\n<li>\n<p><strong>v-show</strong> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。</p>\n</li>\n</ul>\n<p>所以，v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。</p>\n<h3 id=\"5.-事件修饰符有哪些\">5. 事件修饰符有哪些<a title=\"#5.-事件修饰符有哪些\" href=\"#5.-事件修饰符有哪些\"></a></h3>\n<p>为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。之前提过，修饰符是由点开头的指令后缀来表示的。</p>\n<ul>\n<li><code>.stop</code></li>\n<li><code>.prevent</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n<li><code>.once</code></li>\n<li><code>.passive</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">&quot;doThis&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">&quot;onSubmit&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">&quot;doThat&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">&quot;doThis&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">&quot;doThat&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.once</span>=<span class=\"string\">&quot;doThis&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:scroll.passive</span>=<span class=\"string\">&quot;onScroll&quot;</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6.-v-model\">6. v-model<a title=\"#6.-v-model\" href=\"#6.-v-model\"></a></h3>\n<p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>\n<p><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p>\n<p><code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p>\n<ul>\n<li>text 和 textarea 元素使用 <code>value</code> property 和 <code>input</code> 事件；</li>\n<li>checkbox 和 radio 使用 <code>checked</code> property 和 <code>change</code> 事件；</li>\n<li>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&#x27;something&#x27;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 相当于 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">&quot;something&quot;</span> <span class=\"attr\">v-on:input</span>=<span class=\"string\">&quot;something = $event.target.value&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"组件的使用\">组件的使用<a title=\"#组件的使用\" href=\"#组件的使用\"></a></h2>\n<ul>\n<li>data为什么是一个函数？</li>\n<li>如何理解单项数据流？</li>\n<li>组件之间的通信？</li>\n<li>slot插槽</li>\n<li>动态组件 &amp; 异步组件</li>\n</ul>\n<h3 id=\"1.-data为什么是一个函数？\">1. data为什么是一个函数？<a title=\"#1.-data为什么是一个函数？\" href=\"#1.-data为什么是一个函数？\"></a></h3>\n<p><strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝，如果没有这条规则，多处复用组件的地方会共享同一个数据，从而影响其他的实例。</p>\n<h3 id=\"2.-如何理解单项数据流？\">2. 如何理解单项数据流？<a title=\"#2.-如何理解单项数据流？\" href=\"#2.-如何理解单项数据流？\"></a></h3>\n<p>数据总是从父组件传到子组件，子组件没有权利修改父组件传过来的数据，只能请求父组件对原始数据进行修改。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p>\n<h3 id=\"3.-组件之间通信的方式\">3. 组件之间通信的方式<a title=\"#3.-组件之间通信的方式\" href=\"#3.-组件之间通信的方式\"></a></h3>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844903887162310669#heading-9\" target=\"_blank\">vue中8种组件通信方式, 值得收藏!</a></p>\n</blockquote>\n<ul>\n<li>使用props和$emit来通信</li>\n<li>vuex 状态管理</li>\n<li>eventBus</li>\n<li>localStorage/sessionStorage</li>\n</ul>\n<h4 id=\"（1）eventbus\">（1）eventBus<a title=\"#（1）eventbus\" href=\"#（1）eventbus\"></a></h4>\n<p>因为vue实例中提供了$on、$emit等方法所以只需要创建一个空的vue实例，在组件中通过$on()注册事件，在另外一个组件中通过$emit()去执行对应的事件并且可以传参来达到组件之间的通讯。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// event-bus.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">EventBus</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$EventBus</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>()</span><br></pre></td></tr></table></figure>\n<p><strong>实现一个eventBus:</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">eventBus</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> subs = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    subs,</span><br><span class=\"line\">    $on (type, callback) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sub = subs.<span class=\"title function_\">get</span>(type)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isEmpty = sub &amp;&amp; sub.<span class=\"title function_\">push</span>(callback)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!isEmpty) &#123;</span><br><span class=\"line\">        subs.<span class=\"title function_\">set</span>(type, [callback])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    $emit (type) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sub = subs.<span class=\"title function_\">get</span>(type)</span><br><span class=\"line\">      sub.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> <span class=\"title function_\">fn</span>())</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    $off (type, callback) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sub = subs.<span class=\"title function_\">get</span>(type)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sub) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> index = sub.<span class=\"title function_\">indexOf</span>(callback)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          sub.<span class=\"title function_\">splice</span>(index, <span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"生命周期\">生命周期<a title=\"#生命周期\" href=\"#生命周期\"></a></h2>\n<h3 id=\"1.-什么是生命周期？\">1. 什么是生命周期？<a title=\"#1.-什么是生命周期？\" href=\"#1.-什么是生命周期？\"></a></h3>\n<p>Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模版、挂载 Dom -&gt; 渲染、更新 -&gt; 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p>\n<h3 id=\"2.-各个生命周期的作用\">2. 各个生命周期的作用<a title=\"#2.-各个生命周期的作用\" href=\"#2.-各个生命周期的作用\"></a></h3>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>生命周期</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>beforeCreate</td>\n<td>组件实例被创建之初，组件的属性生效之前</td>\n</tr>\n<tr>\n<td>created</td>\n<td>组件实例已经完全创建，属性也绑定，但真实 dom 还没有生成，$el 还不可用</td>\n</tr>\n<tr>\n<td>beforeMount</td>\n<td>在挂载开始之前被调用：相关的 render 函数首次被调用</td>\n</tr>\n<tr>\n<td>mounted</td>\n<td>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</td>\n</tr>\n<tr>\n<td>beforeUpdate</td>\n<td>组件数据更新之前调用，发生在虚拟 DOM 打补丁之前</td>\n</tr>\n<tr>\n<td>update</td>\n<td>组件数据更新之后</td>\n</tr>\n<tr>\n<td>activited</td>\n<td>keep-alive 专属，组件被激活时调用</td>\n</tr>\n<tr>\n<td>deactivated</td>\n<td>keep-alive 专属，组件被销毁时调用</td>\n</tr>\n<tr>\n<td>beforeDestory</td>\n<td>组件销毁前调用</td>\n</tr>\n<tr>\n<td>destoryed</td>\n<td>组件销毁后调用</td>\n</tr>\n</tbody>\n</table></div></div><p>生命周期示意图：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4d7ca31ce13456198478a733f756fb8~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"1.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"3.-在哪个生命周期内调用异步请求？\">3. 在哪个生命周期内调用异步请求？<a title=\"#3.-在哪个生命周期内调用异步请求？\" href=\"#3.-在哪个生命周期内调用异步请求？\"></a></h3>\n<p>可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是本人推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：</p>\n<ul>\n<li>能更快获取到服务端数据，减少页面 loading 时间；</li>\n<li>ssr 不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；</li>\n</ul>\n<h3 id=\"4.-在什么阶段可以访问dom？\">4. 在什么阶段可以访问DOM？<a title=\"#4.-在什么阶段可以访问dom？\" href=\"#4.-在什么阶段可以访问dom？\"></a></h3>\n<p>根据生命周期示意图，可以在mounted中访问操作DOM</p>\n<h3 id=\"5.-vue-的父组件和子组件生命周期钩子函数执行顺序？\">5. Vue 的父组件和子组件生命周期钩子函数执行顺序？<a title=\"#5.-vue-的父组件和子组件生命周期钩子函数执行顺序？\" href=\"#5.-vue-的父组件和子组件生命周期钩子函数执行顺序？\"></a></h3>\n<ul>\n<li>加载渲染过程</li>\n</ul>\n<p>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p>\n<ul>\n<li>子组件更新过程</li>\n</ul>\n<p>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</p>\n<ul>\n<li>销毁过程</li>\n</ul>\n<p>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</p>\n<h3 id=\"6.-$nexttick\">6. $nextTick<a title=\"#6.-$nexttick\" href=\"#6.-$nexttick\"></a></h3>\n<blockquote>\n<p>原理：<a href=\"https://www.cnblogs.com/gaosirs/p/10595326.html\" target=\"_blank\">Vue $nextTick 原理</a></p>\n</blockquote>\n<ul>\n<li>Vue是异步渲染，data改变后DOM不会立即变化</li>\n<li>$nextTick会在DOM渲染后被触发，以获取最新的DOM</li>\n</ul>\n<h3 id=\"7.-keep-alive\">7. keep-alive<a title=\"#7.-keep-alive\" href=\"#7.-keep-alive\"></a></h3>\n<blockquote>\n<p>官方文档：<a href=\"https://cn.vuejs.org/v2/api/#keep-alive\" target=\"_blank\">keep-alive</a></p>\n</blockquote>\n<p>当在这些组件之间切换的时候，你有时会想保持这些组件的状态，以避免反复重渲染导致的性能问题。</p>\n<p>相应的，也有两种专属的生命周期：（1）activited，组件激活（2）deactivated，组件销毁</p>\n<h2 id=\"vue的高级特性\">vue的高级特性<a title=\"#vue的高级特性\" href=\"#vue的高级特性\"></a></h2>\n<h3 id=\"1.-mixin\">1. mixin<a title=\"#1.-mixin\" href=\"#1.-mixin\"></a></h3>\n<blockquote>\n<p>官方文档：<a href=\"https://cn.vuejs.org/v2/guide/mixins.html#%E5%9F%BA%E7%A1%80\" target=\"_blank\">混入</a></p>\n</blockquote>\n<p>对于一些公用的逻辑，可以采用混入的方式进行。比如在做表单校验逻辑时，很多用到表单的地方都需要使用，我们可以单独的定义一个form.js作为表单的混入。</p>\n<h2 id=\"vue插件\">Vue插件<a title=\"#vue插件\" href=\"#vue插件\"></a></h2>\n<ul>\n<li>Vuex</li>\n<li>Vue-Router</li>\n</ul>\n<h3 id=\"1.-vuex\">1. Vuex<a title=\"#1.-vuex\" href=\"#1.-vuex\"></a></h3>\n<ul>\n<li>基本的概念和使用</li>\n<li>一些场景设计</li>\n</ul>\n<h4 id=\"（1）state、mapstate\">（1）state、mapState<a title=\"#（1）state、mapstate\" href=\"#（1）state、mapstate\"></a></h4>\n<ul>\n<li>state： Vuex 的状态存储是响应式的，可以从store中读取state</li>\n<li>mapState：辅助生成计算属性</li>\n</ul>\n<h4 id=\"（2）getters、mapgetters\">（2）getters、mapGetters<a title=\"#（2）getters、mapgetters\" href=\"#（2）getters、mapgetters\"></a></h4>\n<ul>\n<li>getters：可以认为是 store 的计算属性。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</li>\n<li>mapGetters：将 store 中的 getter 映射到局部计算属性</li>\n</ul>\n<h4 id=\"（3）mutation、mapmutations、commit\">（3）mutation、mapMutations、commit<a title=\"#（3）mutation、mapmutations、commit\" href=\"#（3）mutation、mapmutations、commit\"></a></h4>\n<ul>\n<li>state的数据必须通过mutation来改变</li>\n<li>而mutation必须是同步的。</li>\n<li>组件可以通过commit来调用mutation</li>\n</ul>\n<h4 id=\"（4）action、mapactions、dispatch\">（4）action、mapActions、dispatch<a title=\"#（4）action、mapactions、dispatch\" href=\"#（4）action、mapactions、dispatch\"></a></h4>\n<ul>\n<li>mutation是同步的，action是异步的</li>\n<li>组件可以通过dispatch调用action</li>\n<li>action在内部使用commit调用mutation</li>\n</ul>\n<h3 id=\"2.-vue-router\">2. Vue-Router<a title=\"#2.-vue-router\" href=\"#2.-vue-router\"></a></h3>\n<ul>\n<li>路由模式：hash、H5 history</li>\n<li>路由配置：动态路由、懒加载</li>\n</ul>\n<h4 id=\"（1）vue-router路由模式有几种\">（1）vue-router路由模式有几种<a title=\"#（1）vue-router路由模式有几种\" href=\"#（1）vue-router路由模式有几种\"></a></h4>\n<p>vue-router 有 3 种路由模式：hash、history、abstract。</p>\n<ul>\n<li>hash:  使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器；</li>\n<li>history :  依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式；</li>\n<li>abstract :  支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式。</li>\n</ul>\n<h4 id=\"（2）hash模式的原理\">（2）hash模式的原理<a title=\"#（2）hash模式的原理\" href=\"#（2）hash模式的原理\"></a></h4>\n<p>早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 ‘#search’：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.word.com#search</span><br></pre></td></tr></table></figure>\n<p>hash  路由模式的实现主要是基于下面几个特性：</p>\n<ul>\n<li>URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；</li>\n<li>hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash 的切换；</li>\n<li>可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用  JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；</li>\n<li>我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。</li>\n</ul>\n<h4 id=\"（3）history模式的原理\">（3）history模式的原理<a title=\"#（3）history模式的原理\" href=\"#（3）history模式的原理\"></a></h4>\n<p>HTML5 提供了 History API 来实现 URL 的变化。其中做最主要的 API 有以下两个：history.pushState() 和 history.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">history</span>.<span class=\"title function_\">pushState</span>(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, path);</span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">history</span>.<span class=\"title function_\">replaceState</span>(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, path);</span><br></pre></td></tr></table></figure>\n<p>history 路由模式的实现主要基于存在下面几个特性：</p>\n<ul>\n<li>pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；</li>\n<li>我们可以使用 popstate  事件来监听 url 的变化，从而对页面进行跳转（渲染）；</li>\n<li>history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。</li>\n</ul>\n<h2 id=\"vue原理\">Vue原理<a title=\"#vue原理\" href=\"#vue原理\"></a></h2>\n<ul>\n<li>数据双向绑定</li>\n<li>虚拟DOM</li>\n</ul>\n<h3 id=\"1.-数据双向绑定\">1. 数据双向绑定<a title=\"#1.-数据双向绑定\" href=\"#1.-数据双向绑定\"></a></h3>\n<h4 id=\"（1）数据双向绑定原理\">（1）数据双向绑定原理<a title=\"#（1）数据双向绑定原理\" href=\"#（1）数据双向绑定原理\"></a></h4>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844903903822086151\" target=\"_blank\">0 到 1 掌握：Vue 核心之数据双向绑定</a></p>\n<p><a href=\"https://juejin.cn/post/6993373656051089421\" target=\"_blank\">秋招保驾护航——vue篇之数据双向绑定</a></p>\n</blockquote>\n<p>我们会通过实现以下 4 个步骤，来实现数据的双向绑定：</p>\n<p>1、实现一个监听器 <code>Observer</code> ，用来劫持并监听所有属性，如果属性发生变化，就通知订阅者；</p>\n<p>2、实现一个订阅器 <code>Dep</code>，每个被劫持的属性内部都会初始化一个Dep，Dep的功能是一个依赖的队列，可以进行添加订阅、取消订阅、以及触发所有依赖。</p>\n<p>3、实现一个订阅者 <code>Watcher</code>，可以收到属性的变化通知并执行相应的方法，从而更新视图；</p>\n<p>4、实现一个解析器 <code>Compile</code>，可以解析每个节点的相关指令，对模板数据和订阅器进行初始化。</p>\n<p>以上四个步骤的流程图表示如下：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46c4a79b9b2e4452838a2a4e26283079~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"3.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"（2）array是如何实现数据监听的\">（2）Array是如何实现数据监听的<a title=\"#（2）array是如何实现数据监听的\" href=\"#（2）array是如何实现数据监听的\"></a></h4>\n<p>vue2.x对象的变化侦测是通过<code>Object.defineProperty</code>进行数据劫持完成的，但是如<code>this.list.push(1)</code>这种对数组的操作是通过<code>Array</code>原型上的方法来改变数组的内容，不会触发<code>getter</code>和<code>setter</code>。</p>\n<p>在ES6之前，js没有提供元编程的能力，也就是没有提供可以拦截原型的方法。但我们可以使用一个拦截器覆盖<code>Array.prototype</code>，因此每次访问<code>push</code>等原型上的方法时，相当于执行拦截器上提供的方法。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9ec74171a6846b5a3ded4eb64221987~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"（3）vue3中数据监听的实现方式和vue2的进行对比\">（3）vue3中数据监听的实现方式和vue2的进行对比<a title=\"#（3）vue3中数据监听的实现方式和vue2的进行对比\" href=\"#（3）vue3中数据监听的实现方式和vue2的进行对比\"></a></h4>\n<p>vue3中使用了Proxy，而vue2是使用Object.defineProperty</p>\n<p><strong>Proxy 的优势如下:</strong></p>\n<ul>\n<li>Proxy 可以直接监听对象而非属性；</li>\n<li>Proxy 可以直接监听数组的变化；</li>\n<li>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；</li>\n<li>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；</li>\n<li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；</li>\n</ul>\n<p><strong>Object.defineProperty 的优势如下:</strong></p>\n<ul>\n<li>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。</li>\n</ul>\n<h3 id=\"2.-虚拟dom\">2. 虚拟DOM<a title=\"#2.-虚拟dom\" href=\"#2.-虚拟dom\"></a></h3>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844903895467032589#heading-5\" target=\"_blank\">深入剖析：Vue核心之虚拟DOM</a></p>\n<p><a href=\"https://juejin.cn/post/6994959998283907102\" target=\"_blank\">15张图，20分钟吃透Diff算法核心原理，我说的！！！</a></p>\n</blockquote>\n<h4 id=\"（1）虚拟dom的优缺点\">（1）虚拟DOM的优缺点<a title=\"#（1）虚拟dom的优缺点\" href=\"#（1）虚拟dom的优缺点\"></a></h4>\n<p><strong>优点：</strong></p>\n<ul>\n<li>\n<p>保证性能下限： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；</p>\n</li>\n<li>\n<p>无需手动操作 DOM： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；</p>\n</li>\n<li>\n<p>跨平台： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。</p>\n</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>\n<p>无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。</p>\n</li>\n<li>\n<p>首次渲染大量 DOM 时，由于多了一层虚拟 DOM 的计算，会比 innerHTML 插入慢。</p>\n</li>\n</ul>\n<h4 id=\"（2）虚拟dom实现的原理\">（2）虚拟DOM实现的原理<a title=\"#（2）虚拟dom实现的原理\" href=\"#（2）虚拟dom实现的原理\"></a></h4>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c57a7b4e91a4a359474fb4c281f6d8e~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"截屏2021-08-07 下午10.59.31.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>虚拟 DOM 的实现原理主要包括以下 3 部分：</p>\n<ul>\n<li>用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；</li>\n<li>diff 算法 — 比较两棵虚拟 DOM 树的差异；</li>\n<li>pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。</li>\n</ul>\n<h4 id=\"（3）diff算法\">（3）diff算法<a title=\"#（3）diff算法\" href=\"#（3）diff算法\"></a></h4>\n<p>新旧虚拟DOM对比的时候，Diff算法比较只会在同层级进行, 不会跨层级比较。 所以Diff算法是:<code>广度优先算法</code>。 时间复杂度:<code>O(n)</code></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ca3d338e5a445ab80e40042c50ac79a~tplv-k3u1fbpfcp-watermark.awebp\" alt=\"截屏2021-08-08 上午11.32.47.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"（4）vue中的key有什么作用\">（4）Vue中的Key有什么作用<a title=\"#（4）vue中的key有什么作用\" href=\"#（4）vue中的key有什么作用\"></a></h4>\n<p>所以 Vue 中 key 的作用是：key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速</p>\n<p><strong>更准确</strong>：因为带 key 就不是就地复用了，在 sameNode 函数 <code>a.key === b.key</code> 对比中可以避免就地复用的情况。所以会更加准确。</p>\n<p><strong>更快速</strong>：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，源码如下：</p>\n<p>Ps：如果使用了index作为key，那么key值不能起到唯一标识的作用，那么就不能更快更准确的去执行diff算法了。</p>\n<h3 id=\"3.-模板编译\">3. 模板编译<a title=\"#3.-模板编译\" href=\"#3.-模板编译\"></a></h3>\n<blockquote>\n<p><a href=\"https://juejin.cn/post/6844904110391558151\" target=\"_blank\">《Vue不看源码懂原理》系列——Vue模板编译</a></p>\n</blockquote>\n<p>我们在vue中写的template模板不是真正的html，因为其中有大量的指令如<code>v-on</code>、<code>v-if</code>、<code>v-for</code>、<code>v-model</code>，还有插值等内容，这些在html上是没有的。因此vue提供了一个模板解析库，模板编译首先将模板解析成AST（抽象语法树），然后使用AST生成渲染函数（render函数，可以生成虚拟节点）。</p>\n<p>详细过程可以看上面的文章，流程如下：</p>\n<ul>\n<li>\n<p>模板解析成AST树：<strong>使用解析器将模板解析成HTML树</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"string\">&quot;div&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">staticRoot</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">static</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">plain</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">parent</span>: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">  <span class=\"attr\">attrsList</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">attrsMap</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">tag</span>: <span class=\"string\">&quot;p&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">staticRoot</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">static</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">plain</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">parent</span>: &#123;<span class=\"attr\">tag</span>: <span class=\"string\">&quot;div&quot;</span>, ...&#125;,</span><br><span class=\"line\">      <span class=\"attr\">attrsList</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">attrsMap</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">children</span>: [&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">        <span class=\"attr\">text</span>: <span class=\"string\">&quot;&#123;&#123;name&#125;&#125;&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">static</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">expression</span>: <span class=\"string\">&quot;_s(name)&quot;</span></span><br><span class=\"line\">      &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>进行优化：<strong>使用优化器将解析完的AST进行遍历</strong>，找出<strong>静态节点</strong>并标记，在下次更新对比虚拟DOM的vNode时，如果发现这两个节点是静态节点，则直接跳过更新节点的流程。达到进一步避免一些无用的DOM操作来提升性能，因为静态节点在首次渲染后一定不会改变。</p>\n</li>\n<li>\n<p>AST生成渲染函数：<strong>使用代码生成器将解析完的AST转化为渲染函数需要的内容</strong>。这里用到了with语法，内部的this指向的就是new Vue的实例，的这里的<code>_c</code>就是<code>creatElement()</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解析完的AST生成代码字符串</span></span><br><span class=\"line\"><span class=\"string\">`with(this) &#123;return _c(&#x27;div&#x27;, [_c(&#x27;p&#x27;, [_v(_s(name))]), _v(&quot; &quot;), _m(0)])&#125;`</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"4.-整体流程\">4. 整体流程<a title=\"#4.-整体流程\" href=\"#4.-整体流程\"></a></h3>\n<p>上面讲到了vue的三大核心原理，现在通过vue组件的渲染流程来将三个过程串联起来。</p>\n<p><img src=\"https://user-images.githubusercontent.com/62100025/130717777-0eb5ac53-deb7-4e2b-b3bc-1e3cdf53cd81.png\" alt=\"image\" loading=\"lazy\" class=\"φbp\"></p>\n<p>我们从组件的渲染过程来分别回顾vue的响应式数据，虚拟dom，以及模板编译。</p>\n<h4 id=\"（1）初次渲染\">（1）初次渲染<a title=\"#（1）初次渲染\" href=\"#（1）初次渲染\"></a></h4>\n<ul>\n<li>解析模板为render函数（一般会在开发环境完成，vue-loader）</li>\n<li>触发响应式，监听data属性</li>\n<li>执行render函数，生成vnode，调用patch算法首次渲染</li>\n</ul>\n<p>先看初次渲染。我们写的template代码看似html，实则不是，因为里面多了v-on、v-if、v-for、v-model、插值等内容，这些在html上是没有的。因此vue提供了一个模板解析库，这个库的实现涉及到了编译原理，咱不作了解，但是我们要知道这个库可以将我们传入的template模板渲染成render函数。</p>\n<p>接着，我们需要对数据进行一个响应式的处理，也就是达到数据更新通知视图进行变化的过程。这里实现主要是三个部分，第一部分，实现一个observer类，对data里的所有属性使用object.defineProperty 进行数据劫持，核心就是调用该属性触发getter，更改属性触发setter；解决了数据劫持的问题以后，接下来便是一个发布订阅的过程。第二部分，需要设计一个dep类，当getter被触发时，将相关的依赖收集到数组中，当setter触发以后，便可以通知所有的依赖。第三部分，这些依赖就是watcher，我们在后面的流程中讲到他的妙用。</p>\n<p>最后一步，便是调用render函数，调用了render函数以后，就会触发相应数据的getter。在vue中会设置一个window.target并赋值触发getter的地方，然后在dep中会将这个window.target添加到依赖队列中。render函数执行完毕后，会生成虚拟节点。一切就绪后，就会执行patch，因为是第一次，没有oldVNode，会直接渲染上去。</p>\n<h4 id=\"（2）更新过程\">（2）更新过程<a title=\"#（2）更新过程\" href=\"#（2）更新过程\"></a></h4>\n<ul>\n<li>修改data，触发setter</li>\n<li>重新执行render函数，生成newVnode</li>\n<li>执行patch(oldVnode, newVnode)</li>\n</ul>\n<p>当属性被修改时，会触发setter，然后通知dep里的相关依赖，也就是每一个watcher。接着会重新执行render函数，生成newVnode，再调用patch算法，进行同层节点的比较，最后渲染。</p>\n","prev":{"title":"秋招保驾护航——计算机网络","link":"2021/09/07/秋招保驾护航——计算机网络"},"next":{"title":"秋招保驾护航——HTML、CSS篇","link":"2021/08/21/秋招保驾护航—HTML、CSS篇"},"plink":"http://example.com/2021/09/07/秋招保驾护航——vue篇/","toc":[{"id":"vue面试考察方面","title":"vue面试考察方面","index":"1"},{"id":"基本使用","title":"基本使用","index":"2","children":[{"id":"1.-计算属性-vs-方法","title":"1. 计算属性 vs 方法","index":"2.1"},{"id":"2.-计算属性-vs-侦听属性","title":"2. 计算属性 vs 侦听属性","index":"2.2"},{"id":"3.-动态属性","title":"3. 动态属性","index":"2.3"},{"id":"4.-v-if-和-v-show-的区别","title":"4. v-if 和 v-show 的区别","index":"2.4"},{"id":"5.-事件修饰符有哪些","title":"5. 事件修饰符有哪些","index":"2.5"},{"id":"6.-v-model","title":"6. v-model","index":"2.6"}]},{"id":"组件的使用","title":"组件的使用","index":"3","children":[{"id":"1.-data为什么是一个函数？","title":"1. data为什么是一个函数？","index":"3.1"},{"id":"2.-如何理解单项数据流？","title":"2. 如何理解单项数据流？","index":"3.2"},{"id":"3.-组件之间通信的方式","title":"3. 组件之间通信的方式","index":"3.3"}]},{"id":"生命周期","title":"生命周期","index":"4","children":[{"id":"1.-什么是生命周期？","title":"1. 什么是生命周期？","index":"4.1"},{"id":"2.-各个生命周期的作用","title":"2. 各个生命周期的作用","index":"4.2"},{"id":"3.-在哪个生命周期内调用异步请求？","title":"3. 在哪个生命周期内调用异步请求？","index":"4.3"},{"id":"4.-在什么阶段可以访问dom？","title":"4. 在什么阶段可以访问DOM？","index":"4.4"},{"id":"5.-vue-的父组件和子组件生命周期钩子函数执行顺序？","title":"5. Vue 的父组件和子组件生命周期钩子函数执行顺序？","index":"4.5"},{"id":"6.-$nexttick","title":"6. $nextTick","index":"4.6"},{"id":"7.-keep-alive","title":"7. keep-alive","index":"4.7"}]},{"id":"vue的高级特性","title":"vue的高级特性","index":"5","children":[{"id":"1.-mixin","title":"1. mixin","index":"5.1"}]},{"id":"vue插件","title":"Vue插件","index":"6","children":[{"id":"1.-vuex","title":"1. Vuex","index":"6.1"},{"id":"2.-vue-router","title":"2. Vue-Router","index":"6.2"}]},{"id":"vue原理","title":"Vue原理","index":"7","children":[{"id":"1.-数据双向绑定","title":"1. 数据双向绑定","index":"7.1"},{"id":"2.-虚拟dom","title":"2. 虚拟DOM","index":"7.2"},{"id":"3.-模板编译","title":"3. 模板编译","index":"7.3"},{"id":"4.-整体流程","title":"4. 整体流程","index":"7.4"}]}],"reading_time":"6225 words in 42 min"}