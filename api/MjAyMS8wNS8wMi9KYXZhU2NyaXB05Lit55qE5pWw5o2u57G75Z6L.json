{"title":"JavaScript中的数据类型","date":"2021-05-02T02:05:49.000Z","date_formatted":{"ll":"May 2, 2021","L":"05/02/2021","MM-DD":"05-02"},"link":"2021/05/02/JavaScript中的数据类型","categories":["JavaScript","前端"],"updated":"2023-05-07T09:48:04.358Z","content":"<h1 id=\"你不知道的javascript（中）\">你不知道的JavaScript（中）<a title=\"#你不知道的javascript（中）\" href=\"#你不知道的javascript（中）\"></a></h1>\n<p>你不知道的JavaScript深入的解析了JavaScript这门语言，而第二本中册主要讲了两大板块：JS中的类型和JS中的异步，本篇内容重在总结归纳类型部分。</p>\n<h3 id=\"第一章、类型\">第一章、类型<a title=\"#第一章、类型\" href=\"#第一章、类型\"></a></h3>\n<p>JavaScript是一门动态语言（脚本语言），只在被调用时进行解释或编译。</p>\n<ul>\n<li>\n<p>脚本语言(<a href=\"https://baike.baidu.com/item/JavaScript\" target=\"_blank\">JavaScript</a>，<a href=\"https://baike.baidu.com/item/VBscript\" target=\"_blank\">VBscript</a>等)介于<a href=\"https://baike.baidu.com/item/HTML\" target=\"_blank\">HTML</a>和<a href=\"https://baike.baidu.com/item/C/7252092\" target=\"_blank\">C</a>,<a href=\"https://baike.baidu.com/item/C%2B%2B\" target=\"_blank\">C++</a>,Java,<a href=\"https://baike.baidu.com/item/C%23\" target=\"_blank\">C#</a>等编程语言之间。　HTML通常用于格式化和链接文本。而编程语言通常用于向机器发出一系列复杂的指令。</p>\n</li>\n<li>\n<p>脚本语言与编程语言也有很多相似地方，其函数与编程语言比较相像一些,其也涉及到变量。与编程语言之间最大的区别是编程语言的语法和规则更为严格和复杂一些.</p>\n</li>\n<li>\n<p>脚本语言是一种解释性的语言,例如<a href=\"https://baike.baidu.com/item/Python\" target=\"_blank\">Python</a>、vbscript,javascript,installshield script,ActionScript等等,它不象c\\c++等可以编译成二进制代码,以<a href=\"https://baike.baidu.com/item/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6\" target=\"_blank\">可执行文件</a>的形式存在，脚本语言不需要编译，可以直接用，由解释器来负责解释。</p>\n</li>\n</ul>\n<h4 id=\"1.1-内置类型\">1.1 内置类型<a title=\"#1.1-内置类型\" href=\"#1.1-内置类型\"></a></h4>\n<h5 id=\"1、类型和引用类型\">1、类型和引用类型<a title=\"#1、类型和引用类型\" href=\"#1、类型和引用类型\"></a></h5>\n<p>js的内置类型有：</p>\n<ul>\n<li>null</li>\n<li>undefined</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>symbol</li>\n</ul>\n<p>js的引用类型是从object的子类型，有如下几种：</p>\n<ul>\n<li>Object</li>\n<li>Function</li>\n<li>Array</li>\n<li>RegExp</li>\n<li>Data</li>\n<li>包装类：String、Number、Boolean</li>\n<li>Math</li>\n</ul>\n<h5 id=\"2、判断方法：\">2、判断方法：<a title=\"#2、判断方法：\" href=\"#2、判断方法：\"></a></h5>\n<p>（1）typeof检测</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> === <span class=\"string\">&quot;undefined&quot;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span> === <span class=\"string\">&quot;boolean&quot;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">42</span> === <span class=\"string\">&quot;number&quot;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&quot;42&quot;</span> === <span class=\"string\">&quot;string&quot;</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;...&#125; === <span class=\"string\">&quot;object&quot;</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>（2）null检测</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"literal\">null</span></span><br><span class=\"line\">(!a &amp;&amp; <span class=\"keyword\">typeof</span> a === <span class=\"string\">&quot;object&quot;</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>（3）引用类型的检测</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// function检测</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;...&#125; === <span class=\"string\">&quot;function&quot;</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array类型检测</span></span><br><span class=\"line\"><span class=\"comment\">// 根据原型链的两种方法，但是原型链可能会修改，所以有时候不靠谱</span></span><br><span class=\"line\">arr <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span> === <span class=\"literal\">true</span></span><br><span class=\"line\">arr.<span class=\"property\">proto</span>.<span class=\"property\">constructor</span> === <span class=\"title class_\">Array</span></span><br><span class=\"line\"><span class=\"comment\">// 靠谱的方法</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">apply</span>(arr) === “[object <span class=\"title class_\">Array</span>]”</span><br><span class=\"line\"><span class=\"comment\">// 官方提供方法，可靠可行，简单 </span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(arr) === <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第二章、值\">第二章、值<a title=\"#第二章、值\" href=\"#第二章、值\"></a></h3>\n<h4 id=\"2.1-数组\">2.1 数组<a title=\"#2.1-数组\" href=\"#2.1-数组\"></a></h4>\n<h5 id=\"1、js的数组特点\">1、js的数组特点<a title=\"#1、js的数组特点\" href=\"#1、js的数组特点\"></a></h5>\n<ul>\n<li>js中的数组可以容纳任何类型的值，包括字符串、数字、对象或者其他数组。</li>\n<li>js中的数组可以声明后向内部加入值，不需要预先设定大小</li>\n</ul>\n<h5 id=\"2、类数组\">2、类数组<a title=\"#2、类数组\" href=\"#2、类数组\"></a></h5>\n<p>在js中，函数的参数arguments，DOM查询返回的元素列表，他们并非严格意义上的数组，只是用起来像数组，但本质是是对象。有时候需要将类数组转换成真正的数组，有如下几种方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设下面都发生在一个函数当中，arguments为函数的参数列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// silce方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// concat</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">concat</span>.<span class=\"title function_\">apply</span>([], <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6语法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [...<span class=\"variable language_\">arguments</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内置函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2.2-字符串\">2.2 字符串<a title=\"#2.2-字符串\" href=\"#2.2-字符串\"></a></h4>\n<p>字符串和数组，但是有一些相似的地方，都有length属性、indexof() 和 concat()方法。但是字符串不是数组:</p>\n<ul>\n<li>js中的字符串是不可变的，而数组是可变的，这就意味着改变某个位上的值，对于字符串而言是要创建一个新的值再赋给变量，而数组是直接在变量的基础上更改</li>\n<li>字符串可以借用数组的一些处理函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 字符串未含有的方法</span></span><br><span class=\"line\">a.<span class=\"property\">join</span> <span class=\"comment\">//undefined</span></span><br><span class=\"line\">a.<span class=\"property\">map</span> <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 借用数组的方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">join</span>.<span class=\"title function_\">call</span>(a, <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">map</span>.<span class=\"title function_\">call</span>(a, <span class=\"function\">() =&gt;</span> &#123;...&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意reverse等变更成员的函数不可以使用，因为字符串是不可变的</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">reverse</span>().<span class=\"title function_\">call</span>(a) <span class=\"comment\">//hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果非要使用可以先将字符串转成数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">// dlrow olleh</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2.3-数字\">2.3 数字<a title=\"#2.3-数字\" href=\"#2.3-数字\"></a></h4>\n<p>js只有一种数值类型number，包括整数和小数，但是js没有真正意义上的整数，所以42.0和42是没有区别的。js中的数字类型是基于IEEE754标准来实现的，这类标准也成为“浮点数”，js使用的双精度格式（即64位二进制）</p>\n<h6 id=\"1、0.1-+-0.2-===-0.3-？\">1、0.1 + 0.2 === 0.3 ？<a title=\"#1、0.1-+-0.2-===-0.3-？\" href=\"#1、0.1-+-0.2-===-0.3-？\"></a></h6>\n<p>所有遵循IEEE754标准的二进制浮点数最大的问题会出现如下情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> === <span class=\"number\">0.3</span> <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p>0.1和0.2在转换成二进制后会无限循环，由于标准位数的限制后面多余的位数会被截掉，此时就已经出现了精度的损失，相加后因浮点数小数位的限制而截断的二进制数字在转换为十进制就会变成0.30000000000000004。</p>\n<p>解决办法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先设置一个误差范围，通常成为“机器精度”，对于js来说，这个值通常是2^-52</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title class_\">Number</span>.<span class=\"property\">EPSILON</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Number</span>.<span class=\"property\">EPSILON</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, -<span class=\"number\">52</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 比较误差值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">nbumersCloseEnoughToEqual</span>(<span class=\"params\">n1, n2</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(n1 - n2) &lt; <span class=\"title class_\">Number</span>.<span class=\"property\">EPSILON</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 比较</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0.2</span> + <span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">0.3</span></span><br><span class=\"line\"><span class=\"title function_\">nbumersCloseEnoughToEqual</span>(a, b) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<p><img src=\"C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210430112757027.png\" alt=\"image-20210430112757027\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"2.4-特殊数值\">2.4 特殊数值<a title=\"#2.4-特殊数值\" href=\"#2.4-特殊数值\"></a></h4>\n<p>js中有几个特殊值值得注意</p>\n<h5 id=\"1、null、undefined和void\">1、null、undefined和void<a title=\"#1、null、undefined和void\" href=\"#1、null、undefined和void\"></a></h5>\n<p>null和undefined他们即是名称也是值，他们有一些差别：</p>\n<p>（1）null：</p>\n<ul>\n<li>null 指空值，指曾经赋过值，但是当前没有值</li>\n<li>null 是一个特殊关键字，不是标识符，不能<strong>当作变量来使用</strong>和<strong>赋值</strong></li>\n</ul>\n<p>（2）undefined</p>\n<ul>\n<li>\n<p>undefined 指没有值，指从未赋过值</p>\n</li>\n<li>\n<p>undifined 是一个标识符，可以当作变量来使用和赋值</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非严格模式下可以为全局标识符undefined赋值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"literal\">undefined</span> = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">\t<span class=\"literal\">undefined</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在严格和非严格模式下，可以声明一个undefined的局部变量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> <span class=\"literal\">undefined</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>();</span><br></pre></td></tr></table></figure>\n<p>（3）void运算符</p>\n<p>void __ 没有返回值，因此返回的结果是undefined，但是它并不改变表达式的结果，只是让表达式不返回值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">void</span> a, a) <span class=\"comment\">//undefined 3</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2、特殊的数字\">2、特殊的数字<a title=\"#2、特殊的数字\" href=\"#2、特殊的数字\"></a></h5>\n<p>（1）NaN</p>\n<p>如果数学运算的操作符不是数字类型（或者无法解析成常规的十进制和十六进制数字），就无法返回一个有效的数字，这种情况下返回的值未NaN。可以将它理解为“无效数值” “失败数值” 或者 “坏数值”</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不是数字的数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span> / <span class=\"string\">&quot;foo&quot;</span>  <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a === <span class=\"string\">&quot;number&quot;</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 与自身不相等，唯一一个非自反的值</span></span><br><span class=\"line\"><span class=\"title class_\">NaN</span> ！= <span class=\"title class_\">NaN</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断NaN</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span> <span class=\"comment\">// &quot;foo&quot;j</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isNaN</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n !== n </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(a) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>（2）Infinity</p>\n<p>js使用IEEE 754浮点数，运算的结果可能溢出，此时的结果为Infinity或-Infinity</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span> / <span class=\"number\">0</span> <span class=\"comment\">// Infinity</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = -<span class=\"number\">1</span> / <span class=\"number\">0</span> <span class=\"comment\">// -Infiniy</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2.5-值和引用\">2.5 值和引用<a title=\"#2.5-值和引用\" href=\"#2.5-值和引用\"></a></h4>\n<p>在很多编程语言中，赋值和参数传递可以通过复制或者引用复制来完成。<strong>在js中，对值的赋值或引用取决于值的类型</strong>。</p>\n<ul>\n<li>简单值总是通过<strong>值复制</strong>传递来赋值的，包括：null、undefined、字符串、布尔和symbol</li>\n<li>复合值 —— 对象（包括数组、函数等引用类型）都是通过<strong>引用复制</strong>的方式来赋值</li>\n</ul>\n<p>有些人会迷惑函数的参数传递是如何赋值的，结论在前，通过引用复制</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">\tx.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">\tx = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\">    x.<span class=\"title function_\">push</span>(<span class=\"number\">7</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(a)</span><br><span class=\"line\">a <span class=\"comment\">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<p>上述过程如下：</p>\n<ul>\n<li>首先数组的[1, 2, 3]的地址通过引用复制给了变量a</li>\n<li>接着调用函数foo时将地址通过引用赋值给了函数参数x</li>\n<li>x通过地址在数组[1, 2, 3]的尾部添加了一个4变成[1, 2, 3, 4]</li>\n<li>接着x又被赋予了一个新的地址引用，这个地址指向了新的数组[4, 5, 6]，所以后面的所有操作都不会影响到最开始的数组[1, 2, 3, 4]</li>\n</ul>\n<h3 id=\"第三章、原生函数\">第三章、原生函数<a title=\"#第三章、原生函数\" href=\"#第三章、原生函数\"></a></h3>\n<p>在js中有一些引用类型，在此详细介绍他们：</p>\n<ul>\n<li>Object</li>\n<li>Function</li>\n<li>Array</li>\n<li>RegExp</li>\n<li>Data</li>\n<li>包装类：String、Number、Boolean</li>\n<li>Math</li>\n</ul>\n<p>首先来看看如何分辨他们，所有typeof返回值为object的对象都包含一个内部属性[[Class]]，这个属性无法直接访问，一般通过Object.prototype.toString(…)来查看</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用类型</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([<span class=\"number\">1</span>]) <span class=\"comment\">// &quot;[object Array]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"regexp\">/regex-literal/i</span>) <span class=\"comment\">// &quot;[object RegExp]&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// null和undefined</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>) <span class=\"comment\">// &quot;[object Null]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>) <span class=\"comment\">// &quot;[object Undefined]&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他基本类型</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&quot;131&quot;</span>) <span class=\"comment\">// &quot;[object String]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"number\">131</span>) <span class=\"comment\">// &quot;[object Number]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">true</span>) <span class=\"comment\">// &quot;[object Boolean]&quot;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1、对象（object）\">1、对象（Object）<a title=\"#1、对象（object）\" href=\"#1、对象（object）\"></a></h5>\n<p>object的相关API：<a href=\"https://wangdoc.com/javascript/stdlib/object.html\" target=\"_blank\">Object 对象</a></p>\n<p>自己的博客：<a href=\"http://blog.wutortoise.cn/2021/01/15/Object%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" target=\"_blank\">Object类型和面向对象的程序设计</a></p>\n<p>（1） 原型、原型链</p>\n<ul>\n<li>原型对象和构造函数\n<ul>\n<li>js中每定义一个函数，会有一个自带的prototype指向函数的原型对象</li>\n<li>函数经过new后，成为了构造函数会返回一个全新的实例对象，具有一个__proto__属性，指向构造函数的原型函数</li>\n</ul>\n</li>\n<li>说说原型链\n<ul>\n<li>JavaScript实例对象通过__proto__ 指向父类对象，直到指向Object对象为止，这样就形成了一个原型指向的链条, 即原型链。</li>\n<li>对象的 hasOwnProperty() 来检查对象自身中是否含有该属性</li>\n<li>使用 in 检查对象中是否含有某个属性时，如果对象中没有但是原型链中有，也会返回 true</li>\n</ul>\n</li>\n</ul>\n<p>（2）js如何实现继承</p>\n<ul>\n<li>借助call</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent1</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent1&#x27;</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child1</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">  <span class=\"title class_\">Parent1</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>); </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child1&#x27;</span> </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Child1</span>); </span><br></pre></td></tr></table></figure>\n<p>这样写的时候子类虽然能够拿到父类的属性值，但是问题是父类原型对象中一旦存在方法那么子类无法继承。那么引出下面的方法。</p>\n<ul>\n<li>借助原型链</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent2</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent2&#x27;</span>; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">play</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child2</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child2&#x27;</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"title class_\">Child2</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent2</span>(); </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Child2</span>()); </span><br></pre></td></tr></table></figure>\n<p>潜在的问题：多个实例对象绑定的是同一个原型，改变一个会影响另外一个</p>\n<ul>\n<li>组合</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent3</span> () &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent3&#x27;</span>; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">play</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child3</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">  <span class=\"title class_\">Parent3</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>); </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child3&#x27;</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"title class_\">Child3</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent3</span>(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child3</span>(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child3</span>(); </span><br><span class=\"line\">s3.<span class=\"property\">play</span>.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>); </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s3.<span class=\"property\">play</span>, s4.<span class=\"property\">play</span>); </span><br></pre></td></tr></table></figure>\n<p>又徒增了一个新问题，那就是Parent3的构造函数会多执行了一次（Child3.prototype = new Parent3();）</p>\n<ul>\n<li>寄生组合继承</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent5</span> () &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent5&#x27;</span>; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">play</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child5</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">  <span class=\"title class_\">Parent5</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>); </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child5&#x27;</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"title class_\">Child5</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Parent5</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); </span><br><span class=\"line\"><span class=\"title class_\">Child5</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Child5</span>; </span><br></pre></td></tr></table></figure>\n<ul>\n<li>class继承</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>(name)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2、函数（function）\">2、函数（Function）<a title=\"#2、函数（function）\" href=\"#2、函数（function）\"></a></h5>\n<p>自己的博客链接：<a href=\"http://blog.wutortoise.cn/2021/02/07/%E5%87%BD%E6%95%B0\" target=\"_blank\">函数</a></p>\n<p>（1）函数的参数</p>\n<ul>\n<li>你可以传递一个参数进函数，不论你在定义函数时规定了多少个参数，因为你传递的参数会依次传递给arguments</li>\n<li>arguments可以使用方括号访问元素（arguments[0]表示传递进来的第一个参数，依次类推），用length属性确定传递进来多少个参数</li>\n<li>arguments对象只是与数组类似，但它并不是Array的实例\n<ul>\n<li>arguments当作数组一样使用</li>\n</ul>\n</li>\n</ul>\n<p>（2）new一个函数发生了什么？</p>\n<ul>\n<li>创建一个新对象</li>\n<li>执行构造函数，把属性方法设置给了对象</li>\n<li>将this指向这个新对象</li>\n<li>将新对象的__proto__指向构造函数的Prototype</li>\n<li>如果没有return别的对象，则返回该对象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">objectFactory</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个新对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>()</span><br><span class=\"line\">  <span class=\"comment\">// 第一个参数是传入的构造函数</span></span><br><span class=\"line\">  <span class=\"title class_\">Constructor</span> = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">shift</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 对象的原型指向构造函数原型</span></span><br><span class=\"line\">  obj.<span class=\"property\">__proto__</span> = <span class=\"title class_\">Constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\">  <span class=\"comment\">// 将属性值赋给对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> ret = <span class=\"title class_\">Constructor</span>.<span class=\"title function_\">apply</span>(obj, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> ret === <span class=\"string\">&#x27;obj&#x27;</span> ? ret || obj : obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">person</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"title function_\">objectFactory</span>(person, <span class=\"string\">&#x27;布兰&#x27;</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)</span><br></pre></td></tr></table></figure>\n<p>（3）闭包</p>\n<ul>\n<li>什么是闭包？<br>\nES5中存在两个作用域：全局作用域、函数作用域，函数作用域会在函数运行结束后自动销毁<br>\n作用域链：查找一个变量时会从自身的作用域开始沿着作用域链一直向上查找<br>\n闭包：利用了作用域，可以将函数内部的作用域的变量访问到</li>\n<li>闭包如何产生：\n<ul>\n<li>返回函数 （常见）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">out</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">b</span> () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"title function_\">out</span>()</span><br><span class=\"line\"><span class=\"title function_\">b</span>() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数当作参数传递 ：当作参数的函数可以访问到函数主体的内部作用域</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">baz</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">bar</span>(baz) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>js中有全局作用域和函数作用域，函数执行时所在的作用域是定义时的作用域，而不是调用时所在的作用域，注意要与this的指向区分开来。作用域在声明时就决定了，但是上下文执行时决定。<br>\n参考这篇文章：<a href=\"https://blog.csdn.net/qq_40755381/article/details/114213442\" target=\"_blank\">JavaScript：理解函数执行时的作用域</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a =<span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">baz</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">bar</span>(baz)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>() <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在定时器、事件监听、Ajax请求、跨窗口通信、Web Workers或者任何异步中，只要使用了回调函数，其实就是上面那种情况，将函数当作参数，也就是在使用闭包。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定时器</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timeHandler</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;111&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 事件监听</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#app&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;DOM Listener&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>立即执行函数：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> <span class=\"title function_\">IIFE</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 输出2</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>IIFE(立即执行函数表达式)创建闭包, 保存了全局作用域window和当前函数的作用域，因此可以全局的变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i ++)&#123;</span><br><span class=\"line\">  (<span class=\"keyword\">function</span>(<span class=\"params\">j</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j)</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>应用场景：柯里化（bind）、模块\n<ul>\n<li>柯里化：函数柯里化、前端经典面试题解密-add(1)(2)(3)(4) == 10到底是个啥？</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span> (...args) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">currying</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = []</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">_c</span> (...newArgs) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newArgs.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      args = [...args, ...newArgs]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _c</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> addCurry = <span class=\"title function_\">currying</span>(add)</span><br><span class=\"line\"><span class=\"keyword\">let</span> total = <span class=\"title function_\">addCurry</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>, <span class=\"number\">4</span>)(<span class=\"number\">5</span>, <span class=\"number\">6</span> ,<span class=\"number\">7</span>)()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(total) <span class=\"comment\">// 28</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点：内存泄漏，所以尽量少用</li>\n</ul>\n<p>一个常见的问题：如何解决下面的循环输出问题？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i ++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原因：setTimeout是宏任务，等同步任务执行完毕后i为6，所以会输出五个6</li>\n<li>解决办法：\n<ul>\n<li>使用立即执行函数：将变量i依次传入了每个作用域</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i ++)&#123;</span><br><span class=\"line\">  (<span class=\"keyword\">function</span>(<span class=\"params\">j</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j)</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用let，形成块级作用域</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i ++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（4）this、bind、call、apply</p>\n<ul>\n<li>this：谁调用，指向谁\n<ul>\n<li>默认绑定：在全局执行上下文中，this的指向全局对象。(在浏览器中，this引用 Window 对象)。</li>\n<li>隐式绑定：在函数执行上下文中，this 的值取决于该函数是如何被调用的。如果它被一个引用对象调用，那么this会被设置成那个对象，否则this的值被设置为全局对象或者undefined（在严格模式下）</li>\n<li>显示绑定:apply、call、bind</li>\n</ul>\n</li>\n<li>call、apply、bind用途：都是函数的方法、改变this的指向\n<ul>\n<li>call和apply的区别：call 方法接受的是若干个参数列表，而 apply 接收的是一个包含多个参数的数组。</li>\n</ul>\n</li>\n<li>手写call</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">call</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context, ...args</span>) &#123;</span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"variable language_\">this</span></span><br><span class=\"line\"></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = fn</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = context.<span class=\"title function_\">fn</span>(...args)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>手写apply</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">apply</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context, ...args</span>) &#123; </span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(context)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn)</span><br><span class=\"line\"></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = fn</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(context.<span class=\"property\">fn</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res  =context.<span class=\"title function_\">fn</span>(...args[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>bind与apply和call的区别在bind不会立即执行函数而是返回函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> a = &#123; </span><br><span class=\"line\">   <span class=\"attr\">name</span>: <span class=\"string\">&quot;Cherry&quot;</span>, </span><br><span class=\"line\">   <span class=\"attr\">fn</span>: <span class=\"keyword\">function</span> (<span class=\"params\">a,b</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( a + b) </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.<span class=\"property\">fn</span>; </span><br><span class=\"line\">b.<span class=\"title function_\">bind</span>(a,<span class=\"number\">1</span>,<span class=\"number\">2</span>)    <span class=\"comment\">// 函数不执行</span></span><br><span class=\"line\">b.<span class=\"title function_\">bind</span>(a,<span class=\"number\">1</span>,<span class=\"number\">2</span>)() <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>手写bind</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context, ...args</span>) &#123;</span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"variable language_\">this</span></span><br><span class=\"line\"></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = fn</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// bind和call、apply的区别</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = context.<span class=\"title function_\">fn</span>(...args)</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（5）箭头函数</p>\n<p>普通函数通过 function 关键字定义， this 无法结合词法作用域使用，在运行时绑定，只取决于函数的调用方式，在哪里被调用，调用位置。（取决于调用者，和是否独立运行）<br>\n箭头函数使用被称为 “胖箭头” 的操作 =&gt; 定义，箭头函数不应用普通函数 this 绑定的四种规则，而是根据外层（函数或全局）的作用域来决定 this，且箭头函数的绑定无法被修改（new 也不行）。</p>\n<ul>\n<li>箭头函数常用于回调函数中，包括事件处理器或定时器</li>\n<li>箭头函数和 var self = this，都试图取代传统的 this 运行机制，将 this 的绑定拉回到词法作用域</li>\n<li>没有原型、没有 this、没有 super，没有 arguments，没有 new.target</li>\n<li>不能通过 new 关键字调用\n<ul>\n<li>一个函数内部有两个方法：[[Call]] 和 [[Construct]]，在通过 new 进行函数调用时，会执行 [[construct]] 方法，创建一个实例对象，然后再执行这个函数体，将函数的 this 绑定在这个实例对象上</li>\n<li>当直接调用时，执行 [[Call]] 方法，直接执行函数体</li>\n<li>箭头函数没有 [[Construct]] 方法，不能被用作构造函数调用，当使用 new 进行函数调用时会报错。</li>\n</ul>\n</li>\n</ul>\n","prev":{"title":"初探Iterator","link":"2021/05/07/初探Interator"},"next":{"title":"React基础知识学习笔记","link":"2021/04/28/React基础知识学习笔记"},"plink":"http://example.com/2021/05/02/JavaScript中的数据类型/","toc":[{"id":"你不知道的javascript（中）","title":"你不知道的JavaScript（中）","index":"1","children":[{"id":"第一章、类型","title":"第一章、类型","index":"1.1"},{"id":"第二章、值","title":"第二章、值","index":"1.2"},{"id":"第三章、原生函数","title":"第三章、原生函数","index":"1.3"}]}],"reading_time":"4552 words in 30 min"}