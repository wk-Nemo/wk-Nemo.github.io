{"title":"初探Iterator","date":"2021-05-07T10:33:20.000Z","date_formatted":{"ll":"May 7, 2021","L":"05/07/2021","MM-DD":"05-07"},"link":"2021/05/07/初探Interator","categories":["JavaScript","前端"],"updated":"2023-05-07T09:40:09.452Z","content":"<p>今天在学习异步的过程中，发现Iterator和Generator函数息息相关，因此细读以下阮一峰老师的ES6中的《Iterator和for…of》</p>\n<h2 id=\"1.-iterator是什么\">1. Iterator是什么<a title=\"#1.-iterator是什么\" href=\"#1.-iterator是什么\"></a></h2>\n<p>Iterator（遍历器）它是一种接口，为了各种不同的数据结构提供统一的访问机制。任何数据结构，只要部署了Iterator接口，就可以完成遍历操作。</p>\n<h3 id=\"1.1-作用\">1.1 作用<a title=\"#1.1-作用\" href=\"#1.1-作用\"></a></h3>\n<p>Iterator的作用主要有三点：</p>\n<ul>\n<li>为各种数据结构提供一个统一、简介的访问的接口</li>\n<li>使得数据结构成员能按照某种次序排列</li>\n<li>创建了新的遍历命令——for…of循环</li>\n</ul>\n<h3 id=\"1.2-遍历过程\">1.2 遍历过程<a title=\"#1.2-遍历过程\" href=\"#1.2-遍历过程\"></a></h3>\n<p>Iterator的遍历过程如下：</p>\n<ul>\n<li>创建一个指针对象，指向当前数据结构的起始位置。</li>\n<li>第一次调用指针对象的next方法，将指针指向数据结构的第一个成员</li>\n<li>第二次调用指针对象的next方法，将指针指向数据结构的第二个成员</li>\n<li>…</li>\n<li>第n次调用指针对象的next方法，将指针指向数据结构的第n个成员</li>\n</ul>\n<p>每次调用next方法都会返回当前数据结构的成员信息——一个包含了value和done两个属性的对象</p>\n<ul>\n<li>value：当前成员的值</li>\n<li>done：一个布尔值，表示循环有没有结束</li>\n</ul>\n<h3 id=\"1.3-实现interator\">1.3 实现Interator<a title=\"#1.3-实现interator\" href=\"#1.3-实现interator\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">makeIterator</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> nextIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">next</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nextIndex &lt; arr.<span class=\"property\">length</span> ? </span><br><span class=\"line\">      &#123;<span class=\"attr\">value</span>: arr[nextIndex++], <span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125; :</span><br><span class=\"line\">      &#123;<span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> it = <span class=\"title function_\">makeIterator</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(it.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(it.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(it.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(it.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 4, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(it.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 5, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(it.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2.-默认iterator接口\">2. 默认Iterator接口<a title=\"#2.-默认iterator接口\" href=\"#2.-默认iterator接口\"></a></h2>\n<p>Iterator接口的目的是为所有的数据结构提供一种统一的访问机制，即for…of循环。当使用for…of循环遍历某种数据结构时，该循环会自动去寻找Iterator接口。</p>\n<h3 id=\"2.1-symbol.iterator属性\">2.1 Symbol.iterator属性<a title=\"#2.1-symbol.iterator属性\" href=\"#2.1-symbol.iterator属性\"></a></h3>\n<p>ES6规定，默认的Iterator接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要有Symbol.iterator属性，就可以认为是可便利的。调用Symbol.iterator方法，我们就会得到当前数据结构默认的的遍历器生成函数。</p>\n<h4 id=\"2.1.1-symbol.iterator\">2.1.1 Symbol.iterator<a title=\"#2.1.1-symbol.iterator\" href=\"#2.1.1-symbol.iterator\"></a></h4>\n<p>Symbol.iterator本身是一个表达式，返回Symbol对象中的iterator属性，这是一个预定义好的，类型为Symbol的特殊值，所以要放在方括号中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">\t[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]:<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">next</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">value</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">done</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t&#125;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Symbol.iterator方法对应的方法如果不是遍历器生成函数，那么解释引擎将会报错</li>\n<li>有了遍历器接口，数据结构就可以使用for…of和while循环遍历</li>\n</ul>\n<h4 id=\"2.1.2-原生具备iterator的数据结构\">2.1.2 原生具备Iterator的数据结构<a title=\"#2.1.2-原生具备iterator的数据结构\" href=\"#2.1.2-原生具备iterator的数据结构\"></a></h4>\n<p>ES6有一些数据结构原生具备Iterator接口，不用任何处理就可以被for…of 循环遍历，因为这些数据结构原生部署了Symbol.iterator。有如下几种数据结构：</p>\n<ul>\n<li>Array</li>\n<li>Map</li>\n<li>Set</li>\n<li>String</li>\n<li>TypedArray</li>\n<li>函数的arguments对象</li>\n<li>NodeList对象</li>\n</ul>\n<p>ps：注意Object没有原生部署Symbol.iterator，这是因为对象的遍历先后顺序是不确定的，Iterator从本质上来说是一种线性处理。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> it = arr[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(it.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(it.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(it.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(it.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 4, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(it.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 5, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(it.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2.2-部署iterator\">2.2 部署Iterator<a title=\"#2.2-部署iterator\" href=\"#2.2-部署iterator\"></a></h3>\n<h4 id=\"2.2.1-类部署iterator\">2.2.1 类部署Iterator<a title=\"#2.2.1-类部署iterator\" href=\"#2.2.1-类部署iterator\"></a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RangeIterator</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> (start, stop) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = start;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stop</span> = stop;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">value</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">stop</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> ++;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">false</span>, <span class=\"attr\">value</span>: value &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">true</span>, <span class=\"attr\">value</span>: <span class=\"literal\">undefined</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">range</span> (start, stop) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RangeIterator</span>(start, stop);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> value <span class=\"keyword\">of</span> <span class=\"title function_\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>)) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n<h4 id=\"2.2.2-为对象添加一个iterator接口\">2.2.2 为对象添加一个Iterator接口<a title=\"#2.2.2-为对象添加一个iterator接口\" href=\"#2.2.2-为对象添加一个iterator接口\"></a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">data</span>: [<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>],</span><br><span class=\"line\">\t[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        \t<span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span> (index &lt; self.<span class=\"property\">data</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        \t\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        \t\t\t\t<span class=\"attr\">value</span>: self.<span class=\"property\">data</span>[index++],</span><br><span class=\"line\">        \t\t\t\t<span class=\"attr\">done</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        \t\t\t&#125;;</span><br><span class=\"line\">        \t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        \t\t\t<span class=\"keyword\">return</span> &#123; </span><br><span class=\"line\">        \t\t\t\t<span class=\"attr\">value</span>:<span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        \t\t\t\t<span class=\"attr\">done</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        \t\t\t&#125;;</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2.2.3-类数组的对象添加一个iterator接口\">2.2.3 类数组的对象添加一个Iterator接口<a title=\"#2.2.3-类数组的对象添加一个iterator接口\" href=\"#2.2.3-类数组的对象添加一个iterator接口\"></a></h4>\n<p>对于类数组对象，即存在键名和length属性，部署Iterator有一个简便的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">NodeList</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>];</span><br><span class=\"line\"><span class=\"title class_\">NodeList</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] = [][<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>];</span><br></pre></td></tr></table></figure>\n<p>再看一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> iterable = &#123;</span><br><span class=\"line\">\t<span class=\"number\">0</span>: <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"number\">1</span>: <span class=\"string\">&#x27;b&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"number\">2</span>: <span class=\"string\">&#x27;c&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">length</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">\t[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]: <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a</span></span><br><span class=\"line\"><span class=\"comment\">// b</span></span><br><span class=\"line\"><span class=\"comment\">// c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意普通对象无法实现，必须是类数组对象才可以</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterable = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">a</span>: <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">b</span>: <span class=\"string\">&#x27;b&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">c</span>: <span class=\"string\">&#x27;c&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">length</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">\t[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]: <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> iterable) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// undeined</span></span><br><span class=\"line\"><span class=\"comment\">// undeined</span></span><br><span class=\"line\"><span class=\"comment\">// undeined</span></span><br></pre></td></tr></table></figure>\n<p>​</p>\n<h3 id=\"3.-调用iterator接口的场合\">3. 调用Iterator接口的场合<a title=\"#3.-调用iterator接口的场合\" href=\"#3.-调用iterator接口的场合\"></a></h3>\n<p>有一些场合会默认调用Iterator接口，即调用Symbol.inerator方法</p>\n<ul>\n<li>解构解析</li>\n<li>扩展运算符</li>\n<li>yield*</li>\n<li>任何接受数组作为参数的场合\n<ul>\n<li>for…of</li>\n<li>Array.from()</li>\n<li>Map()、Set()、WeakMap()和WeakSet()</li>\n<li>Promise.all()</li>\n<li>Promise.race()</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4.-js中的循环\">4. js中的循环<a title=\"#4.-js中的循环\" href=\"#4.-js中的循环\"></a></h3>\n<h5 id=\"（1）for循环，最原始的方法\">（1）for循环，最原始的方法<a title=\"#（1）for循环，最原始的方法\" href=\"#（1）for循环，最原始的方法\"></a></h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; <span class=\"number\">10</span>; index++) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>缺点：比较麻烦</p>\n<h5 id=\"（2）数组内置foreach方法\">（2）数组内置forEach方法<a title=\"#（2）数组内置foreach方法\" href=\"#（2）数组内置foreach方法\"></a></h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myArray.forEach(function (value) &#123;</span><br><span class=\"line\">\tconsole.log(value);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>缺点：无法中途跳出循环，break命令和return命令都不能凑效</p>\n<h5 id=\"（3）for...in-循环获取键名\">（3）for…in 循环获取键名<a title=\"#（3）for...in-循环获取键名\" href=\"#（3）for...in-循环获取键名\"></a></h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> myArray) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myArray[index])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>缺点：for…in是为了遍历对象而设计的，不适合用于遍历数组</p>\n<ul>\n<li>数组的键名都是数字，但是for…in都是以字符串作为键名，“0”、“1”、“2”等。</li>\n<li>for…in不仅会遍历数字键名，还会便利其他添加的键</li>\n<li>某些情况，for…in循环会以任意顺序遍历键名</li>\n</ul>\n<h5 id=\"（4）for...of-循环获取键值\">（4）for…of 循环获取键值<a title=\"#（4）for...of-循环获取键值\" href=\"#（4）for...of-循环获取键值\"></a></h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">arr.<span class=\"property\">foo</span> = <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i) <span class=\"comment\">// 0, 1, 2, foo</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for...of 不会返回arr的foo属性 </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i) <span class=\"comment\">// 3, 4, 5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>简洁</li>\n<li>可以和break、continue和return配合使用</li>\n<li>提供了遍历所有数据结构的统一接口</li>\n</ul>\n","prev":{"title":"Generator函数","link":"2021/05/08/Generator函数"},"next":{"title":"JavaScript中的数据类型","link":"2021/05/02/JavaScript中的数据类型"},"plink":"http://example.com/2021/05/07/初探Interator/","toc":[{"id":"1.-iterator是什么","title":"1. Iterator是什么","index":"1","children":[{"id":"1.1-作用","title":"1.1 作用","index":"1.1"},{"id":"1.2-遍历过程","title":"1.2 遍历过程","index":"1.2"},{"id":"1.3-实现interator","title":"1.3 实现Interator","index":"1.3"}]},{"id":"2.-默认iterator接口","title":"2. 默认Iterator接口","index":"2","children":[{"id":"2.1-symbol.iterator属性","title":"2.1 Symbol.iterator属性","index":"2.1"},{"id":"2.2-部署iterator","title":"2.2 部署Iterator","index":"2.2"},{"id":"3.-调用iterator接口的场合","title":"3. 调用Iterator接口的场合","index":"2.3"},{"id":"4.-js中的循环","title":"4. js中的循环","index":"2.4"}]}],"reading_time":"1596 words in 11 min"}