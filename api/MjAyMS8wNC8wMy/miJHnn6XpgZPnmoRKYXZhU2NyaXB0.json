{"title":"我知道的JavaScript","date":"2021-04-02T17:25:44.000Z","date_formatted":{"ll":"Apr 3, 2021","L":"04/03/2021","MM-DD":"04-03"},"link":"2021/04/03/我知道的JavaScript","categories":["JavaScript","前端"],"updated":"2023-05-07T09:44:31.509Z","content":"<h2 id=\"1.-数据类型\">1. 数据类型<a title=\"#1.-数据类型\" href=\"#1.-数据类型\"></a></h2>\n<ul>\n<li>基本的数据类型：undefined null boolean number string symbol  BigInt</li>\n<li>引用类型： Object Array Data  Function Regular String Number Boolean</li>\n</ul>\n<h3 id=\"（1）0.1-+-0.2-===-0.3-？\">（1）0.1 + 0.2 === 0.3 ？<a title=\"#（1）0.1-+-0.2-===-0.3-？\" href=\"#（1）0.1-+-0.2-===-0.3-？\"></a></h3>\n<p>0.1和0.2在转换成二进制后会无限循环，由于标准位数的限制后面多余的位数会被截掉，此时就已经出现了精度的损失，相加后因浮点数小数位的限制而截断的二进制数字在转换为十进制就会变成0.30000000000000004。</p>\n<h3 id=\"（2）null使用typeof会输出object\">（2）null使用typeof会输出object<a title=\"#（2）null使用typeof会输出object\" href=\"#（2）null使用typeof会输出object\"></a></h3>\n<p>这是一个历史遗留的bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象然而 null 表示为全零，所以将它错误的判断为 object</p>\n<h3 id=\"（3）包装类\">（3）包装类<a title=\"#（3）包装类\" href=\"#（3）包装类\"></a></h3>\n<ul>\n<li>‘1’.toString()的执行过程</li>\n<li>var s = new Object(‘1’);</li>\n<li>s.toString();</li>\n<li>s = null;</li>\n</ul>\n<h3 id=\"（4）symbol创建一个独一无二的数\">（4）symbol创建一个独一无二的数<a title=\"#（4）symbol创建一个独一无二的数\" href=\"#（4）symbol创建一个独一无二的数\"></a></h3>\n<h3 id=\"（5）bigint\">（5）BigInt<a title=\"#（5）bigint\" href=\"#（5）bigint\"></a></h3>\n<p>用于当整数值大于Number数据类型支持的范围时。这种数据类型允许我们安全地对大整数执行算术操作，表示高分辨率的时间戳，使用大整数id，等等，而不需要使用库。</p>\n<h2 id=\"2.-js数据类型检测\">2. js数据类型检测<a title=\"#2.-js数据类型检测\" href=\"#2.-js数据类型检测\"></a></h2>\n<h3 id=\"（1）typeof\">（1）typeof<a title=\"#（1）typeof\" href=\"#（1）typeof\"></a></h3>\n<ul>\n<li>对于原始类型来说，除了 null 都可以调用typeof显示正确的类型</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span> <span class=\"comment\">// &#x27;number&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;1&#x27;</span> <span class=\"comment\">// &#x27;string&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> <span class=\"comment\">// &#x27;undefined&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span> <span class=\"comment\">// &#x27;boolean&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span>() <span class=\"comment\">// &#x27;symbol&#x27; </span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>对于引用数据类型，除了函数之外，都会显示&quot;object&quot;。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">// &#x27;object&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125; <span class=\"comment\">// &#x27;object&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"variable language_\">console</span>.<span class=\"property\">log</span> <span class=\"comment\">// &#x27;function&#x27; </span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>因此采用typeof判断对象数据类型是不合适的，采用instanceof会更好，instanceof的原理是基于原型链的查询，只要处于原型链中，判断永远为true</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Person</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125; </span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>() </span><br><span class=\"line\">p1 <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Person</span> <span class=\"comment\">// true </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">&#x27;hello world&#x27;</span> </span><br><span class=\"line\">str1 <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span> <span class=\"comment\">// false </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;hello world&#x27;</span>) </span><br><span class=\"line\">str2 <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span> <span class=\"comment\">// true </span></span><br></pre></td></tr></table></figure>\n<h3 id=\"（2）instanceof手动实现\">（2）instanceof手动实现<a title=\"#（2）instanceof手动实现\" href=\"#（2）instanceof手动实现\"></a></h3>\n<p>核心: 原型链的向上查找。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myInstanceof</span>(<span class=\"params\">left, right</span>) &#123; </span><br><span class=\"line\">    <span class=\"comment\">//基本数据类型直接返回false </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> left !== <span class=\"string\">&#x27;object&#x27;</span> || left === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\">    <span class=\"comment\">//getProtypeOf是Object对象自带的一个方法，能够拿到参数的原型对象 </span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> proto = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(left); </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123; </span><br><span class=\"line\">        <span class=\"comment\">//查找到尽头，还没找到 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(proto == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\">        <span class=\"comment\">//找到相同的原型对象 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(proto == right.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; </span><br><span class=\"line\">        proto = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(proto); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myInstanceof</span>(<span class=\"params\">left, right</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> left === <span class=\"literal\">null</span> || <span class=\"keyword\">typeof</span> left !== <span class=\"string\">&#x27;object&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> proto = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(left)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (proto == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (proto == right.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        proto = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototype</span>(proto)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（3）深拷贝和浅拷贝\">（3）深拷贝和浅拷贝<a title=\"#（3）深拷贝和浅拷贝\" href=\"#（3）深拷贝和浅拷贝\"></a></h3>\n<ul>\n<li>浅拷贝：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">shallowClone</span>(<span class=\"params\">obj</span>) &#123; </span><br><span class=\"line\">  <span class=\"keyword\">let</span> cloneObj = &#123;&#125;; </span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> obj) &#123; </span><br><span class=\"line\">    cloneObj[i] = obj[i]; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">return</span> cloneObj; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<ul>\n<li>深拷贝：\n<ul>\n<li>考虑基础类型</li>\n<li>引用类型\n<ul>\n<li>RegExp、Date、函数 不是 JSON 安全的</li>\n<li>会丢失 constructor，所有的构造函数都指向 Object</li>\n<li>破解循环引用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepClone</span>(<span class=\"params\">obj</span>) &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">&#x27;object&#x27;</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = obj.<span class=\"property\">constructor</span> === <span class=\"title class_\">Array</span> ? [] : &#123;&#125;; </span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123; </span><br><span class=\"line\">      result[i] = <span class=\"keyword\">typeof</span> obj[i] === <span class=\"string\">&#x27;object&#x27;</span> ? <span class=\"title function_\">deepClone</span>(obj[i]) : obj[i]; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = obj; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepCopy</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object.<span class=\"property\">constructor</span> === <span class=\"string\">&#x27;Array&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = []</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">            result[i] = <span class=\"keyword\">typeof</span> obj[i] === <span class=\"string\">&#x27;object&#x27;</span> ? <span class=\"title function_\">deepCopy</span>(obj[i]) : obj[i];]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = obj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（4）判断arr是不是数组的方法\">（4）判断arr是不是数组的方法<a title=\"#（4）判断arr是不是数组的方法\" href=\"#（4）判断arr是不是数组的方法\"></a></h3>\n<ul>\n<li>根据原型链的两种方法，但是原型链可能会修改，所以有时候不靠谱\n<ul>\n<li>arr instanceof Array  === true</li>\n<li>arr.<strong>proto</strong>.constructor === Array</li>\n</ul>\n</li>\n<li>Object.prototype.toString.apply(arr) === “[object Array]”</li>\n<li>官方提供方法，可靠可行 Array.isArray(arr) === true</li>\n</ul>\n<h2 id=\"3.-数据类型之转换\">3. 数据类型之转换<a title=\"#3.-数据类型之转换\" href=\"#3.-数据类型之转换\"></a></h2>\n<ul>\n<li>\n<p>[] ==![]</p>\n<ul>\n<li>==两边都要转换成数字</li>\n<li>[]转换成数字为0</li>\n<li>![]布尔值为false ------ false转数字为0</li>\n<li>结果为true</li>\n</ul>\n</li>\n<li>\n<p>js的转换类型</p>\n<ul>\n<li>转成数字</li>\n<li>转成布尔值</li>\n<li>转成字符串</li>\n</ul>\n</li>\n<li>\n<p>==和===</p>\n<ul>\n<li>===严格相等，不经值要相等，类型也要相等</li>\n<li>==涉及一些类型转换</li>\n</ul>\n</li>\n<li>\n<p>对象转换成原始类型<br>\n对象转原始类型，会调用内置的[ToPrimitive]函数，对于该函数而言，其逻辑如下：</p>\n<ol>\n<li>如果Symbol.toPrimitive()方法，优先调用再返回</li>\n<li>调用valueOf()，如果转换为原始类型，则返回</li>\n<li>调用toString()，如果转换为原始类型，则返回</li>\n<li>如果都没有返回原始类型，会报错</li>\n</ol>\n</li>\n<li>\n<p>如何if(a ==1 &amp;&amp; a==2)成立</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">valueOf</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> ++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4.-函数（function）\">4. 函数（Function）<a title=\"#4.-函数（function）\" href=\"#4.-函数（function）\"></a></h2>\n<p>自己的博客链接：<a href=\"http://blog.wutortoise.cn/2021/02/07/%E5%87%BD%E6%95%B0\" target=\"_blank\">函数</a></p>\n<h3 id=\"（1）函数的参数\">（1）函数的参数<a title=\"#（1）函数的参数\" href=\"#（1）函数的参数\"></a></h3>\n<ul>\n<li>你可以传递一个参数进函数，不论你在定义函数时规定了多少个参数，因为你传递的参数会依次传递给arguments</li>\n<li>arguments可以使用方括号访问元素（arguments[0]表示传递进来的第一个参数，依次类推），用length属性确定传递进来多少个参数</li>\n<li>arguments对象只是与数组类似，但它并不是Array的实例\n<ul>\n<li>arguments当作数组一样使用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（2）new一个函数发生了什么？\">（2）new一个函数发生了什么？<a title=\"#（2）new一个函数发生了什么？\" href=\"#（2）new一个函数发生了什么？\"></a></h3>\n<ul>\n<li>创造一个全新的对象</li>\n<li>这个对象会被执行 [[Prototype]] 连接，将这个新对象的 [[Prototype]] 链接到这个构造函数.prototype 所指向的对象</li>\n<li>这个新对象会绑定到函数调用的 this</li>\n<li>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象</li>\n</ul>\n<h3 id=\"（3）闭包\">（3）闭包<a title=\"#（3）闭包\" href=\"#（3）闭包\"></a></h3>\n<ul>\n<li>\n<p>什么是闭包？<br>\nES5中存在两个作用域：全局作用域、函数作用域，函数作用域会在函数运行结束后自动销毁<br>\n作用域链：查找一个变量时会从自身的作用域开始沿着作用域链一直向上查找<br>\n闭包：利用了作用域，可以将函数内部的作用域的变量访问到</p>\n</li>\n<li>\n<p>闭包如何产生：</p>\n<ul>\n<li>返回函数 （常见）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">out</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">b</span> () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"title function_\">out</span>()</span><br><span class=\"line\"><span class=\"title function_\">b</span>() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数当作参数传递 ：当作参数的函数可以访问到函数主体的内部作用域</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">baz</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">bar</span>(baz) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>js中有全局作用域和函数作用域，函数执行时所在的作用域是定义时的作用域，而不是调用时所在的作用域，注意要与this的指向区分开来。作用域在声明时就决定了，但是上下文执行时决定。<br>\n参考这篇文章：<a href=\"https://blog.csdn.net/qq_40755381/article/details/114213442\" target=\"_blank\">JavaScript：理解函数执行时的作用域</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a =<span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">baz</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">bar</span>(baz)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">foo</span>() <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在定时器、事件监听、Ajax请求、跨窗口通信、Web Workers或者任何异步中，只要使用了回调函数，其实就是上面那种情况，将函数当作参数，也就是在使用闭包。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定时器</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timeHandler</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;111&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 事件监听</span></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#app&#x27;</span>).<span class=\"title function_\">click</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;DOM Listener&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>立即执行函数：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> <span class=\"title function_\">IIFE</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 输出2</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>IIFE(立即执行函数表达式)创建闭包, 保存了全局作用域window和当前函数的作用域，因此可以全局的变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i ++)&#123;</span><br><span class=\"line\">  (<span class=\"keyword\">function</span>(<span class=\"params\">j</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j)</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>应用场景：柯里化（bind）、模块\n<ul>\n<li>柯里化：函数柯里化、前端经典面试题解密-add(1)(2)(3)(4) == 10到底是个啥？</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span> (...args) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">currying</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = []</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">_c</span> (...newArgs) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newArgs.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      args = [...args, ...newArgs]</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _c</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> addCurry = <span class=\"title function_\">currying</span>(add)</span><br><span class=\"line\"><span class=\"keyword\">let</span> total = <span class=\"title function_\">addCurry</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>, <span class=\"number\">4</span>)(<span class=\"number\">5</span>, <span class=\"number\">6</span> ,<span class=\"number\">7</span>)()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(total) <span class=\"comment\">// 28</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>缺点：内存泄漏，所以尽量少用</li>\n</ul>\n<p>一个常见的问题：如何解决下面的循环输出问题？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i ++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>原因：setTimeout是宏任务，等同步任务执行完毕后i为6，所以会输出五个6</li>\n<li>解决办法：\n<ul>\n<li>使用立即执行函数：将变量i依次传入了每个作用域</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i ++)&#123;</span><br><span class=\"line\">  (<span class=\"keyword\">function</span>(<span class=\"params\">j</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(j)</span><br><span class=\"line\">      &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用let，形成块级作用域</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i ++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（4）this、bind、call、apply\">（4）this、bind、call、apply<a title=\"#（4）this、bind、call、apply\" href=\"#（4）this、bind、call、apply\"></a></h3>\n<ul>\n<li>this：谁调用，指向谁\n<ul>\n<li>默认绑定：在全局执行上下文中，this的指向全局对象。(在浏览器中，this引用 Window 对象)。</li>\n<li>隐式绑定：在函数执行上下文中，this 的值取决于该函数是如何被调用的。如果它被一个引用对象调用，那么this会被设置成那个对象，否则this的值被设置为全局对象或者undefined（在严格模式下）</li>\n<li>显示绑定:apply、call、bind</li>\n</ul>\n</li>\n<li>call、apply、bind用途：都是函数的方法、改变this的指向\n<ul>\n<li>call和apply的区别：call 方法接受的是若干个参数列表，而 apply 接收的是一个包含多个参数的数组。</li>\n</ul>\n</li>\n<li>手写call</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">call</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context, ...args</span>) &#123;</span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"variable language_\">this</span></span><br><span class=\"line\"></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = fn</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = context.<span class=\"title function_\">fn</span>(...args)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>手写apply</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">apply</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context, ...args</span>) &#123; </span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(context)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn)</span><br><span class=\"line\"></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = fn</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(context.<span class=\"property\">fn</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res  =context.<span class=\"title function_\">fn</span>(...args[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>bind与apply和call的区别在bind不会立即执行函数而是返回函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> a = &#123; </span><br><span class=\"line\">   <span class=\"attr\">name</span>: <span class=\"string\">&quot;Cherry&quot;</span>, </span><br><span class=\"line\">   <span class=\"attr\">fn</span>: <span class=\"keyword\">function</span> (<span class=\"params\">a,b</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( a + b) </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.<span class=\"property\">fn</span>; </span><br><span class=\"line\">b.<span class=\"title function_\">bind</span>(a,<span class=\"number\">1</span>,<span class=\"number\">2</span>)    <span class=\"comment\">// 函数不执行</span></span><br><span class=\"line\">b.<span class=\"title function_\">bind</span>(a,<span class=\"number\">1</span>,<span class=\"number\">2</span>)() <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>手写bind</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">context, ...args</span>) &#123;</span><br><span class=\"line\">  context = context || <span class=\"variable language_\">window</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"variable language_\">this</span></span><br><span class=\"line\"></span><br><span class=\"line\">  context.<span class=\"property\">fn</span> = fn</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// bind和call、apply的区别</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = context.<span class=\"title function_\">fn</span>(...args)</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（5）箭头函数\">（5）箭头函数<a title=\"#（5）箭头函数\" href=\"#（5）箭头函数\"></a></h3>\n<p>普通函数通过 function 关键字定义， this 无法结合词法作用域使用，在运行时绑定，只取决于函数的调用方式，在哪里被调用，调用位置。（取决于调用者，和是否独立运行）<br>\n箭头函数使用被称为 “胖箭头” 的操作 =&gt; 定义，箭头函数不应用普通函数 this 绑定的四种规则，而是根据外层（函数或全局）的作用域来决定 this，且箭头函数的绑定无法被修改（new 也不行）。</p>\n<ul>\n<li>箭头函数常用于回调函数中，包括事件处理器或定时器</li>\n<li>箭头函数和 var self = this，都试图取代传统的 this 运行机制，将 this 的绑定拉回到词法作用域</li>\n<li>没有原型、没有 this、没有 super，没有 arguments，没有 new.target</li>\n<li>不能通过 new 关键字调用\n<ul>\n<li>一个函数内部有两个方法：[[Call]] 和 [[Construct]]，在通过 new 进行函数调用时，会执行 [[construct]] 方法，创建一个实例对象，然后再执行这个函数体，将函数的 this 绑定在这个实例对象上</li>\n<li>当直接调用时，执行 [[Call]] 方法，直接执行函数体</li>\n<li>箭头函数没有 [[Construct]] 方法，不能被用作构造函数调用，当使用 new 进行函数调用时会报错。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5.-object\">5. Object<a title=\"#5.-object\" href=\"#5.-object\"></a></h2>\n<p>object的相关API：<a href=\"https://wangdoc.com/javascript/stdlib/object.html\" target=\"_blank\">Object 对象</a></p>\n<p>自己的博客：<a href=\"http://blog.wutortoise.cn/2021/01/15/Object%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" target=\"_blank\">Object类型和面向对象的程序设计</a></p>\n<h3 id=\"（1）-原型、原型链\">（1） 原型、原型链<a title=\"#（1）-原型、原型链\" href=\"#（1）-原型、原型链\"></a></h3>\n<ul>\n<li>\n<p>原型对象和构造函数</p>\n<ul>\n<li>js中每定义一个函数，会有一个自带的prototype指向函数的原型对象</li>\n<li>函数经过new后，成为了构造函数会返回一个全新的实例对象，具有一个__proto__属性，指向构造函数的原型函数</li>\n</ul>\n</li>\n<li>\n<p>说说原型链</p>\n<ul>\n<li>\n<p>JavaScript实例对象通过__proto__ 指向父类对象，直到指向Object对象为止，这样就形成了一个原型指向的链条, 即原型链。</p>\n</li>\n<li>\n<p>对象的 hasOwnProperty() 来检查对象自身中是否含有该属性</p>\n</li>\n<li>\n<p>使用 in 检查对象中是否含有某个属性时，如果对象中没有但是原型链中有，也会返回 true</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（2）js如何实现继承\">（2）js如何实现继承<a title=\"#（2）js如何实现继承\" href=\"#（2）js如何实现继承\"></a></h3>\n<ul>\n<li>借助call</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent1</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent1&#x27;</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child1</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">  <span class=\"title class_\">Parent1</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>); </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child1&#x27;</span> </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Child1</span>); </span><br></pre></td></tr></table></figure>\n<p>这样写的时候子类虽然能够拿到父类的属性值，但是问题是父类原型对象中一旦存在方法那么子类无法继承。那么引出下面的方法。</p>\n<ul>\n<li>借助原型链</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent2</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent2&#x27;</span>; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">play</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child2</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child2&#x27;</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"title class_\">Child2</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent2</span>(); </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Child2</span>()); </span><br></pre></td></tr></table></figure>\n<p>潜在的问题：多个实例对象绑定的是同一个原型，改变一个会影响另外一个</p>\n<ul>\n<li>组合</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent3</span> () &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent3&#x27;</span>; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">play</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child3</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">  <span class=\"title class_\">Parent3</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>); </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child3&#x27;</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"title class_\">Child3</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent3</span>(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child3</span>(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"keyword\">new</span> <span class=\"title class_\">Child3</span>(); </span><br><span class=\"line\">s3.<span class=\"property\">play</span>.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>); </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s3.<span class=\"property\">play</span>, s4.<span class=\"property\">play</span>); </span><br></pre></td></tr></table></figure>\n<p>又徒增了一个新问题，那就是Parent3的构造函数会多执行了一次（Child3.prototype = new Parent3();）</p>\n<ul>\n<li>寄生组合继承</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent5</span> () &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent5&#x27;</span>; </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">play</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child5</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">  <span class=\"title class_\">Parent5</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>); </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">type</span> = <span class=\"string\">&#x27;child5&#x27;</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"title class_\">Child5</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Parent5</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); </span><br><span class=\"line\"><span class=\"title class_\">Child5</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Child5</span>; </span><br></pre></td></tr></table></figure>\n<ul>\n<li>class继承</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>(name)</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6.-异步机制\">6. 异步机制<a title=\"#6.-异步机制\" href=\"#6.-异步机制\"></a></h2>\n<p>异步机制前先了解一下js里面的事件执行机制：<a href=\"https://juejin.cn/post/6844904113877188622\" target=\"_blank\">宏任务/微任务的个人理解</a></p>\n<h3 id=\"（1）js是单线程\">（1）js是单线程<a title=\"#（1）js是单线程\" href=\"#（1）js是单线程\"></a></h3>\n<p>但是浏览器的渲染进程是多线程的，如下：</p>\n<ul>\n<li>JS引擎线程</li>\n<li>事件触发线程</li>\n<li>定时触发器线程</li>\n<li>异步http请求线程</li>\n<li>GUI渲染线程<br>\n单线程就是一次只能只能一个任务，有多个任务的话需要一个个的执行，为了解决异步事件，js引擎产生了Event Loop机制。</li>\n</ul>\n<h3 id=\"（2）宏任务\">（2）宏任务<a title=\"#（2）宏任务\" href=\"#（2）宏任务\"></a></h3>\n<ul>\n<li>在 JS 中，大部分的任务都是在主线程上执行，常见的任务有:\n<ul>\n<li>渲染事件</li>\n<li>用户交互事件</li>\n<li>js脚本执行</li>\n<li>网络请求、文件读写完成事件等等。</li>\n<li>setTimeout、setInterval</li>\n</ul>\n</li>\n<li>为了让这些事件有条不紊地进行，JS引擎需要对之执行的顺序做一定的安排，V8 其实采用的是一种队列的方式来存储这些任务， 即先进来的先执行。</li>\n</ul>\n<h3 id=\"（3）微任务\">（3）微任务<a title=\"#（3）微任务\" href=\"#（3）微任务\"></a></h3>\n<ul>\n<li>对每个宏任务而言，内部有一个都有一个微任务</li>\n<li>引入微任务的初衷是为了解决异步回调的问题\n<ul>\n<li>将异步回调进行宏任务队列的入队操作。\n<ul>\n<li>采用第一种方式，那么执行回调的时机应该是在前面所有的宏任务完成之后，倘若现在的任务队列非常长，那么回调迟迟得不到执行，造成应用卡顿。</li>\n</ul>\n</li>\n<li>将异步回调放到当前宏任务的末尾。\n<ul>\n<li>为了规避第一种方式中的这样的问题，V8 引入了第二种方式，这就是微任务的解决方式。在每一个宏任务中定义一个微任务队列，当该宏任务执行完成，会检查其中的微任务队列，如果为空则直接执行下一个宏任务，如果不为空，则依次执行微任务，执行完成才去执行下一个宏任务。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>常见的微任务有：\n<ul>\n<li>MutationObserver</li>\n<li>Promise.then(或.reject) 以及以</li>\n<li>Promise 为基础开发的其他技术(比如fetch API)</li>\n<li>V8 的垃圾回收过程。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"（4）eventloop\">（4）EventLoop<a title=\"#（4）eventloop\" href=\"#（4）eventloop\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>); </span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;timeout&#x27;</span>); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;resolve&#x27;</span>); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;end&#x27;</span>); </span><br></pre></td></tr></table></figure>\n<p>（1）先执行同步队列的任务，因此先打印start和end<br>\n（2）setTimeout 作为一个宏任务放入宏任务队列<br>\n（3）Promise.then作为一个为微任务放入到微任务队列<br>\n（4）Promise.resolve()将Promise的状态变为已成功，即相当于本次宏任务执行完，检查微任务队列，发现一个Promise.then, 执行<br>\n（5）接下来进入到下一个宏任务——setTimeout, 执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise1&#x27;</span>)   </span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout2&#x27;</span>) </span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>) </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123; </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout1&#x27;</span>) </span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123; </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise2&#x27;</span>)     </span><br><span class=\"line\">  &#125;) </span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>); </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// start </span></span><br><span class=\"line\"><span class=\"comment\">// Promise1 </span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout1 </span></span><br><span class=\"line\"><span class=\"comment\">// Promise2 </span></span><br><span class=\"line\"><span class=\"comment\">// setTimeout2 </span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Promise\n<ul>\n<li>Promise解决了什么问题</li>\n<li>手写Promise</li>\n<li>手写resolve() reject() finally()</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7.-常见手写题\">7. 常见手写题<a title=\"#7.-常见手写题\" href=\"#7.-常见手写题\"></a></h2>\n<h3 id=\"函数部分\">函数部分<a title=\"#函数部分\" href=\"#函数部分\"></a></h3>\n<p>（1）参数列表转换成数组<br>\n因为arguments本身并不能调用数组方法，它是一个另外一种对象类型，只不过属性从0开始排，依次为0，1，2…最后还有callee和length属性。我们也把这样的对象称为类数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数参数转数组</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum1</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum + cur))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum2</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum + cur))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum3</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = [...<span class=\"variable language_\">arguments</span>]</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum.<span class=\"title function_\">concat</span>(cur)</span><br><span class=\"line\">    &#125;, []))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum4</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">concat</span>.<span class=\"title function_\">apply</span>([], <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum + cur))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）call、apply、bind：见上面函数<br>\n（3）函数柯里化：见上面函数</p>\n<h3 id=\"对象部分\">对象部分<a title=\"#对象部分\" href=\"#对象部分\"></a></h3>\n<p>（1）instanceof<br>\ninstanceOf()的原理就是沿着原型链一直查找</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">instanceOf</span>(<span class=\"params\">left, right</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> proto =left.<span class=\"property\">__proto__</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(proto)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (proto === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (proto === right.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    proto = proto.<span class=\"property\">__proto__</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">instanceOf</span>(arr, <span class=\"title class_\">Array</span>))</span><br></pre></td></tr></table></figure>\n<p>（2）new</p>\n<ul>\n<li>创建一个新对象</li>\n<li>执行构造函数，把属性方法设置给了对象</li>\n<li>将this指向这个新对象</li>\n<li>将新对象的__proto__指向构造函数的Prototype</li>\n<li>如果没有return别的对象，则返回该对象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">objectFactory</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个新对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>()</span><br><span class=\"line\">  <span class=\"comment\">// 第一个参数是传入的构造函数</span></span><br><span class=\"line\">  <span class=\"title class_\">Constructor</span> = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">shift</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 对象的原型指向构造函数原型</span></span><br><span class=\"line\">  obj.<span class=\"property\">__proto__</span> = <span class=\"title class_\">Constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\">  <span class=\"comment\">// 将属性值赋给对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> ret = <span class=\"title class_\">Constructor</span>.<span class=\"title function_\">apply</span>(obj, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> ret === <span class=\"string\">&#x27;obj&#x27;</span> ? ret || obj : obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">person</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"title function_\">objectFactory</span>(person, <span class=\"string\">&#x27;布兰&#x27;</span>, <span class=\"number\">12</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p)</span><br></pre></td></tr></table></figure>\n<p>（3）浅拷贝和深拷贝</p>\n<ul>\n<li>浅拷贝</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">shallowCopy</span> (obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newObj = obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span> ? [] : &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// in会遍历到原型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (obj.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">            newObj[key] = obj[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newObj</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<ul>\n<li>深拷贝</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">deepClone</span> = (<span class=\"params\">target</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cloneTarget = <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(target) ? [] : &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> target === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; target !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 是对象或者数组的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">                cloneTarget[key] = <span class=\"title function_\">deepClone</span>(obj[key])</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cloneTarget[key] = obj[key]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cloneTarget</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（4）继承的实现：见上面<br>\n（5）Object.create()：可以指定原型和对象的属性，返回一个新对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\">create</span> = <span class=\"keyword\">function</span> (<span class=\"params\">proto, propertyObject = <span class=\"literal\">undefined</span></span>) &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> proto !== <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"keyword\">typeof</span> proto !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Object prototype may only be an Object or null.&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (propertyObject === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Cannot convert undefined or null to object&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  F.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = proto</span><br><span class=\"line\">  <span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> <span class=\"title function_\">F</span>()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (propertyObject != <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperties</span>(obj, propertyObject)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (proto === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    obj.<span class=\"property\">__pro__</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组部分\">数组部分<a title=\"#数组部分\" href=\"#数组部分\"></a></h3>\n<p>（1）数组扁平化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组扁平化</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ary = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]], <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(ary)</span><br><span class=\"line\"><span class=\"comment\">// 转换成JSON，然后用正则替换掉[],最后转成数组</span></span><br><span class=\"line\">ary1 = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(\\[|\\])/g</span>,<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 递归实现</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = []</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">re</span>(<span class=\"params\">ary</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; ary.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> item = ary[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(item)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">re</span>(item)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result.<span class=\"title function_\">push</span>(item)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">re</span>(ary)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reduce</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span>(<span class=\"params\">ary</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ary.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pre.<span class=\"title function_\">concat</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(cur) ? <span class=\"title function_\">flatten</span>(cur) : cur)</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">实现一个函数：<span class=\"title function_\">format</span>(<span class=\"string\">&quot;3[a]2[bc]&quot;</span>) =&gt; <span class=\"string\">&quot;aaabcbc&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">format</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/(\\[|\\])/g</span>,<span class=\"string\">&#x27;,&#x27;</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( i % <span class=\"number\">2</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> num = <span class=\"title class_\">Number</span>(arr[i])</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; num; j++) &#123;</span><br><span class=\"line\">        result.<span class=\"title function_\">push</span>(arr[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> str1 = <span class=\"string\">&quot;3[a]2[bc]4[def]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">format</span>(str1)) <span class=\"comment\">//aaabcbcdefdefdefdef</span></span><br></pre></td></tr></table></figure>\n<p>（2）数组去重</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用indexOf()</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">noRepeat1</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result.<span class=\"title function_\">indexOf</span>(arr[i]) === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(arr[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">noRepeat1</span>(arr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用set特性，然后将set转换成数组</span></span><br><span class=\"line\"><span class=\"comment\">// 转换数组的方式有很多：扩展运算符、Array.from()、Array.prototype.slice.call、Array.prototype.concat.apply([], arguments)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">noRepeat2</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(arr)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> result = [...set]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">noRepeat2</span>(arr))</span><br></pre></td></tr></table></figure>\n<p>（3）数组的一些API：map、reduce、fliter、sort</p>\n<ul>\n<li>map</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">map</span> = <span class=\"keyword\">function</span> (<span class=\"params\">callbackFn, thisArg</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理数组类型异常</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span> === <span class=\"literal\">null</span> || <span class=\"variable language_\">this</span> === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;Cannot read property &#x27;map&#x27; of null or undefined&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 处理回调类型异常</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(callbackFn) != <span class=\"string\">&#x27;[object Function]&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(callbackFn + <span class=\"string\">&quot;is not a function&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 把数组转换成对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> O = <span class=\"title class_\">Object</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> T = thisArg</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 保证len为数字且为整数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = O.<span class=\"property\">length</span> &gt;&gt;&gt; <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> A  = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(len)</span><br><span class=\"line\">  <span class=\"comment\">// 大致遍历一边属性，每个属性执行一次回调函数得到值添加到新数组中</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k = <span class=\"number\">0</span>; k &lt; len; k++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> kValue = O[k]</span><br><span class=\"line\">      <span class=\"keyword\">let</span> mappedValue = callbackFn.<span class=\"title function_\">call</span>(T, kValue, k, O)</span><br><span class=\"line\">      A[k] = mappedValue</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> A</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item + <span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>reduce</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">reduce</span> = <span class=\"keyword\">function</span> (<span class=\"params\">callbackfn, initialValue</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 异常处理，和 map 一样</span></span><br><span class=\"line\">  <span class=\"comment\">// 处理数组类型异常</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span> === <span class=\"literal\">null</span> || <span class=\"variable language_\">this</span> === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;Cannot read property &#x27;reduce&#x27; of null or undefined&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 处理回调类型异常</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(callbackfn) != <span class=\"string\">&quot;[object Function]&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(callbackfn + <span class=\"string\">&#x27; is not a function&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> O = <span class=\"title class_\">Object</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = O.<span class=\"property\">length</span> &gt;&gt;&gt; <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> k = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 有一个判断数组是否为空的过程</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> accumulator = initialValue</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (accumulator === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; k &lt; len; k++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">        accumulator = O[k]</span><br><span class=\"line\">        k++</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k === len &amp;&amp; accumulator === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Each element of the array is empty&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (;k &lt; len; k++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">      accumulator = callbackfn.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>, accumulator, O[k], k ,O)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> accumulator</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>fliter</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">filter</span> = <span class=\"keyword\">function</span> (<span class=\"params\">callbackfn, thisArg</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 处理数组类型异常</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span> === <span class=\"literal\">null</span> || <span class=\"variable language_\">this</span> === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;Cannot read property &#x27;filter&#x27; of null or undefined&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 处理回调类型异常</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(callbackfn) != <span class=\"string\">&quot;[object Function]&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(callbackfn + <span class=\"string\">&#x27; is not a function&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> O = <span class=\"title class_\">Object</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = O.<span class=\"property\">length</span> &gt;&gt;&gt; <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> resLen = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> O) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> element = O[i]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callbackfn.<span class=\"title function_\">call</span>(thisArg, O[i], i, O)) &#123;</span><br><span class=\"line\">        res[resLen++] = element</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>sort\n<ul>\n<li>当 n &lt;= 10 时，采用插入排序</li>\n<li>当 n &gt; 10 时，采用三路快速排序</li>\n<li>10 &lt; n &lt;= 1000, 采用中位数作为哨兵元素</li>\n<li>n &gt; 1000, 每隔 200~215 个元素挑出一个元素，放到一个新数组，然后对它排序，找到中间位置的数，以此作为中位数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"异步机制\">异步机制<a title=\"#异步机制\" href=\"#异步机制\"></a></h3>\n<p>（1）Promise<br>\n（2）Promise.reject()<br>\n（3）Promise.all()<br>\n（4）Promise.race()<br>\n（5）Promise.allSettled()<br>\n（6）Promise.any()</p>\n","prev":{"title":"三四月份回顾","link":"2021/04/22/三四月份回顾"},"next":{"title":"计算机网络自顶向下笔记","link":"2021/03/19/计算机网络自顶向下笔记"},"plink":"http://example.com/2021/04/03/我知道的JavaScript/","toc":[{"id":"1.-数据类型","title":"1. 数据类型","index":"1","children":[{"id":"（1）0.1-+-0.2-===-0.3-？","title":"（1）0.1 + 0.2 &#x3D;&#x3D;&#x3D; 0.3 ？","index":"1.1"},{"id":"（2）null使用typeof会输出object","title":"（2）null使用typeof会输出object","index":"1.2"},{"id":"（3）包装类","title":"（3）包装类","index":"1.3"},{"id":"（4）symbol创建一个独一无二的数","title":"（4）symbol创建一个独一无二的数","index":"1.4"},{"id":"（5）bigint","title":"（5）BigInt","index":"1.5"}]},{"id":"2.-js数据类型检测","title":"2. js数据类型检测","index":"2","children":[{"id":"（1）typeof","title":"（1）typeof","index":"2.1"},{"id":"（2）instanceof手动实现","title":"（2）instanceof手动实现","index":"2.2"},{"id":"（3）深拷贝和浅拷贝","title":"（3）深拷贝和浅拷贝","index":"2.3"},{"id":"（4）判断arr是不是数组的方法","title":"（4）判断arr是不是数组的方法","index":"2.4"}]},{"id":"3.-数据类型之转换","title":"3. 数据类型之转换","index":"3"},{"id":"4.-函数（function）","title":"4. 函数（Function）","index":"4","children":[{"id":"（1）函数的参数","title":"（1）函数的参数","index":"4.1"},{"id":"（2）new一个函数发生了什么？","title":"（2）new一个函数发生了什么？","index":"4.2"},{"id":"（3）闭包","title":"（3）闭包","index":"4.3"},{"id":"（4）this、bind、call、apply","title":"（4）this、bind、call、apply","index":"4.4"},{"id":"（5）箭头函数","title":"（5）箭头函数","index":"4.5"}]},{"id":"5.-object","title":"5. Object","index":"5","children":[{"id":"（1）-原型、原型链","title":"（1） 原型、原型链","index":"5.1"},{"id":"（2）js如何实现继承","title":"（2）js如何实现继承","index":"5.2"}]},{"id":"6.-异步机制","title":"6. 异步机制","index":"6","children":[{"id":"（1）js是单线程","title":"（1）js是单线程","index":"6.1"},{"id":"（2）宏任务","title":"（2）宏任务","index":"6.2"},{"id":"（3）微任务","title":"（3）微任务","index":"6.3"},{"id":"（4）eventloop","title":"（4）EventLoop","index":"6.4"}]},{"id":"7.-常见手写题","title":"7. 常见手写题","index":"7","children":[{"id":"函数部分","title":"函数部分","index":"7.1"},{"id":"对象部分","title":"对象部分","index":"7.2"},{"id":"数组部分","title":"数组部分","index":"7.3"},{"id":"异步机制","title":"异步机制","index":"7.4"}]}],"reading_time":"5804 words in 39 min"}