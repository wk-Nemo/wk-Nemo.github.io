{"title":"Java中的反射","date":"2021-11-12T09:06:13.000Z","date_formatted":{"ll":"Nov 12, 2021","L":"11/12/2021","MM-DD":"11-12"},"link":"2021/11/12/Java中的反射","categories":["Java"],"updated":"2023-05-17T12:22:04.220Z","content":"<h2 id=\"反射：框架设计的灵魂\">反射：框架设计的灵魂<a title=\"#反射：框架设计的灵魂\" href=\"#反射：框架设计的灵魂\"></a></h2>\n<p><strong>概念：</strong> 将类的各个组成部分<strong>封装为其他对象</strong>，这就是反射机制。</p>\n<p><strong>Java代码在计算机中经历的三个阶段：</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7362531b029345ae822610dd5dd32891~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>好处：</p>\n<ul>\n<li>可以在程序运行的过程中可以操作这些对象</li>\n<li>可以解耦，提高程序的可扩展性</li>\n</ul>\n<p><strong>获取<code>class</code>对象的三个阶段，分别对应上面的三个阶段：</strong></p>\n<ul>\n<li><code>class.forName(&quot;全类名&quot;)</code>：将字节码文件加载进内存，返回<code>class</code>对象\n<ul>\n<li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类。</li>\n</ul>\n</li>\n<li><code>类名.class</code>：通过类名的属性获取\n<ul>\n<li>多用于参数的传递</li>\n</ul>\n</li>\n<li><code>对象.getClass()</code>：继承自<code>Object</code>的方法\n<ul>\n<li>多用于对象的获取字节码的方式</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.itcast.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.itcast.domian.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReflectDemo1</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">cls1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;cn.itcast.domian.Person&quot;</span>);</span><br><span class=\"line\">    System.out.println(cls1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">cls2</span> <span class=\"operator\">=</span> Person.class;</span><br><span class=\"line\">    System.out.println(cls2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">cls3</span> <span class=\"operator\">=</span> p.getClass();</span><br><span class=\"line\">    System.out.println(cls3);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(cls1 == cls2); <span class=\"comment\">// true</span></span><br><span class=\"line\">    System.out.println(cls1 == cls3); <span class=\"comment\">// true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结论：同一个字节码文件（.class）在一次程序运行的过程中，只会被加载一次，不论是通过哪一种方式获取的<code>class</code>对象都是一个。</p>\n<h2 id=\"class对象的功能\">class对象的功能<a title=\"#class对象的功能\" href=\"#class对象的功能\"></a></h2>\n<h3 id=\"获取成员变量们\">获取成员变量们<a title=\"#获取成员变量们\" href=\"#获取成员变量们\"></a></h3>\n<ul>\n<li><code>Field[] getFileds()</code>：获取所有<code>public</code>修饰的成员变量</li>\n<li><code>Field[] getFiled(String name)</code>：获取指定的<code>public</code>修饰的成员变量</li>\n<li><code>Field[] getDeclareFileds()</code>：获取所有的成员变量（不考虑修饰符）</li>\n<li><code>Field[] getDeclareFiled(String name)</code>：获取指定的成员变量（不考虑修饰符）</li>\n</ul>\n<p><code>Filed</code>：成员变量</p>\n<ul>\n<li>获取值：<code>void set(Object obj, Object value)</code></li>\n<li>设置值：<code>get(Object obj)</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.itcast.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.itcast.domian.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReflectDemo2</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">personClass</span> <span class=\"operator\">=</span> Person.class;</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取成员变量</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;========getFields========&quot;</span>);</span><br><span class=\"line\">    Field[] fileds = personClass.getFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Field field: fileds) &#123;</span><br><span class=\"line\">      System.out.println(field);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Field</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> personClass.getField(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> a.get(p);</span><br><span class=\"line\">    System.out.println(value);</span><br><span class=\"line\">    a.set(p, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">    System.out.println(p);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;=======getDeclaredFields=========&quot;</span>);</span><br><span class=\"line\">    Field[] declareFileds = personClass.getDeclaredFields();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Field field: declareFileds) &#123;</span><br><span class=\"line\">      System.out.println(field);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;---------------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Field</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> personClass.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 直接访问private会报错，该设置可以忽略权限修饰符的安全检查</span></span><br><span class=\"line\">    name.setAccessible(<span class=\"literal\">true</span>); <span class=\"comment\">// 暴力反射</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">value2</span> <span class=\"operator\">=</span> name.get(p);</span><br><span class=\"line\">    System.out.println(value2);</span><br><span class=\"line\">    name.set(p, <span class=\"string\">&quot;wk&quot;</span>);</span><br><span class=\"line\">    System.out.println(p);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f37ccf0912ef487c8297dd00dd8275a3~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08bb66e65c7f424ba6392fcd116a8409~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"获取构造方法们\">获取构造方法们<a title=\"#获取构造方法们\" href=\"#获取构造方法们\"></a></h3>\n<ul>\n<li><code>Constructor&lt;?&gt;[] getConstructors()</code></li>\n<li><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></li>\n<li><code>Constructor&lt;?&gt;[] getDeclareConstructors()</code></li>\n<li><code>Constructor&lt;T&gt; getDeclareConstructor(类&lt;?&gt;... parameterTypes)</code></li>\n</ul>\n<p><code>Constructor</code>：构造方法</p>\n<ul>\n<li>创建对象：<code>T newInstance(Object... initargs)</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.itcast.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.itcast.domian.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReflectDemo3</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">personClass</span> <span class=\"operator\">=</span> Person.class;</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取成员变量</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;========getConstructors========&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> personClass.getConstructor(String.class, <span class=\"type\">int</span>.class);</span><br><span class=\"line\">    System.out.println(constructor);</span><br><span class=\"line\">    <span class=\"comment\">// 创建对象</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> constructor.newInstance(<span class=\"string\">&quot;zhangsan&quot;</span>, <span class=\"number\">33</span>);</span><br><span class=\"line\">    System.out.println(person);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;=======getDeclareConstructors=========&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86593d22a1364f9fa84e96e4b8897c20~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"获取成员方法们\">获取成员方法们<a title=\"#获取成员方法们\" href=\"#获取成员方法们\"></a></h3>\n<ul>\n<li><code>Method[] getMethods()</code></li>\n<li><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li>\n<li><code>Method[] getDeclareMethods()</code></li>\n<li><code>Method getDeclareMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li>\n</ul>\n<p><code>Method</code>：方法对象</p>\n<ul>\n<li>执行方法：<code>Object invoke(Objcet obj, Object... args)</code></li>\n<li>获取方法名称：<code>String getName()</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.itcast.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.itcast.domian.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReflectDemo4</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">personClass</span> <span class=\"operator\">=</span> Person.class;</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取成员变量</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;========getMethods========&quot;</span>);</span><br><span class=\"line\">    Method[] methods = personClass.getMethods();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Method m: methods) &#123;</span><br><span class=\"line\">      System.out.println(m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;-----------------&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Method</span> <span class=\"variable\">eat_Method</span> <span class=\"operator\">=</span> personClass.getMethod(<span class=\"string\">&quot;eat&quot;</span>);</span><br><span class=\"line\">    eat_Method.invoke(p);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Method</span> <span class=\"variable\">eat_Method2</span> <span class=\"operator\">=</span> personClass.getMethod(<span class=\"string\">&quot;eat&quot;</span>, String.class);</span><br><span class=\"line\">    eat_Method2.invoke(p,<span class=\"string\">&quot;apple&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;=======getDeclareConstructors=========&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;省略。。&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eff07486ade04e78a124f076ed0741d9~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"反射小应用\">反射小应用<a title=\"#反射小应用\" href=\"#反射小应用\"></a></h2>\n<p>写一个“框架”，可以帮我们创造任意类的对象，并执行其中任意方法。</p>\n<p><strong>实现：</strong></p>\n<ul>\n<li>配置文件</li>\n<li>反射</li>\n</ul>\n<p><strong>步骤：</strong></p>\n<ul>\n<li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li>\n<li>在程序中加载读取配置文件</li>\n<li>使用反射技术加载类进内存</li>\n<li>创建对象</li>\n<li>执行方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.itcast.reflect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReflectTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以帮我们创造任意类的对象，并执行其中任意方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 1. 加载配置文件</span></span><br><span class=\"line\">    <span class=\"comment\">// 1.1 创建 Properties 对象</span></span><br><span class=\"line\">    <span class=\"type\">Properties</span> <span class=\"variable\">pro</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 1.2 加载配置文件， 转换成一个集合</span></span><br><span class=\"line\">    <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> ReflectTest.class.getClassLoader();</span><br><span class=\"line\">    <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> classLoader.getResourceAsStream(<span class=\"string\">&quot;pro.properties&quot;</span>);</span><br><span class=\"line\">    pro.load(is);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. 获取配置文件中的定义数据</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> pro.getProperty(<span class=\"string\">&quot;className&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> pro.getProperty(<span class=\"string\">&quot;methodName&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3. 加载该类进内存</span></span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">cls</span> <span class=\"operator\">=</span> Class.forName(className);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4.创建对象</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> cls.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 5. 获取方法对象</span></span><br><span class=\"line\">    <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> cls.getMethod(methodName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 6. 执行方法</span></span><br><span class=\"line\">    method.invoke(obj);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfadd2b295654f5384fb6186b1266a2e~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"软件测试复习","link":"2021/11/13/软件测试复习"},"next":{"title":"Java中的注解","link":"2021/11/12/Java中的注解"},"plink":"http://example.com/2021/11/12/Java中的反射/","toc":[{"id":"反射：框架设计的灵魂","title":"反射：框架设计的灵魂","index":"1"},{"id":"class对象的功能","title":"class对象的功能","index":"2","children":[{"id":"获取成员变量们","title":"获取成员变量们","index":"2.1"},{"id":"获取构造方法们","title":"获取构造方法们","index":"2.2"},{"id":"获取成员方法们","title":"获取成员方法们","index":"2.3"}]},{"id":"反射小应用","title":"反射小应用","index":"3"}],"reading_time":"1326 words in 9 min"}