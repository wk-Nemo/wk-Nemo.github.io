{"title":"跟着《Vue.js设计与实现》学习Vue3模板编译","date":"2022-03-24T13:19:29.000Z","date_formatted":{"ll":"Mar 24, 2022","L":"03/24/2022","MM-DD":"03-24"},"link":"2022/03/24/跟着《Vue.js设计与实现》学习Vue3模板编译","categories":["Vue","前端"],"updated":"2023-05-07T09:40:28.768Z","content":"<h2 id=\"0-写在前面\">0 写在前面<a title=\"#0-写在前面\" href=\"#0-写在前面\"></a></h2>\n<p>前段时间加入的前端讨论群和关注的一些公众号被《Vue.js设计与实现》刷屏，抱着好奇的心态买了一本回来学习。之前学习 Vue2 时就对模板编译这一块不是很理解，于是乎书到手就开始跟着书去学这一部分，并总结了这篇博客。有很多地方写的不是很详细，只是方便大家了解整体的流程，详细内容还是强烈推荐大家去看原著。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a5b8f5465bb45fb86ebdbdaf2423e01~tplv-k3u1fbpfcp-watermark.image?\" alt=\"CD2FBF3CCBF00D968BB051266B38C06C.jpg\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"1-虚拟dom\">1 虚拟DOM<a title=\"#1-虚拟dom\" href=\"#1-虚拟dom\"></a></h2>\n<p>Vue为我们提供了<strong>模版语法</strong>，我们可以通过编写如下的代码获取我们想要的 dom 结构</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handler&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这并不是真实的 HTML 语句，因为模板语法里面我们可以使用 <code>v-if</code>、<code>v-for</code>、<code>v-on</code>等指令，模板里的语法最终会被转换成虚拟 DOM 描述的 UI。如果你比较熟悉虚拟 DOM，你可以不使用模板，直接写<strong>渲染（render）函数</strong>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;h&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;h1&#x27;</span>, &#123; <span class=\"attr\">onClick</span>: handler &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的 <strong>h 函数</strong>是为了帮助我们编写虚拟 DOM 更加的轻松，其最终返回的内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">tag</span>: <span class=\"string\">&#x27;h1&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">props</span>: &#123; <span class=\"attr\">onClick</span>: handler &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个组件要渲染的内容是通过<strong>渲染函数</strong>来描述的，也就是上述代码的 <strong>render 函数</strong>。Vue 会根据组件的 render 函数返回值拿到虚拟 DOM ，然后再经过<strong>渲染器</strong>的渲染，就可以把<strong>虚拟 DOM</strong> 渲染成<strong>真实的 DOM</strong>。</p>\n<h2 id=\"2-模板编译\">2 模板编译<a title=\"#2-模板编译\" href=\"#2-模板编译\"></a></h2>\n<p>上面我们讲了模板语法最终会被转换成渲染函数，渲染函数最终会返回成虚拟 DOM，以便后面的流程正常的进行。而模板语法转换成渲染函数便是<strong>编译器</strong>做的工作，对于如下的模板：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handler&quot;</span>&gt;</span></span><br><span class=\"line\">  click me</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>经过编译器的工作最终会转换成如下的渲染函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;div&#x27;</span>, &#123; <span class=\"attr\">onClick</span>: handler &#125;, <span class=\"string\">&#x27;click me&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以我们熟悉的 .vue 文件为例，一个 .vue 文件就是一个组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div @click=&quot;handler&quot;&gt;</span><br><span class=\"line\">    click me</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      // 数据...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;，</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    handler: function() &#123;</span><br><span class=\"line\">      // 函数体...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p><code>&lt;template&gt;</code> 标签里的内容就是模板内容，编译器会把模板内容编译成渲染函数并添加到 <code>&lt;script&gt;</code> 标签块的组件对象上，最终代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 数据...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;，</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">handler</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 函数体...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;div&#x27;</span>, &#123; <span class=\"attr\">onClick</span>: handler &#125;, <span class=\"string\">&#x27;click me&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3--传统编译器\">3  传统编译器<a title=\"#3--传统编译器\" href=\"#3--传统编译器\"></a></h2>\n<p>编译器其实只是一段程序，它用于将 A 语言翻译成 B 语言。</p>\n<ul>\n<li>A 语言：源代码</li>\n<li>B 语言： 目标代码</li>\n<li>源代码 -&gt; 目标代码：编译</li>\n</ul>\n<p>完整的编译一般包含以下几个步骤</p>\n<ul>\n<li>词法分析</li>\n<li>语法分析</li>\n<li>语义分析</li>\n<li>中间代码生成</li>\n<li>优化</li>\n<li>目标代码生成</li>\n</ul>\n<h2 id=\"4-vue编译器概览\">4 Vue编译器概览<a title=\"#4-vue编译器概览\" href=\"#4-vue编译器概览\"></a></h2>\n<p>Vue 的模板作为 DSL（涉及一种领域特定的语言），其编译流程会有所不同。对 Vue 来说，源代码就是组件模板，目标代码就是能在浏览器上运行的 js 代码，或者其他拥有 js 运行时的平台代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 源代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">:id</span>=<span class=\"string\">&quot;dynamicId&quot;</span>&gt;</span></span><br><span class=\"line\">    Vue Template</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目标代码</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;div&#x27;</span>, [</span><br><span class=\"line\">    <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;h1&#x27;</span>, &#123;<span class=\"attr\">id</span>: dynamic&#125;, <span class=\"string\">&#x27;Vue Template&#x27;</span>)</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Vue 的模板编译器首先对模板进行<strong>词法分析</strong>和<strong>语法分析</strong>，得到<strong>模板 AST</strong>。接着，将<strong>模板 AST</strong> 转换成 <strong>JavaScriptAST</strong>。最后，根据 <strong>JavaScriptAST</strong> 生成 <strong>JavaScript 代码</strong>（即渲染函数代码），具体流程如下：</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44e9c0f5e84244ed848ba1a79fea17ae~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>总的来说Vue编译的核心<strong>主要是三个阶段</strong>：parse、transform、generate。Vue 核心 compiler 的代码只是简单的调用了这三个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">compiler</span>(<span class=\"params\">template</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = <span class=\"title function_\">parse</span>(template)</span><br><span class=\"line\">  <span class=\"title function_\">transform</span>(ast)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> code = <span class=\"title function_\">generate</span>(ast.<span class=\"property\">jsNode</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> code</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>第一步 parse：</strong> 这里将<strong>模板</strong>转换成<strong>模板AST</strong></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0415701b0ea848318924490a81dce9cc~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tokens</span></span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;tag&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;div&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;tag&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;p&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;text&#x27;</span>, <span class=\"attr\">context</span>: <span class=\"string\">&#x27;Vue&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;tagEnd&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;p&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;tag&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;p&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;text&#x27;</span>, <span class=\"attr\">context</span>: <span class=\"string\">&#x27;Template&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;tagEnd&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;p&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;tagEnd&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;div&#x27;</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模版AST</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">childrent</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Element&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">tag</span>: <span class=\"string\">&#x27;div&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">children</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Element&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">tag</span>: <span class=\"string\">&#x27;p&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">children</span>: [&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Text&#x27;</span>, <span class=\"attr\">content</span>: <span class=\"string\">&#x27;Vue&#x27;</span> &#125;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Element&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">tag</span>: <span class=\"string\">&#x27;p&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">children</span>: [&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Text&#x27;</span>, <span class=\"attr\">content</span>: <span class=\"string\">&#x27;Template&#x27;</span> &#125;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>第二步 transform：</strong> 这里为第一步生成的<strong>模板AST</strong>中树的每一个节点添加一个 <strong>jsNode</strong>，也就是 <strong>JavaScriptAST</strong></p>\n<p>这里我们为什么不直接将模板AST转换成目标代码呢？</p>\n<p>因为我们需要将模板AST编译成渲染函数，而渲染函数是由 JavaScript 代码来描述的，因此，我们需要将<strong>模板AST</strong>转换成用于<strong>描述渲染函数的AST</strong>，即 <strong>JavaScriptAST</strong>。下面举个例子更清楚的去了解这句话的意思：</p>\n<p><code>&lt;div&gt;&lt;p&gt;Vue&lt;/p&gt;&lt;p&gt;Template&lt;/p&gt;&lt;/div&gt;</code>模板最终返回的渲染函数如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;div&#x27;</span>, [</span><br><span class=\"line\">    <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"string\">&#x27;Vue&#x27;</span>),</span><br><span class=\"line\">    <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"string\">&#x27;Template&#x27;</span>)</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而 transform 要做的工作就是将第一步中的模板AST转换成如下用于描述渲染函数的数据结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">FunctionDeclNode</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;FunctionDecl&#x27;</span>, <span class=\"comment\">// 节点类型</span></span><br><span class=\"line\">    <span class=\"comment\">// 函数名称</span></span><br><span class=\"line\">    <span class=\"attr\">id</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Identifier&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;render&#x27;</span>&#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 函数参数</span></span><br><span class=\"line\">    <span class=\"attr\">params</span>: [],</span><br><span class=\"line\">    <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">    <span class=\"attr\">body</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;ReturnStatement&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">return</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CallExpression&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">callee</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Indentifier&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;h&#x27;</span> &#125;,</span><br><span class=\"line\">                <span class=\"attr\">arguments</span>: [</span><br><span class=\"line\">                    &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;StringLiteral&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;div&#x27;</span> &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;ArrayExpression&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">elements</span>: [</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CallExpression&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"attr\">callee</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Indentifier&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;h&#x27;</span> &#125;,</span><br><span class=\"line\">                                <span class=\"attr\">arguments</span>: [</span><br><span class=\"line\">                                    &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;StringLiteral&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;p&#x27;</span> &#125;,</span><br><span class=\"line\">                                    &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;StringLiteral&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;Vue&#x27;</span>&#125;</span><br><span class=\"line\">                                ]</span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CallExpression&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"attr\">callee</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Indentifier&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;h&#x27;</span> &#125;,</span><br><span class=\"line\">                                <span class=\"attr\">arguments</span>: [</span><br><span class=\"line\">                                    &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;StringLiteral&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;p&#x27;</span> &#125;,</span><br><span class=\"line\">                                    &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;StringLiteral&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;Template&#x27;</span> &#125;</span><br><span class=\"line\">                                ]</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>第三步 generate：</strong> 在第二步中我们获取了描述渲染函数的 ast，这一步中我们根据该 ast 进行字符串的拼接得倒渲染函数据即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;div&#x27;</span>, [</span><br><span class=\"line\">    <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"string\">&#x27;Vue&#x27;</span>),</span><br><span class=\"line\">    <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"string\">&#x27;Template&#x27;</span>)</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-parse详解\">5 parse详解<a title=\"#5-parse详解\" href=\"#5-parse详解\"></a></h2>\n<p>上面我们了解了 parse 的主要的工作是读取 Vue 的模板代码，然后将他们解析成一个一个 Token，最后再根据这些 Token 生成模板AST。</p>\n<p>首先了解解析成 Token 的规则，这里用到了<strong>有限状态机</strong>。学过编译的同学肯定对这个词不陌生，简单介绍一下，解析器在解析模板时会遇到 n 种的状态，每个状态下遇到不同情况要跳转到哪一种情况。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 状态机状态</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">State</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">initial</span>: <span class=\"number\">1</span>,      <span class=\"comment\">// 初始状态</span></span><br><span class=\"line\">    <span class=\"attr\">tagOpen</span>: <span class=\"number\">2</span>,      <span class=\"comment\">// 标签开始状态</span></span><br><span class=\"line\">    <span class=\"attr\">tagName</span>: <span class=\"number\">3</span>,      <span class=\"comment\">// 标签名称状态</span></span><br><span class=\"line\">    <span class=\"attr\">text</span>: <span class=\"number\">4</span>,         <span class=\"comment\">// 文本状态</span></span><br><span class=\"line\">    <span class=\"attr\">tagEnd</span>: <span class=\"number\">5</span>,       <span class=\"comment\">// 结束标签状态</span></span><br><span class=\"line\">    <span class=\"attr\">tagEndName</span>: <span class=\"number\">6</span>    <span class=\"comment\">// 结束标签名称状态</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断是否是字母</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isAlpha</span>(<span class=\"params\">char</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> char &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; char &lt;= <span class=\"string\">&#x27;z&#x27;</span> || char &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; char&lt;= <span class=\"string\">&#x27;Z&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">tokenSize</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//一开始是初始状态</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentState = <span class=\"title class_\">State</span>.<span class=\"property\">initial</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> chars = []</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tokens = []</span><br><span class=\"line\">    <span class=\"comment\">// 状态机不断循环，当全部解析完毕后循环停止</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(str) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> char = str[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(currentState) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 初始状态</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">State</span>.<span class=\"property\">initial</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(char === <span class=\"string\">&#x27;&lt;&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 遇到 &lt; 进入标签开始状态</span></span><br><span class=\"line\">                    currentState = <span class=\"title class_\">State</span>.<span class=\"property\">tagOpen</span></span><br><span class=\"line\">                    str = str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"title function_\">isAlpha</span>(char)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 遇到字母进入文本状态</span></span><br><span class=\"line\">                    currentState = <span class=\"title class_\">State</span>.<span class=\"property\">text</span></span><br><span class=\"line\">                    chars.<span class=\"title function_\">push</span>(char)</span><br><span class=\"line\">                    str = str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\">// 标签开始状态</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">State</span>.<span class=\"property\">tagOpen</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"title function_\">isAlpha</span>(char)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 遇到字母进入标签名称状态</span></span><br><span class=\"line\">                    currentState = <span class=\"title class_\">State</span>.<span class=\"property\">tagName</span></span><br><span class=\"line\">                    chars.<span class=\"title function_\">push</span>(char)</span><br><span class=\"line\">                    str = str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char === <span class=\"string\">&#x27;/&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 遇到 / 进入结束标签状态</span></span><br><span class=\"line\">                    currentState = <span class=\"title class_\">State</span>.<span class=\"property\">tagEnd</span></span><br><span class=\"line\">                    str = str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\">// 标签名称状态</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">State</span>.<span class=\"property\">tagName</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"title function_\">isAlpha</span>(char)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 遇到字母，任然处于标签名称状态</span></span><br><span class=\"line\">                    chars.<span class=\"title function_\">push</span>(char)</span><br><span class=\"line\">                    str = str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char === <span class=\"string\">&#x27;&gt;&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 遇到 &gt; 进入初始状态</span></span><br><span class=\"line\">                    currentState = <span class=\"title class_\">State</span>.<span class=\"property\">initial</span></span><br><span class=\"line\">                    <span class=\"comment\">// 解析成功一个 tag</span></span><br><span class=\"line\">                    tokens.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">                        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;tag&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">name</span>: chars.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    chars.<span class=\"property\">length</span> = <span class=\"number\">0</span></span><br><span class=\"line\">                    str = str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\">// 文本状态</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">State</span>.<span class=\"property\">text</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title function_\">isAlpha</span>(char)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 遇到字母任然保持文本状态</span></span><br><span class=\"line\">                    chars.<span class=\"title function_\">push</span>(char)</span><br><span class=\"line\">                    str = str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (char === <span class=\"string\">&#x27;&lt;&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 遇到 &lt; 进入标签开始状态</span></span><br><span class=\"line\">                    currentState = <span class=\"title class_\">State</span>.<span class=\"property\">tagOpen</span></span><br><span class=\"line\">                    <span class=\"comment\">// 解析成功一个 text</span></span><br><span class=\"line\">                    tokens.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">                        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;text&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">content</span>: chars.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    chars.<span class=\"property\">length</span> = <span class=\"number\">0</span></span><br><span class=\"line\">                    str = str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\">// 结束标签状态</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">State</span>.<span class=\"property\">tagEnd</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"title function_\">isAlpha</span>(char)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 遇到字母进入结束标签名称状态</span></span><br><span class=\"line\">                    currentState = <span class=\"title class_\">State</span>.<span class=\"property\">tagEndName</span></span><br><span class=\"line\">                    chars.<span class=\"title function_\">push</span>(char)</span><br><span class=\"line\">                    str = str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"comment\">// 结束标签名称状态</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"title class_\">State</span>.<span class=\"property\">tagEndName</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"title function_\">isAlpha</span>(char)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 遇到字母保持结束标签名称状态</span></span><br><span class=\"line\">                    chars.<span class=\"title function_\">push</span>(char)</span><br><span class=\"line\">                    str = str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(char === <span class=\"string\">&#x27;&gt;&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 遇到 &gt; 进入初始状态</span></span><br><span class=\"line\">                    currentState = <span class=\"title class_\">State</span>.<span class=\"property\">initial</span></span><br><span class=\"line\">                    <span class=\"comment\">// 成功解析 tagEnd</span></span><br><span class=\"line\">                    tokens.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">                        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;tagEnd&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">name</span>: chars.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    chars.<span class=\"property\">length</span> = <span class=\"number\">0</span></span><br><span class=\"line\">                    str = str.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tokens</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"string\">&#x27;&lt;div&gt;&lt;p&gt;Vue&lt;/p&gt;&lt;p&gt;Template&lt;/p&gt;&lt;/div&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> tokens = <span class=\"title function_\">tokenSize</span>(template)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tokens)</span><br></pre></td></tr></table></figure>\n<p>执行上述代码，最后 <code>&lt;div&gt;&lt;p&gt;Vue&lt;/p&gt;&lt;p&gt;Template&lt;/p&gt;&lt;/div&gt;</code> 被解析成 tokens，如下：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bc2521530e3439c9f535656b99efc2d~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>拿到上面的 tokens 后，我们要将其转换成模板AST。思路比较简单，用一个栈进行存储，首先推入根结点 root，接着遍历一遍 tokens，根据不同的情况进行进栈和出栈的操作即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; tokenSize &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./token&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parse</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取 tokens</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> tokens = <span class=\"title function_\">tokenSize</span>(str)</span><br><span class=\"line\">    <span class=\"comment\">// 根结点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Root&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">children</span>: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 栈</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> elementStack = [root]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(tokens.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> parent = elementStack[elementStack.<span class=\"property\">length</span> - <span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">const</span> t = tokens[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(t.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;tag&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">const</span> elementNode = &#123;</span><br><span class=\"line\">                    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Element&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">tag</span>: t.<span class=\"property\">name</span>,</span><br><span class=\"line\">                    <span class=\"attr\">children</span>: []</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 添加到父节点的children属性中</span></span><br><span class=\"line\">                parent.<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(elementNode)</span><br><span class=\"line\">                <span class=\"comment\">// 加入栈顶</span></span><br><span class=\"line\">                elementStack.<span class=\"title function_\">push</span>(elementNode)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;text&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">const</span> textNode = &#123;</span><br><span class=\"line\">                    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Text&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">content</span>: t.<span class=\"property\">content</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 添加到父节点的children属性中</span></span><br><span class=\"line\">                parent.<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(textNode)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;tagEnd&#x27;</span>:</span><br><span class=\"line\">                <span class=\"comment\">// 弹出栈顶</span></span><br><span class=\"line\">                elementStack.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        tokens.<span class=\"title function_\">shift</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行上面的代码，最后 <code>&lt;div&gt;&lt;p&gt;Vue&lt;/p&gt;&lt;p&gt;Template&lt;/p&gt;&lt;/div&gt;</code> 被解析成模板AST如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Root&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">childrent</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Element&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">tag</span>: <span class=\"string\">&#x27;div&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">children</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Element&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">tag</span>: <span class=\"string\">&#x27;p&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">children</span>: [&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Text&#x27;</span>, <span class=\"attr\">content</span>: <span class=\"string\">&#x27;Vue&#x27;</span> &#125;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Element&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">tag</span>: <span class=\"string\">&#x27;p&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">children</span>: [&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Text&#x27;</span>, <span class=\"attr\">content</span>: <span class=\"string\">&#x27;Template&#x27;</span> &#125;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-transform-详解\">6 transform 详解<a title=\"#6-transform-详解\" href=\"#6-transform-详解\"></a></h2>\n<p>上面我们提到了，为了生成最终的 render 函数，我们只拿到<strong>模板AST</strong>还不够，需要将用于<strong>描述模板的AST转换成用于描述JavaScript的AST</strong>。</p>\n<p>我们最终要转换的目标如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;div&#x27;</span>, [</span><br><span class=\"line\">    <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"string\">&#x27;Vue&#x27;</span>),</span><br><span class=\"line\">    <span class=\"title function_\">h</span>(<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"string\">&#x27;Template&#x27;</span>)</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码用如下 AST 来描述：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">FunctionDeclNode</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;FunctionDecl&#x27;</span>, <span class=\"comment\">// 节点类型</span></span><br><span class=\"line\">    <span class=\"comment\">// 函数名称</span></span><br><span class=\"line\">    <span class=\"attr\">id</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Identifier&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;render&#x27;</span>&#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 函数参数</span></span><br><span class=\"line\">    <span class=\"attr\">params</span>: [],</span><br><span class=\"line\">    <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">    <span class=\"attr\">body</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;ReturnStatement&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">return</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CallExpression&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">callee</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Indentifier&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;h&#x27;</span> &#125;,</span><br><span class=\"line\">                <span class=\"attr\">arguments</span>: [</span><br><span class=\"line\">                    &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;StringLiteral&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;div&#x27;</span> &#125;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;ArrayExpression&#x27;</span>,</span><br><span class=\"line\">                        <span class=\"attr\">elements</span>: [</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CallExpression&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"attr\">callee</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Indentifier&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;h&#x27;</span> &#125;,</span><br><span class=\"line\">                                <span class=\"attr\">arguments</span>: [</span><br><span class=\"line\">                                    &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;StringLiteral&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;p&#x27;</span> &#125;,</span><br><span class=\"line\">                                    &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;StringLiteral&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;Vue&#x27;</span>&#125;</span><br><span class=\"line\">                                ]</span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CallExpression&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"attr\">callee</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Indentifier&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;h&#x27;</span> &#125;,</span><br><span class=\"line\">                                <span class=\"attr\">arguments</span>: [</span><br><span class=\"line\">                                    &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;StringLiteral&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;p&#x27;</span> &#125;,</span><br><span class=\"line\">                                    &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;StringLiteral&#x27;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&#x27;Template&#x27;</span> &#125;</span><br><span class=\"line\">                                ]</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以现在的思路就是将第五步中拿到的AST转换成上述的AST。先定义一些辅助函数为实现这一步骤做一些铺垫。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 StringLiteral 类型节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createStringLiteral</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;StringLiteral&#x27;</span>,</span><br><span class=\"line\">        value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 Identifier 类型节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createIdentifier</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Identifier&#x27;</span>,</span><br><span class=\"line\">        name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 ArrayExpression 类型节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createArrayExpression</span>(<span class=\"params\">elements</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;ArrayExpression&#x27;</span>,</span><br><span class=\"line\">        elements</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 CallExpression 类型节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createCallExpression</span>(<span class=\"params\">callee, <span class=\"variable language_\">arguments</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;CallExpression&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">callee</span>: <span class=\"title function_\">createIdentifier</span>(callee),</span><br><span class=\"line\">        <span class=\"variable language_\">arguments</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将模板AST中Text类型节点转换成JSAST中StringLiteral类型节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">transformText</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.<span class=\"property\">type</span> !== <span class=\"string\">&#x27;Text&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    node.<span class=\"property\">jsNode</span> = <span class=\"title function_\">createStringLiteral</span>(node.<span class=\"property\">content</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将模板AST中Element类型节点转换成JSAST中类型节点CallExpression类型节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">transformElement</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.<span class=\"property\">type</span> !== <span class=\"string\">&#x27;Element&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> callExp = <span class=\"title function_\">createCallExpression</span>(<span class=\"string\">&#x27;h&#x27;</span>, [</span><br><span class=\"line\">            <span class=\"title function_\">createStringLiteral</span>(node.<span class=\"property\">tag</span>)</span><br><span class=\"line\">        ])</span><br><span class=\"line\">        node.<span class=\"property\">children</span>.<span class=\"property\">length</span> === <span class=\"number\">1</span></span><br><span class=\"line\">            ? callExp.<span class=\"property\">arguments</span>.<span class=\"title function_\">push</span>(node.<span class=\"property\">children</span>[<span class=\"number\">0</span>].<span class=\"property\">jsNode</span>)</span><br><span class=\"line\">            : callExp.<span class=\"property\">arguments</span>.<span class=\"title function_\">push</span>(</span><br><span class=\"line\">                <span class=\"title function_\">createArrayExpression</span>(node.<span class=\"property\">children</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.<span class=\"property\">jsNode</span>))</span><br><span class=\"line\">            )</span><br><span class=\"line\">        node.<span class=\"property\">jsNode</span> = callExp</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将模板AST中Element类型节点转换成JSAST中类型节点FunctionDecl类型节点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">transformRoot</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.<span class=\"property\">type</span> !== <span class=\"string\">&#x27;Root&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> vnodeJSAST = node.<span class=\"property\">children</span>[<span class=\"number\">0</span>].<span class=\"property\">jsNode</span></span><br><span class=\"line\">        node.<span class=\"property\">jsNode</span> = &#123;</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">&#x27;FunctionDecl&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">id</span>: &#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;Identifier&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;render&#x27;</span> &#125;,</span><br><span class=\"line\">            <span class=\"attr\">params</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">body</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;ReturnStatement&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">return</span>: vnodeJSAST</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们考虑如下两点：</p>\n<p><strong>问题一：</strong> AST是树形结构，所以想要将一种AST转换成另一种AST我们需要进行树的深度遍历，如何在遍历的过程中对其中的节点进行修改、删除和替换等操作？</p>\n<p>我们可以定义一个 context 上下文，用于存储当前的节点，父节点，以及需要操作的函数。在遍历的开始让节点执行每一个函数。</p>\n<p><strong>问题二：</strong> 在转换AST的过程中，往往需要根据子节点的情况来判断对当前节点进行替换，这就要求父节点转换操作必须等待所有子节点转换完毕以后再执行。这点如何去做？</p>\n<p>在上述遍历过程中，定义一个数组用于存储函数，在遍历的最后再去执行这些函数</p>\n<p>解决了上面两个问题我们上代码，我们在深度遍历的过程中，使用上面定义的辅助函数，实现了AST的转换，得到了本小结开始处所想要的 <code>FunctionDeclNode</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">transform</span>(<span class=\"params\">ast</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dump</span>(ast)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = &#123;</span><br><span class=\"line\">        <span class=\"attr\">currentNode</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">childIndex</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">parent</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">nodeTransforms</span>: [</span><br><span class=\"line\">            transformRoot,</span><br><span class=\"line\">            transformElement,</span><br><span class=\"line\">            transformText</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">traverseNode</span>(ast, context)</span><br><span class=\"line\">    <span class=\"title function_\">dump</span>(ast)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 深度遍历模板AST</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">traverseNode</span>(<span class=\"params\">ast, context</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义初始节点</span></span><br><span class=\"line\">    context.<span class=\"property\">currentNode</span> = ast</span><br><span class=\"line\">    <span class=\"comment\">// 存储函数的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> exitFns = []</span><br><span class=\"line\">    <span class=\"comment\">// 上下文中的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> transforms = context.<span class=\"property\">nodeTransforms</span></span><br><span class=\"line\">    <span class=\"comment\">// 依次将函数存入exitFns中</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; transforms.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> onExit = transforms[i](context.<span class=\"property\">currentNode</span>, context)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(onExit) &#123;</span><br><span class=\"line\">            exitFns.<span class=\"title function_\">push</span>(onExit)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!context.<span class=\"property\">currentNode</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否有子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> children = context.<span class=\"property\">currentNode</span>.<span class=\"property\">children</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(children) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 深度遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; children.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            context.<span class=\"property\">parent</span> = context.<span class=\"property\">currentNode</span></span><br><span class=\"line\">            context.<span class=\"property\">childIndex</span> = i</span><br><span class=\"line\">            <span class=\"title function_\">traverseNode</span>(children[i], context)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行函数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = exitFns.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i--) &#123;</span><br><span class=\"line\">        exitFns[i]()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-generate-详解\">7 generate 详解<a title=\"#7-generate-详解\" href=\"#7-generate-详解\"></a></h2>\n<p>有了 JavaScriptAST，接下来就是<strong>字符串拼接的艺术</strong>了。我们需要根据 JavaScriptAST 来生成最终的 render 函数，Vue 会根据组件的 render 函数返回值拿到虚拟 DOM ，然后再经过渲染器的渲染，就可以把虚拟 DOM 渲染成真实的 DOM。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">compile</span>(<span class=\"params\">template</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 生成模板AST</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ast = <span class=\"title function_\">parse</span>(template)</span><br><span class=\"line\">    <span class=\"comment\">// 转换成JavaScriptAST</span></span><br><span class=\"line\">    <span class=\"title function_\">transform</span>(ast)</span><br><span class=\"line\">    <span class=\"comment\">// 生成渲染函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> code = <span class=\"title function_\">generate</span>(ast.<span class=\"property\">jsNode</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> code</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然这是后话了，在模板编译的模块中，我们只需要关注<strong>如何根据 JavaScriptAST 拼接成最后的 render 函数。</strong></p>\n<p>因为要生成函数的描述，我们先定义一些要用到的辅助函数在一个上下文环境 context 中，context 中的 code 就是我们最终需要的 render 函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">generate</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = &#123;</span><br><span class=\"line\">        <span class=\"attr\">code</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"title function_\">push</span>(<span class=\"params\">code</span>) &#123;</span><br><span class=\"line\">            context.<span class=\"property\">code</span> += code</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">currentIndent</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"title function_\">newline</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            context.<span class=\"property\">code</span> += <span class=\"string\">&#x27;\\n&#x27;</span> + <span class=\"string\">`  `</span>.<span class=\"title function_\">repeat</span>(context.<span class=\"property\">currentIndent</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">indent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            context.<span class=\"property\">currentIndent</span>++</span><br><span class=\"line\">            context.<span class=\"title function_\">newline</span>()</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">deIndent</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            context.<span class=\"property\">currentIndent</span>--</span><br><span class=\"line\">            context.<span class=\"title function_\">newline</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">genNode</span>(node, context)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> context.<span class=\"property\">code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>genNode 的逻辑很简单，根据节点的不同类型执行不同的函数，这里的 node 就是转换而来的 JavaScriptAST。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">genNode</span>(<span class=\"params\">node, context</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(node.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;FunctionDecl&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title function_\">genFunctionDecl</span>(node, context)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;ReturnStatement&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title function_\">genReturnStatement</span>(node, context)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;CallExpression&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title function_\">genCallExpression</span>(node, context)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;StringLiteral&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title function_\">genStringLiteral</span>(node, context)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;ArrayExpression&#x27;</span>:</span><br><span class=\"line\">            <span class=\"title function_\">genArrayExpression</span>(node, context)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>节点类型为 FunctionDecl，需要生成 <code>function(...) &#123; ... &#125;</code>。</p>\n<ul>\n<li>参数部分需要调用 genNode，最终走到 ArrayExpression 类型的判断。这里我们参数为空，因此不执行。</li>\n<li>函数体内容需要调用 genNode 将 FunctionDecl 内部的 body 数组中的对象依次执行一遍。这里我们的对象只有一个 ReturnStatement 类型的节点，看下一步</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">genFunctionDecl</span>(<span class=\"params\">node, context</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; push, indent, deIndent &#125; = context</span><br><span class=\"line\">    <span class=\"title function_\">push</span>(<span class=\"string\">`function <span class=\"subst\">$&#123;node.id.name&#125;</span>`</span>)</span><br><span class=\"line\">    <span class=\"title function_\">push</span>(<span class=\"string\">`(`</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 为函数的参数生成代码</span></span><br><span class=\"line\">    <span class=\"title function_\">genNodeList</span>(node.<span class=\"property\">params</span>, context)</span><br><span class=\"line\">    <span class=\"title function_\">push</span>(<span class=\"string\">`) `</span>)</span><br><span class=\"line\">    <span class=\"title function_\">push</span>(<span class=\"string\">&#x27;&#123;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">indent</span>()</span><br><span class=\"line\">    node.<span class=\"property\">body</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> <span class=\"title function_\">genNode</span>(n, context))</span><br><span class=\"line\">    <span class=\"title function_\">deIndent</span>()</span><br><span class=\"line\">    <span class=\"title function_\">push</span>(<span class=\"string\">`&#125;`</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>节点类型为 ReturnStatement，生成 <code>return ...</code></p>\n<ul>\n<li>return 后面的内容调用 genNode 生成。这里我们 node.return 的类型是 CallExpression</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">genReturnStatement</span>(<span class=\"params\">node, context</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; push &#125; = context</span><br><span class=\"line\">    <span class=\"title function_\">push</span>(<span class=\"string\">`return `</span>)</span><br><span class=\"line\">    <span class=\"title function_\">genNode</span>(node.<span class=\"property\">return</span>, context)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>节点类型为 CallExpression，生成<code>funName(...)</code>，我们的 funName 为 h，因此最终生成的就是<code>h(...)</code>，函数调用的参数再次通过调用 genNode 生成。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">genCallExpression</span>(<span class=\"params\">node, context</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; push &#125; = context</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; callee, <span class=\"attr\">arguments</span>: args &#125; = node</span><br><span class=\"line\">    <span class=\"title function_\">push</span>(<span class=\"string\">`<span class=\"subst\">$&#123;callee.name&#125;</span>(`</span>)</span><br><span class=\"line\">    <span class=\"title function_\">genNodeList</span>(args, context)</span><br><span class=\"line\">    <span class=\"title function_\">push</span>(<span class=\"string\">`)`</span>) </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>节点类型为 StringLiteral，将对应的 value 值加到 code 上即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">genStringLiteral</span>(<span class=\"params\">node, context</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; push &#125; = context</span><br><span class=\"line\">    <span class=\"title function_\">push</span>(<span class=\"string\">`<span class=\"subst\">$&#123;node.value&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"前端性能优化——白嫖篇","link":"2022/03/24/前端性能优化——白嫖篇"},"next":{"title":"js代码质量——逻辑正确性","link":"2022/03/23/js代码质量——逻辑正确性"},"plink":"http://example.com/2022/03/24/跟着《Vue.js设计与实现》学习Vue3模板编译/","toc":[{"id":"0-写在前面","title":"0 写在前面","index":"1"},{"id":"1-虚拟dom","title":"1 虚拟DOM","index":"2"},{"id":"2-模板编译","title":"2 模板编译","index":"3"},{"id":"3--传统编译器","title":"3  传统编译器","index":"4"},{"id":"4-vue编译器概览","title":"4 Vue编译器概览","index":"5"},{"id":"5-parse详解","title":"5 parse详解","index":"6"},{"id":"6-transform-详解","title":"6 transform 详解","index":"7"},{"id":"7-generate-详解","title":"7 generate 详解","index":"8"}],"reading_time":"4307 words in 29 min"}