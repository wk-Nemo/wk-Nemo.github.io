{"title":"函数","date":"2021-02-07T05:48:28.000Z","date_formatted":{"ll":"Feb 7, 2021","L":"02/07/2021","MM-DD":"02-07"},"link":"2021/02/07/函数","categories":["JavaScript","前端"],"updated":"2023-05-07T09:40:35.574Z","content":"<h2 id=\"函数\">函数<a title=\"#函数\" href=\"#函数\"></a></h2>\n<p>函数对任何语言来说都是一个核心概念，函数可以封装任意多条语句，可以在任何地方、任何时刻进行调用执行。在学习js的过程中，遇到过闭包、作用域等概念，让人摸不着头脑，在一些面试的笔试题也经常会头疼不知道考察的点。因此写下本篇博客，系统的去学习js中函数的相关概念。</p>\n<h2 id=\"1.-基础概念\">1. 基础概念<a title=\"#1.-基础概念\" href=\"#1.-基础概念\"></a></h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20200606222826524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"1.1-函数的定义\">1.1 函数的定义<a title=\"#1.1-函数的定义\" href=\"#1.1-函数的定义\"></a></h3>\n<p>1.函数声明</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//function是关键字</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">functionName</span>(<span class=\"params\">arg0, arg1, arg2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//函数体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数声明有一个重要的特——<strong>函数声明提升</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">sayHi</span>(); <span class=\"comment\">//Hi！</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Hi!&quot;</span>)；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.函数表达式<br>\n这种形式看起来很像常规的变量赋值语句，即创建一个函数并将它赋值给functionName。这种情况下创建的函数叫做<strong>匿名函数</strong>（function后面没有标识符），匿名函数的name属性为空字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> functionName = <span class=\"keyword\">function</span>(<span class=\"params\">arg0, arg1, arg2</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">//函数体</span></span><br><span class=\"line\">&#125;；</span><br></pre></td></tr></table></figure>\n<p>函数表达式与其他表达式一样，在使用前必须先赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">sayHi</span>(); <span class=\"comment\">//报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sayHi = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Hi!&quot;</span>)；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.使用构造函数Function<br>\nFunction类型也是一种引用类型，其他更多引用类型可以看我正在整理的<a href=\"http://blog.wutortoise.cn/2021/02/06/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\" target=\"_blank\">引用类型</a>一文，一般不推荐这种方式去定义函数，因为该方法会导致两次代码的解析（1.解析常规的js代码 2.解析传递入构造函数中的字符串）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&quot;num1&quot;</span>, <span class=\"string\">&quot;num2&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>但是通过该方法我们可以很好的理解“<strong>函数是对象，函数名是指针</strong>”，我们再下面一小节详细讨论。</p>\n<h3 id=\"1.2-函数是对象\">1.2 函数是对象<a title=\"#1.2-函数是对象\" href=\"#1.2-函数是对象\"></a></h3>\n<h4 id=\"1.2.1-函数的内部属性-——-arguments、this\">1.2.1 函数的内部属性 —— arguments、this<a title=\"#1.2.1-函数的内部属性-——-arguments、this\" href=\"#1.2.1-函数的内部属性-——-arguments、this\"></a></h4>\n<p>函数内部，有两个特殊的对象：arguments和this</p>\n<ol>\n<li>arguments主要用途是保存函数参数，详情可见下面1.3.1小结。但是不要忘记了，arguments是一个类数组对象，该对象有一个叫callee的属性，该属性是一个指针，指向拥有这个arguments对象的函数，详情可见递归一小节。</li>\n<li>this引用的是函数在执行的环境对象，有关this我们需要理解他的指向问题，该问题会在闭包中详细讨论。</li>\n</ol>\n<h4 id=\"1.2.2-函数的属性-——-length\">1.2.2 函数的属性 —— length<a title=\"#1.2.2-函数的属性-——-length\" href=\"#1.2.2-函数的属性-——-length\"></a></h4>\n<p>length属性表示函数希望接受的命名参数的个数</p>\n<h4 id=\"1.2.3-函数的方法-——-apply()和call()\">1.2.3 函数的方法 —— apply()和call()<a title=\"#1.2.3-函数的方法-——-apply()和call()\" href=\"#1.2.3-函数的方法-——-apply()和call()\"></a></h4>\n<p>call()和apply()两个放大都是在特定的作用域中调用函数，实际上等同于设置函数体内部this对象的值。他们主要的区别在于，call()接受的是一个一个的参数，而apply()接受的是一个参数数组</p>\n<h3 id=\"1.3-函数的参数\">1.3 函数的参数<a title=\"#1.3-函数的参数\" href=\"#1.3-函数的参数\"></a></h3>\n<h4 id=\"1.3.1-arguments\">1.3.1 arguments<a title=\"#1.3.1-arguments\" href=\"#1.3.1-arguments\"></a></h4>\n<p>js函数不介意传递进来多少参数，也不在乎传递参数的类型。我们需要十分注意函数中的<strong>arguments</strong>对象，js函数的所有参数都存放在这个arguments对象。</p>\n<ul>\n<li>你可以传递人一个参数进函数，不论你在定义函数时规定了多少个参数，因为你传递的参数会依次传递给arguments</li>\n<li>arguments可以使用方括号访问元素（arguments[0]表示传递进来的第一个参数，依次类推），用length属性确定传递进来多少个参数</li>\n<li>arguments对象只是与数组类似，但他并不是Array的实例</li>\n</ul>\n<h4 id=\"1.3.2-按值传递\">1.3.2 按值传递<a title=\"#1.3.2-按值传递\" href=\"#1.3.2-按值传递\"></a></h4>\n<p><strong>js中的所有函数都是按值传递的</strong>。这句话可能不是很容易理解，我们先从一个简单的例子开始理解。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addTen</span>(<span class=\"params\">number</span>) &#123;</span><br><span class=\"line\">    num += <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"title function_\">addTen</span>(count)</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(count) <span class=\"comment\">//20</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(result) <span class=\"comment\">//30</span></span><br></pre></td></tr></table></figure>\n<p>在上面的例子中，传递的参数被复制给了一个局部变量，也就是arguments对象中的一个元素，因此不会影响count值。这下就可以大致理解开头那句话的意思了，但是我们知道在js中除了基本数据类型外，还有引用类型值，不了解的可以去看我的另外一篇博客<a href=\"http://blog.wutortoise.cn/2021/02/07/%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98\" target=\"_blank\">变量、作用域和内存问题</a>。<br>\n基本类型值的传递在上述例子里我们可以轻松的理解，那么引用类型值的传递呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">   obj.<span class=\"property\">name</span> = <span class=\"string\">&quot;wk&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"><span class=\"title function_\">setName</span>(person);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(person.<span class=\"property\">name</span>); <span class=\"comment\">//wk</span></span><br></pre></td></tr></table></figure>\n<p>在上述代码中，我们在函数体内改变传递的来的引用类型值，在函数体外部也可以体现出来，那是不是就意味着引用类型值的传递不满足“js中的所有函数都是按值传递的”这句话呢？答案式否定的，我们来看下面一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">   obj.<span class=\"property\">name</span> = <span class=\"string\">&quot;wk&quot;</span></span><br><span class=\"line\">   obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>()</span><br><span class=\"line\">   obj.<span class=\"property\">name</span> = <span class=\"string\">&quot;cy&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"><span class=\"title function_\">setName</span>(person);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(person.<span class=\"property\">name</span>); <span class=\"comment\">//wk</span></span><br></pre></td></tr></table></figure>\n<p>我们可以看到，即使我们后来答案并不是cy，因为在我们传递参数时，我们是按值传递的，而引用类型复制传值是将指针传递给arguments中的参数，即便后来给obj一个新的对象，那也不过是修改了arguments[0]参数指针的指向，并不会影响person的指针指向。</p>\n<h3 id=\"1.4-没有重载\">1.4 没有重载<a title=\"#1.4-没有重载\" href=\"#1.4-没有重载\"></a></h3>\n<p>js函数没有重载，如果你定义了相同名字的函数，则这个个名字只属于后定义的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">sayHi</span>();</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">sayHi</span>();</span><br></pre></td></tr></table></figure>\n<p>在这个小例子中，两个sayHi()函数都会打印B。因为函数声明提升，两个定义函数会被放在最顶端，接着根据每有重载这一规则，两个sayHi()函数都会打印B。</p>\n<h2 id=\"2.-递归\">2. 递归<a title=\"#2.-递归\" href=\"#2.-递归\"></a></h2>\n<p>递归函数是指一个函数通过名字调用自身的情况。因为递归是通过函数名，而js中的函数声明可以通过函数表达式来声明，因此我们可以使用在1.2.1中提到的arguments的callee属性避免一些不必要的错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">factorial</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num*argument.<span class=\"title function_\">callee</span>(num - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3.-闭包\">3. 闭包<a title=\"#3.-闭包\" href=\"#3.-闭包\"></a></h2>\n<p>闭包是指有权访问另一个函数作用域中的变量函数。</p>\n<h3 id=\"3.1-执行环境、变量对象、活动对象、作用域、作用域链\">3.1 执行环境、变量对象、活动对象、作用域、作用域链<a title=\"#3.1-执行环境、变量对象、活动对象、作用域、作用域链\" href=\"#3.1-执行环境、变量对象、活动对象、作用域、作用域链\"></a></h3>\n<blockquote>\n<p>在此部分参考了炼心的博客<a href=\"https://www.cnblogs.com/hezhi/p/10053025.html\" target=\"_blank\">js基础梳理-究竟什么是变量对象，什么是活动对象？</a></p>\n</blockquote>\n<h4 id=\"3.1.1-执行环境（执行上下文）\">3.1.1 执行环境（执行上下文）<a title=\"#3.1.1-执行环境（执行上下文）\" href=\"#3.1.1-执行环境（执行上下文）\"></a></h4>\n<ol>\n<li><strong>执行环境</strong>定义了变量或函数有权访问的其他数据，决定了他们各自的行为。</li>\n<li><strong>全局执行环境</strong>是最外围的一个执行环境，在web中，全局执行环境被认为是window对象，因此所有的全局变量和函数都是作为window对象的属性和方法创建的。</li>\n<li>执行环境中的所有代码执行完毕后，该环境会被销毁，保存在其中的变量和函数也会随之销毁；全局执行环境直到应用程序退出，例如关闭浏览器后才会被销毁。</li>\n<li>每个函数都有自己的执行环境，当执行流进入一个函数时，函数的执行环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，将控制权返回给之前的执行环境。</li>\n</ol>\n<h4 id=\"3.1.2-变量对象（variable-object，vo）\">3.1.2 变量对象（Variable Object，VO）<a title=\"#3.1.2-变量对象（variable-object，vo）\" href=\"#3.1.2-变量对象（variable-object，vo）\"></a></h4>\n<ol>\n<li>每个执行环境都有一个与之关联的<strong>变量对象</strong>，执行环境中定义的所有变量和函数都保存在这个对象中。</li>\n</ol>\n<h4 id=\"3.1.3-活动对象（active-object，ao）\">3.1.3 活动对象（Active Object，AO）<a title=\"#3.1.3-活动对象（active-object，ao）\" href=\"#3.1.3-活动对象（active-object，ao）\"></a></h4>\n<ol>\n<li>\n<p><strong>只有全局执行上下文的变量对象允许通过VO的属性名称来间接访问</strong>，在其他执行上下文中是不能直接访问VO对象的。</p>\n</li>\n<li>\n<p>未进入执行阶段前，变量对象中的属性都不能访问！<strong>但是进入到执行阶段之后，变量对象（VO）转变成了活动对象(AO)</strong>，里面的属性都能被访问了，然后开始进行执行阶段的操作。</p>\n</li>\n<li>\n<p>因此，对于函数上下文来讲，活动对象（AO）与变量对象(VO)其实都是同一个对象，只是处于执行上下文的不同生命周期。不过只有处于执行上下文栈栈顶的函数执行上下文中的变量对象，才会变成活动对象。</p>\n</li>\n</ol>\n<h4 id=\"3.1.4-作用域、作用域链\">3.1.4 作用域、作用域链<a title=\"#3.1.4-作用域、作用域链\" href=\"#3.1.4-作用域、作用域链\"></a></h4>\n<ol>\n<li>当代码在一个执行环境中执行时，会创建变量对象的一个<strong>作用域链</strong>。作用域链的作用时保证执行环境有权访问的所有变量和函数有序的访问。</li>\n<li>作用域链的前端始终都是当前执行的代码所在的环境变量。如果这个环境是函数，则将其活动对象作为变量对象。</li>\n</ol>\n<h3 id=\"3.2-执行期上下文\">3.2 执行期上下文<a title=\"#3.2-执行期上下文\" href=\"#3.2-执行期上下文\"></a></h3>\n<h4 id=\"3.2.1-执行上下文的重要属性\">3.2.1 执行上下文的重要属性<a title=\"#3.2.1-执行上下文的重要属性\" href=\"#3.2.1-执行上下文的重要属性\"></a></h4>\n<blockquote>\n<p>此处参考玩弄心里的鬼的博客<a href=\"https://juejin.cn/post/6844903847513554952\" target=\"_blank\">解密 JavaScript 执行上下文</a></p>\n</blockquote>\n<ul>\n<li>变量对象</li>\n<li>作用域链</li>\n<li>this</li>\n</ul>\n<p>1.变量对象</p>\n<ul>\n<li>全局上下文中的变量对象其实就是全局<strong>变量对象（VO）</strong>。在3.1节我们提到了全局变量对象可以直接访问。我们可以通过this来访问全局对象，并且在浏览器环境中，this === window；在node环境中，this === global。</li>\n<li>在函数上下文中的变量对象，我们用<strong>活动对象（AO</strong>）表示，在3.1节我们提到了只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，并且只有被激活的变量对象，其属性才能被访问，其本质和变脸对象是一个对象，只是处于不同的时期。</li>\n</ul>\n<p>2.作用域链</p>\n<ul>\n<li>当代码在一个执行环境中执行时，会创建变量对象的一个<strong>作用域链</strong>。作用域链的作用时保证执行环境有权访问的所有变量和函数有序的访问。当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级执行上下文的变量对象中查找，一直找到全局上下文的变量对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。</li>\n<li>作用域链的前端始终都是当前执行的代码所在的环境变量。<strong>如果这个环境是函数，则将其活动对象作为变量对象</strong>。</li>\n</ul>\n<p>3.this</p>\n<ul>\n<li>在全局执行上下文中，this的指向全局对象。(在浏览器中，this引用 Window 对象)。</li>\n<li>在函数执行上下文中，this 的值取决于该函数是如何被调用的。如果它被一个引用对象调用，那么this会被设置成那个对象，否则this的值被设置为全局对象或者undefined（在严格模式下）</li>\n</ul>\n<p>总结起来就是，<strong>谁调用了，this就指向谁。</strong></p>\n<blockquote>\n<p>有关this的指向问题可以参考<a href=\"https://juejin.cn/post/6844903665145217031\" target=\"_blank\">Javascript中的this</a>这篇博客。</p>\n</blockquote>\n<h4 id=\"3.2.2-js运行三部曲\">3.2.2 js运行三部曲<a title=\"#3.2.2-js运行三部曲\" href=\"#3.2.2-js运行三部曲\"></a></h4>\n<blockquote>\n<p>在此部分参考了二郎神杨戬的博客<a href=\"https://juejin.cn/post/6878914767973679117\" target=\"_blank\">JS进阶系列-JS执行期上下文(一)</a>这篇文章写的很清楚，在此只做一个总结，详细可以去看这篇博客进行了解。</p>\n</blockquote>\n<p>在了解闭包之前，我们最好先弄明白执行期上下文的生命周期，而在了解执行期上下文前我们又需要先了解一下js的三个运行步骤：语法分析、预编译、解释执行</p>\n<ul>\n<li>语法分析，检查是否出现语法的错误</li>\n<li>预编译，全局预编译，函数体预编译</li>\n<li>解释执行，一行一行的边解释边执行</li>\n</ul>\n<h5 id=\"3.2.3-预编译\">3.2.3 预编译<a title=\"#3.2.3-预编译\" href=\"#3.2.3-预编译\"></a></h5>\n<blockquote>\n<p>前提了解：</p>\n<ol>\n<li>imply global 暗示全局变量，即任何变量，如果变量未经声明就赋值，此变量就为全局对象所有</li>\n<li>一切声明的全局变量都是window属性</li>\n</ol>\n</blockquote>\n<p>1.函数预编译（函数执行期上下文）</p>\n<ul>\n<li>创建AO对象</li>\n<li>找形参和变量声明，将变量的形参名作为AO的属性名，值为undefined</li>\n<li>将实参值和形参进行统一</li>\n<li>在函数体里面找函数声明，值赋予函数体</li>\n</ul>\n<p>2.全局预编译（全局执行期上下文）</p>\n<ul>\n<li>创建GO对象</li>\n<li>找变量声明，值为undefined</li>\n<li>找函数声明，值赋予函数体</li>\n</ul>\n<h3 id=\"3.3-回到闭包\">3.3 回到闭包<a title=\"#3.3-回到闭包\" href=\"#3.3-回到闭包\"></a></h3>\n<p>如果详细的了解了3.1、3.2节总结的概念，我们就能轻松的理解变量的作用域和变量的生命周期。一个函数可以沿着作用域链逐层的向上访问外部的变量，直到搜索到全局对象位置，而外部的环境却无法访问内部环境的变量。而且，函数内部的局部变量在函数执行完毕后会被销毁。基于以上两点，在此引出闭包的概念，在此重复一遍开头提到的那句话可能你已经豁然开朗，<strong>闭包是指有权访问另一个函数作用域中的变量函数</strong>。理解了概念后就是要去实现闭包！</p>\n<h4 id=\"3.3.1-原理\">3.3.1 原理<a title=\"#3.3.1-原理\" href=\"#3.3.1-原理\"></a></h4>\n<p>在一个函数的内部定义的函数会将会将外部函数的活动对象添加到它的作用域链中。即a函数内部创建了一个b函数，则a的活动对象会添加到b的作用域链中。如果此时我们将b函数作为a函数的返回值返回给一个全局表里，而b函数的作用域链的中从上到下分别包含了自身的活动对象、a的活动对象、全局变量对象，这样在a函数执行结束后，其活动对象也不会被销毁，因为b函数任然可以引用这个活动对象。</p>\n<h4 id=\"3.3.2-闭包和变量\">3.3.2 闭包和变量<a title=\"#3.3.2-闭包和变量\" href=\"#3.3.2-闭包和变量\"></a></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">       result[i] = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数返回的result数组中的每个函数最后输出的结果都是10，因为在执行creatFunction()这个函数的活动对象i的最后值为10.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>();</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">       result[i] = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> num</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在修改后的函数中，我们将每个i的值又保存在了result[i]的每个函数的活动对象中，这样result[i]内部返回的匿名函数又形成了一个闭包，依次拥有自身的活动对象、result[i]的活动对象、createFunction()的活动对象和全局环境的变量对象，这样就可以返回1，2，…，9</p>\n<h3 id=\"3.3.3-this\">3.3.3 this<a title=\"#3.3.3-this\" href=\"#3.3.3-this\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;wk&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;cy&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">getName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>  <span class=\"comment\">//wk</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里不会输出cy，因为内部函数在沿着作用域链搜索的时候始终是从自身的活动对象开始，而自身的活动对象拥有this这个变量，this这个对象是运行时基于函数的执行环境绑定的：在全局函数中，this为window、作为莫格对象的时候，this为该对象。有关this的指向问题可以参考3.2.1节中的描述。</p>\n<h3 id=\"3.4-闭包的作用\">3.4 闭包的作用<a title=\"#3.4-闭包的作用\" href=\"#3.4-闭包的作用\"></a></h3>\n<p>敬请期待</p>\n","prev":{"title":"寒假回顾","link":"2021/02/25/寒假回顾"},"next":{"title":"变量、作用域和内存问题","link":"2021/02/07/变量、作用域和内存问题"},"plink":"http://example.com/2021/02/07/函数/","toc":[{"id":"函数","title":"函数","index":"1"},{"id":"1.-基础概念","title":"1. 基础概念","index":"2","children":[{"id":"1.1-函数的定义","title":"1.1 函数的定义","index":"2.1"},{"id":"1.2-函数是对象","title":"1.2 函数是对象","index":"2.2"},{"id":"1.3-函数的参数","title":"1.3 函数的参数","index":"2.3"},{"id":"1.4-没有重载","title":"1.4 没有重载","index":"2.4"}]},{"id":"2.-递归","title":"2. 递归","index":"3"},{"id":"3.-闭包","title":"3. 闭包","index":"4","children":[{"id":"3.1-执行环境、变量对象、活动对象、作用域、作用域链","title":"3.1 执行环境、变量对象、活动对象、作用域、作用域链","index":"4.1"},{"id":"3.2-执行期上下文","title":"3.2 执行期上下文","index":"4.2"},{"id":"3.3-回到闭包","title":"3.3 回到闭包","index":"4.3"},{"id":"3.3.3-this","title":"3.3.3 this","index":"4.4"},{"id":"3.4-闭包的作用","title":"3.4 闭包的作用","index":"4.5"}]}],"reading_time":"3986 words in 27 min"}