{"title":"变量、作用域和内存问题","date":"2021-02-07T05:46:09.000Z","date_formatted":{"ll":"Feb 7, 2021","L":"02/07/2021","MM-DD":"02-07"},"link":"2021/02/07/变量、作用域和内存问题","tags":["前端"],"categories":["JavaScript"],"updated":"2023-05-17T12:16:06.197Z","content":"<h2 id=\"1.基本类型和引用类型\">1.基本类型和引用类型<a title=\"#1.基本类型和引用类型\" href=\"#1.基本类型和引用类型\"></a></h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20200615113114708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n这里进一步强调一下复制变量和传递参数的问题。<br>\n（1）基本类型的复制，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上。向函数参数传递基本类型的值，被传递的值会赋值给arguments对象中的一个元素，因此函数中使用的参数是一个函数的局部变量。<br>\n<img src=\"https://img-blog.csdnimg.cn/20200615111816517.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addTen</span>(<span class=\"params\">num</span>)&#123;</span><br><span class=\"line\">          num += <span class=\"number\">10</span>;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> count = <span class=\"number\">20</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> result = <span class=\"title function_\">addTen</span>(count);</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(count);<span class=\"comment\">//20</span></span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(result);<span class=\"comment\">//30</span></span><br></pre></td></tr></table></figure>\n<p>（2）引用类型的复制，同样会将储存在变量对象中的值复制一份到位新变量分配的空间中，不同的是，这个值的副本实际上是一个指针，指向存储在堆中的一个对象。复制结束以后，两个变量实际上将引用同一个对象，因此改变其中一个变量就会影响另外一个变量。像参数传递应用类型的值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。<br>\n<img src=\"https://img-blog.csdnimg.cn/20200615111745574.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" loading=\"lazy\"><br>\n因为在局部作用域中修改的对象会在全局作用域中反映出来，可能会误解位参数时按引用传递的。我们来看下面一个例子。将全局中的obj类比上图的obj1，将中函数中的obj类比obj2，相当于 obj1和 obj2先开始指向同一个对象，并为之添加一个name为wk的属性。但是之后obj2被赋予了一个新的对象，所以后面的操作对obj1没有影响，而obj2作为一个局部变量在函数执行完毕以后也会被立即销毁。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName</span>(<span class=\"params\">obj</span>)&#123;</span><br><span class=\"line\">    obj.<span class=\"property\">name</span> = <span class=\"string\">&quot;wk&quot;</span>;</span><br><span class=\"line\">    obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">    obj.<span class=\"property\">name</span> = <span class=\"string\">&quot;yxy&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"><span class=\"title function_\">setName</span>(person);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(person.<span class=\"property\">name</span>); <span class=\"comment\">//wk</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2.执行环境及作用域\">2.执行环境及作用域<a title=\"#2.执行环境及作用域\" href=\"#2.执行环境及作用域\"></a></h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20200616115931516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\" class=\"φbp\"></p>\n<ul>\n<li>内部环境可以通过作用域链访问所有的外部环境，但是外部环境不能访问内部环境中的任何变量和函数。</li>\n<li>环境之间的联系时线性、有次序的。</li>\n<li>每个环境可以向上搜索作用域链，以查询变量和函数名。</li>\n<li>任何环境不能通过向下搜索作用域链而进入另外一个执行环境。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> color = <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeColor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> anotherColor = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">swapColors</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tempColor = anotherColor;</span><br><span class=\"line\">        anotherColor = color;</span><br><span class=\"line\">        color = tempColor;</span><br><span class=\"line\">        <span class=\"comment\">//可以访问color、anotherColor、tempColor</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//可以访问color、anotherColor</span></span><br><span class=\"line\">    <span class=\"title function_\">swapColors</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//可以访问color</span></span><br><span class=\"line\"><span class=\"title function_\">changeColor</span>();</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200616114307611.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"3.垃圾收集\">3.垃圾收集<a title=\"#3.垃圾收集\" href=\"#3.垃圾收集\"></a></h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20200616121653140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"函数","link":"2021/02/07/函数"},"next":{"title":"防抖和节流","link":"2021/02/06/防抖和节流"},"plink":"http://example.com/2021/02/07/变量、作用域和内存问题/","toc":[{"id":"1.基本类型和引用类型","title":"1.基本类型和引用类型","index":"1"},{"id":"2.执行环境及作用域","title":"2.执行环境及作用域","index":"2"},{"id":"3.垃圾收集","title":"3.垃圾收集","index":"3"}],"reading_time":"833 words in 6 min"}