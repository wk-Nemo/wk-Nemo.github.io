{"title":"Object类型和面向对象的程序设计","date":"2021-01-14T18:04:59.000Z","date_formatted":{"ll":"Jan 15, 2021","L":"01/15/2021","MM-DD":"01-15"},"link":"2021/01/15/Object类型和面向对象的程序设计","categories":["JavaScript"],"updated":"2023-05-17T12:22:25.356Z","content":"<h2 id=\"1-object类型\">1 Object类型<a title=\"#1-object类型\" href=\"#1-object类型\"></a></h2>\n<p>ES中的对象其实就是一组数据和功能的集合。</p>\n<h3 id=\"1.1-object类型的创建方法\">1.1 Object类型的创建方法<a title=\"#1.1-object类型的创建方法\" href=\"#1.1-object类型的创建方法\"></a></h3>\n<ol>\n<li>new操作符</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&quot;wk&quot;</span>;</span><br><span class=\"line\">person.<span class=\"property\">age</span> = <span class=\"number\">18</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Object可以不传递参数，此时的括号可以省略，但是不推荐</li>\n</ul>\n<ol start=\"2\">\n<li>字面向量表示法 <strong>（推荐）</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;wk&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"number\">5</span>：<span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>对象的属性会自动转换成字符串,上述的5会转换成“5”</li>\n<li>字面向量法表示起来干净利落，十分推荐</li>\n</ul>\n<h3 id=\"1.2-object类型的使用方法\">1.2 Object类型的使用方法<a title=\"#1.2-object类型的使用方法\" href=\"#1.2-object类型的使用方法\"></a></h3>\n<ol>\n<li>.进行使用</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">alert</span>(person.<span class=\"property\">name</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\" class=\"φbr\">\n<li><input type=\"checkbox\" disabled=\"\"><i></i>行调用</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">alert</span>(person[<span class=\"string\">&quot;name&quot;</span>]);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当属性名中出现会导致语法错误的字符，或是属性名使用的是关键词或保留字，但是一般我们遵循正常的命名规则就不会用到该调用，所以可以任性的说“可以但是没必要！”。</li>\n</ul>\n<h2 id=\"2.面向对象程序的程序设计\">2.面向对象程序的程序设计<a title=\"#2.面向对象程序的程序设计\" href=\"#2.面向对象程序的程序设计\"></a></h2>\n<h3 id=\"2.1-简单的了解对象的概念\">2.1 简单的了解对象的概念<a title=\"#2.1-简单的了解对象的概念\" href=\"#2.1-简单的了解对象的概念\"></a></h3>\n<h4 id=\"2.1.1-简介\">2.1.1 简介<a title=\"#2.1.1-简介\" href=\"#2.1.1-简介\"></a></h4>\n<ul>\n<li>ECMAScript没有类的概念，因此他的对象和基于类的语言中的对象有所不同。ECMA-262把对象定义成：“<strong>无序属性的集合，其属性值可以包含基本值、对象或者函数</strong>。&quot;我们知道对象都是基于一个引用类型创建的，在第五章中我们学习了一些原生类型，如Array类型、Date类型等，但是除此之外开发人员也可以自己定义新的类型。<br>\n我们上一节了解了Object类型，他不具备多少功能，但是对应用程序中存储和传输数据而言，是一个很好的选择。我们采用对象字面量语法可以定义一个person类型，如下：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">           <span class=\"attr\">name</span>:<span class=\"string\">&quot;wk&quot;</span>,</span><br><span class=\"line\">           <span class=\"attr\">age</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">           <span class=\"attr\">job</span>:<span class=\"string\">&quot;students&quot;</span>,</span><br><span class=\"line\">           <span class=\"attr\">sayName</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">               <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2.1.2-属性类型\">2.1.2 属性类型<a title=\"#2.1.2-属性类型\" href=\"#2.1.2-属性类型\"></a></h4>\n<p>ECMAScript中有两种属性：<strong>数据属性</strong>和<strong>访问器属性</strong>。<br>\n<img src=\"https://img-blog.csdnimg.cn/20200603122309724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\"></p>\n<h5 id=\"2.1.2.1-数据属性\">2.1.2.1 数据属性<a title=\"#2.1.2.1-数据属性\" href=\"#2.1.2.1-数据属性\"></a></h5>\n<p>包含一个数据值的位置，可以进行读写。有四个描述行为的特性，如下：</p>\n<ul>\n<li>[[Configurable]]：表示能否①删除属性从而重新定义属性②能否修改属性的特性③能否把属性修改成访问器属性。默认值为true。</li>\n<li>[[Enumerable]]：表示能否通过for-in循环返回属性。默认值为true。</li>\n<li>[[Writable]]：表示能否修改属性的值。默认值为true。</li>\n<li>[[Value]]：包含这个属性的数据值，从该位置进行读写。默认值为undefined。</li>\n</ul>\n<h5 id=\"2.1.2.2-访问器属性\">2.1.2.2 访问器属性<a title=\"#2.1.2.2-访问器属性\" href=\"#2.1.2.2-访问器属性\"></a></h5>\n<p>访问器属性不包含数据值，他们包含一对getter和setter函数。他也有四个特性，如下：</p>\n<ul>\n<li>[[Configurable]]：表示能否①删除属性从而重新定义属性②能否修改属性的特性③能否把属性修改成访问器属性。默认值为true。</li>\n<li>[[Enumerable]]：表示能否通过for-in循环返回属性。默认值为true。</li>\n<li>[[Get]]：读取访问器属性时调用的函数，负责返回有效值。默认值为undefined。</li>\n<li>[[Set]]：写入访问器属性时调用的函数，负责传入新值，决定如何处理数据。默认值为undefined。</li>\n</ul>\n<h5 id=\"2.1.2.3-object.defineproperty()、object.defineproperties()和object.getownpropertydescriptor()\">2.1.2.3 Object.defineProperty()、Object.defineProperties()和Object.getOwnPropertyDescriptor()<a title=\"#2.1.2.3-object.defineproperty()、object.defineproperties()和object.getownpropertydescriptor()\" href=\"#2.1.2.3-object.defineproperty()、object.defineproperties()和object.getownpropertydescriptor()\"></a></h5>\n<p>Object.defineProperty()</p>\n<ul>\n<li>三个参数：属性所在的对象、属性的名字、一个描述符对象</li>\n<li>注意修改Configurable为false后，就不能再对对象进行配置了。</li>\n<li>用 Object.defineProperty()创建一个新的属性时，若不指定特性，则会默认为false。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于数据属性的操作</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(person,<span class=\"string\">&quot;name&quot;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">writable</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">value</span>:<span class=\"string\">&quot;wk&quot;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(person.<span class=\"property\">name</span>); <span class=\"comment\">//wk</span></span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&quot;cy&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(person.<span class=\"property\">name</span>); <span class=\"comment\">//wk</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对于访问器属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> book = &#123;</span><br><span class=\"line\">   <span class=\"attr\">_year</span>:<span class=\"number\">2004</span>;</span><br><span class=\"line\">   <span class=\"attr\">edition</span>:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(book,<span class=\"string\">&quot;year&quot;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">get</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_year</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">set</span>:<span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(newValue &gt; <span class=\"number\">2004</span>)&#123;</span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">year</span> = newValue;</span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">edition</span> += newValue - <span class=\"number\">2004</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">book.<span class=\"property\">year</span> = <span class=\"number\">2005</span>;</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(book.<span class=\"property\">edition</span>);<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>Object.defineProperties()定义多个属性</p>\n<ul>\n<li>接受参数：①要添加或修改的属性对象②添加或修改的属性</li>\n</ul>\n<p>Object.getOwnPropertyDescriptor()取得给定属性的描述符</p>\n<ul>\n<li>接收参数：①属性所在的对象②描述符的属性名称</li>\n<li>返回值：一个对象，包含了输入属性的所有特性。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> book = &#123;&#125;;</span><br><span class=\"line\">       <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperties</span>(book,&#123;</span><br><span class=\"line\">           <span class=\"attr\">_year</span>:&#123;</span><br><span class=\"line\">               <span class=\"attr\">writable</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">               <span class=\"attr\">value</span>:<span class=\"number\">2004</span></span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           <span class=\"attr\">edition</span>:&#123;</span><br><span class=\"line\">               <span class=\"attr\">writable</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">               <span class=\"attr\">value</span>:<span class=\"number\">1</span></span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           <span class=\"attr\">year</span>:&#123;</span><br><span class=\"line\">               <span class=\"attr\">get</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_year</span>;</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"attr\">set</span>:<span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>)&#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span>(newValue &gt; <span class=\"number\">2004</span>)&#123;</span><br><span class=\"line\">                       <span class=\"variable language_\">this</span>.<span class=\"property\">_year</span> = newValue;</span><br><span class=\"line\">                       <span class=\"variable language_\">this</span>.<span class=\"property\">edition</span> += newValue - <span class=\"number\">2004</span>;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">var</span> descriptor = <span class=\"title class_\">Object</span>.<span class=\"property\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(book,<span class=\"string\">&quot;_year&quot;</span>);</span><br><span class=\"line\">     <span class=\"title function_\">alert</span>(descriptor.<span class=\"property\">value</span>); <span class=\"comment\">//2004</span></span><br><span class=\"line\">     <span class=\"title function_\">alert</span>(descriptor.<span class=\"property\">configurable</span>);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2.2-创建对象\">2.2 创建对象<a title=\"#2.2-创建对象\" href=\"#2.2-创建对象\"></a></h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20200603191654358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"2.2.1工厂模式\">2.2.1工厂模式<a title=\"#2.2.1工厂模式\" href=\"#2.2.1工厂模式\"></a></h3>\n<p>问题：虽然Object构造函数或对象字面量都可以用来创建单个对象，但是可以清楚的看见该方法的<strong>缺点</strong>：复用性太差。如果要创建多个对象会产生大量重复的代码，比如有100个人的信息要录入，就需要重复上列代码100次，并赋不同的信息值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">           <span class=\"attr\">name</span>:<span class=\"string\">&quot;wk&quot;</span>,</span><br><span class=\"line\">           <span class=\"attr\">age</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">           <span class=\"attr\">job</span>:<span class=\"string\">&quot;students&quot;</span>,</span><br><span class=\"line\">           <span class=\"attr\">sayName</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">               <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;;</span><br></pre></td></tr></table></figure>\n<p>工厂模式则解决了这个问题，考虑在ECMAScript中无法创建类，开发人员发明了一种函数，用函数来封装以特定接口创建对象的细节。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createPerson</span>(<span class=\"params\">name,age,job</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">           o.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">           o.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">           o.<span class=\"property\">job</span> = job;</span><br><span class=\"line\">           o.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">               <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"title function_\">createPerson</span>(<span class=\"string\">&quot;wk&quot;</span>,<span class=\"number\">20</span>,<span class=\"string\">&quot;student&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>缺点：工厂模式解决了创建多个相似对象的问题，却没有解决对象识别的问题（即判断一个对象的类型）</p>\n<h3 id=\"2.2.2构造函数模式\">2.2.2构造函数模式<a title=\"#2.2.2构造函数模式\" href=\"#2.2.2构造函数模式\"></a></h3>\n<p>我们知道构造函数可以创建指定类型的对象。除了Object、Array这样的原生构造函数，我们还可以自己创建定义构造函数。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age,job</span>)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">job</span> = job;</span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">               <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> person1 = <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;wk&quot;</span>,<span class=\"number\">20</span>,<span class=\"string\">&quot;student&quot;</span>);</span><br><span class=\"line\">       <span class=\"keyword\">var</span> person2 = <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;wk2&quot;</span>,<span class=\"number\">20</span>,<span class=\"string\">&quot;student&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>与工厂模式进行比较：</p>\n<ul>\n<li>①没有显示的创建对象②直接将属性和方法付给了this对象③没有return</li>\n<li>Person使用的是大写开头的P，此处借鉴了其他的OO语言，<strong>构造函数的开头字母大写，非构造函数开头字母小写</strong>。构造函数本质上也是一种函数，只不过调用的方式不同，构造函数是<strong>通过new操作符来调用的</strong>。</li>\n</ul>\n<blockquote>\n<p>1.构造函数经历的阶段<br>\n（1）创建一个新对象<br>\n（2）讲构造函数的作用域赋给新对象，this也自然而然的指向了这个新对象<br>\n（3）执行构造函数中的代码，给新对象添加属性<br>\n（4）返回新对象<br>\n从构造函数经历的过程我们可以<strong>通过instanceof来识别对象的类型，解决了工厂模式带来的问题。</strong><br>\n2.构造函数和普通函数的拓展<br>\n（1）构造函数使用了new，将this指向了新创建的对象。<br>\n（2）普通的函数调用，this会指向Global，即浏览器的window对象。</p>\n</blockquote>\n<p>存在的问题：每个方法都要在每个实例上重新创建一边，导致了不同作用域链和标识符解析，不同实例上的同名函数时不相等的。<br>\n因为每通过构造函数new一个实例，构造函数中的代码就要执行一遍。对于字段属性来说，每个实例的字段本来就应该是独立的，当然没有问题；但是对于方法属性，我们是希望所有的实例是共享同一个的。</p>\n<h3 id=\"2.2.3原型模式\">2.2.3原型模式<a title=\"#2.2.3原型模式\" href=\"#2.2.3原型模式\"></a></h3>\n<p>所有的函数都有prototype（原型）属性,这个属性是一个指针，指向一个对象。这样就解决了构造函数模型带来的问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;wk&quot;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">age</span> = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">job</span> = <span class=\"string\">&quot;student&quot;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">person1.<span class=\"title function_\">sayName</span>();<span class=\"comment\">//&quot;wk&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">person2.<span class=\"title function_\">sayName</span>();<span class=\"comment\">//&quot;wk&quot;</span></span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"title function_\">alert</span>(person1.<span class=\"property\">sayName</span> == person2.<span class=\"property\">sayName</span>);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2.2.3.1.原型对象\">2.2.3.1.原型对象<a title=\"#2.2.3.1.原型对象\" href=\"#2.2.3.1.原型对象\"></a></h4>\n<p>简单的来说每创建一个函数，都会为函数创建一个prototype属性，这个属性指向函数的原型对象；而原型对象中都会有constructor属性，这个属性指向原函数。当代码读取某个对象的属性时会搜索给定名字的属性。<br>\n<img src=\"https://img-blog.csdnimg.cn/20200603165102367.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\"></p>\n<ul>\n<li>isPrototypeOf()，判断指针是否存在</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">isPrototypeOf</span>(person1));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">isPrototypeOf</span>(person2));<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Object.getPrototypeOf(),返回对象的原型</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(person1) == <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">//true;</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(person1).<span class=\"property\">name</span>) <span class=\"comment\">//&quot;wk&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>当代码读取某个对象的属性时，会进行搜索，搜索顺寻如下：搜索首先是从对象实例本身开始的，如果找到了给定名字的属性就会返回该属性的值；如果没找到则继续再原型对象中查找给定名字的属性。</li>\n<li>对象实例的属性优先级高于原型对象中的属性，当对象实例中的属性与原型对象实例中的属性同名时，即使对象实例中的属性值为null，也会屏蔽原型对象中的属性。要想访问原型的属性，就得通过delete删除实例中的属性。</li>\n<li>hasOwnProperty()方法，给定属性在实例中返回true，不存在属性或原型中返回false。</li>\n<li>in方法，如果属性存在则返回true，否则返回flase。</li>\n</ul>\n</blockquote>\n<h4 id=\"2.2.3.2-语法简化\">2.2.3.2 语法简化<a title=\"#2.2.3.2-语法简化\" href=\"#2.2.3.2-语法简化\"></a></h4>\n<p>下面的语法虽然简化了，但是此时他的constructor属性不再指向Person，指向了Object。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;wk&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"attr\">job</span>:<span class=\"string\">&quot;student&quot;</span>,</span><br><span class=\"line\">  sayName : <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>所以 我们可以自行改变constructor</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">constructor</span>:<span class=\"title class_\">Person</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;wk&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"attr\">job</span>:<span class=\"string\">&quot;student&quot;</span>,</span><br><span class=\"line\">  sayName : <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>但是修改constructor后[[Enumerable]]特性会被设置成true。而默认情况下，constructor是不可枚举的。可以通过Object.defineProperty()进行修改。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">constructor</span>:<span class=\"title class_\">Person</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;wk&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"attr\">job</span>:<span class=\"string\">&quot;student&quot;</span>,</span><br><span class=\"line\">  sayName : <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>,<span class=\"string\">&quot;constructor&quot;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>:<span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">value</span>:<span class=\"title class_\">Person</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2.2.3.3-原型的动态性\">2.2.3.3 原型的动态性<a title=\"#2.2.3.3-原型的动态性\" href=\"#2.2.3.3-原型的动态性\"></a></h4>\n<ul>\n<li>对原型进行的任何修改都可以立马从实例上反映出来</li>\n<li>对原型进行重写的话会切断实例域原型之间的关系</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> friend = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;wk&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">job</span>:<span class=\"string\">&quot;student&quot;</span>,</span><br><span class=\"line\">    sayName : <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">friends.<span class=\"title function_\">sayName</span>();<span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2.2.3.4-原生对象的原型\">2.2.3.4 原生对象的原型<a title=\"#2.2.3.4-原生对象的原型\" href=\"#2.2.3.4-原生对象的原型\"></a></h4>\n<p>所有的引用类型都在其构造函数的原型上定义了方法。通过原生对象的原型，不仅可以取得多有默认方法的引用，还可以重新定义新方法。</p>\n<h4 id=\"2.2.3.5-关于原型模式\">2.2.3.5 关于原型模式<a title=\"#2.2.3.5-关于原型模式\" href=\"#2.2.3.5-关于原型模式\"></a></h4>\n<ol>\n<li>JS里所有的原生引用类型都是通过这种模式进行创建的，如Object、Array、String等</li>\n<li>缺点：</li>\n</ol>\n<ul>\n<li>省略了为构造函数传递参数的环节，所有实例再默认情况下将获得相同的属性值</li>\n<li>共享性带来好处的同时也带来了不少麻烦</li>\n</ul>\n<h3 id=\"2.2.4-组合使用构造函数模式和原型模式(最推荐的模式)\">2.2.4 组合使用构造函数模式和原型模式(最推荐的模式)<a title=\"#2.2.4-组合使用构造函数模式和原型模式(最推荐的模式)\" href=\"#2.2.4-组合使用构造函数模式和原型模式(最推荐的模式)\"></a></h3>\n<p>组合使用构造函数模式，公共属性写入原型，传入属性写入构造函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age,job</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">job</span> = job;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">   <span class=\"attr\">constructor</span>:<span class=\"title class_\">Person</span>,</span><br><span class=\"line\">   sayName = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2.2.5-动态原型模式\">2.2.5 动态原型模式<a title=\"#2.2.5-动态原型模式\" href=\"#2.2.5-动态原型模式\"></a></h3>\n<p>把所有的信息都封装到构造函数中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,age,job</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">job</span> = job;   </span><br><span class=\"line\">       <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span>.<span class=\"property\">sayName</span> != <span class=\"string\">&quot;function&quot;</span>)&#123;</span><br><span class=\"line\">       <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">       &#125; ;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2.2.5寄生构造模式\">2.2.5寄生构造模式<a title=\"#2.2.5寄生构造模式\" href=\"#2.2.5寄生构造模式\"></a></h3>\n<p>该模式只是在调用函数时和工厂模式不同</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createPerson</span>(<span class=\"params\">name,age,job</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">           o.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">           o.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">           o.<span class=\"property\">job</span> = job;</span><br><span class=\"line\">           o.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">               <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> <span class=\"title function_\">createPerson</span>(<span class=\"string\">&quot;wk&quot;</span>,<span class=\"number\">20</span>,<span class=\"string\">&quot;student&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2.2.6稳妥模式\">2.2.6稳妥模式<a title=\"#2.2.6稳妥模式\" href=\"#2.2.6稳妥模式\"></a></h3>\n<p>该模式与寄生构造函数类似，有两点不同</p>\n<ul>\n<li>新建对象的实例方法不引用this</li>\n<li>不适用new操作符调用构造函数<br>\n该模式适合在一些安全的环境中使用，或者防止数据在其他应用程序改动是使用。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createPerson</span>(<span class=\"params\">name,age,job</span>)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">           o.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">           o.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">           o.<span class=\"property\">job</span> = job;</span><br><span class=\"line\">           o.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">               <span class=\"title function_\">alert</span>(name);</span><br><span class=\"line\">           &#125;;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"title function_\">createPerson</span>(<span class=\"string\">&quot;wk&quot;</span>,<span class=\"number\">20</span>,<span class=\"string\">&quot;student&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3.继承\">3.继承<a title=\"#3.继承\" href=\"#3.继承\"></a></h2>\n<p><img src=\"https://img-blog.csdnimg.cn/20200603232617744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"3.1原型链\">3.1原型链<a title=\"#3.1原型链\" href=\"#3.1原型链\"></a></h3>\n<p>1.基本概念<br>\nECMAScript中描述了原型链的概念，并将<strong>原型链</strong>作为实现继承的主要方法。其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SuperType</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">property</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;；</span><br><span class=\"line\"><span class=\"title class_\">SuperType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getSuperValue</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">property</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SubType</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subproperty</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">SubType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">SuperType</span>();</span><br><span class=\"line\"><span class=\"title class_\">SubType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getSubValue</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">subproperty</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance = <span class=\"keyword\">new</span> <span class=\"title class_\">SubType</span>();</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(instance.<span class=\"title function_\">getSuperValue</span>()); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>原型链的搜索机制，沿着原型链一个一个的搜索属性，直到原型链的末端才会停下来。</li>\n<li>还需要注意的是所有函数的默认原型都是Object的实例，因此默认圆心都会包含一个内部指针指向Object.prototype。<br>\n<img src=\"https://img-blog.csdnimg.cn/20200603220039172.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\"></li>\n</ul>\n<p>2.确定原型和实例的关系<br>\n(1)instanceof操作符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">alert</span>(instance <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(instance <span class=\"keyword\">instanceof</span> <span class=\"title class_\">SuperType</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(instance <span class=\"keyword\">instanceof</span> <span class=\"title class_\">SubType</span>);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>(2)isPrototypeOf()方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">isPrototypeOf</span>(instance));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"title class_\">SuperType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">isPrototypeOf</span>(instance));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"title class_\">SubType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"title function_\">isPrototypeOf</span>(instance));<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>3.谨慎地定义方法</p>\n<ul>\n<li>给原型添加的代码一定要放在替换原型的语句之后 。</li>\n<li>通过原型链实现继承时，不能使用对象字面量创建原型方法。</li>\n</ul>\n<p>4.存在的问题</p>\n<ul>\n<li>原型的共享导致了原先的实例属性顺理成章的变成了共享的了。</li>\n<li>创建子类型时，不能像超类型的构造函数中传递参数。</li>\n</ul>\n<h3 id=\"3.2借用构造函数\">3.2借用构造函数<a title=\"#3.2借用构造函数\" href=\"#3.2借用构造函数\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SuperType</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">colors</span> = [<span class=\"string\">&quot;red&quot;</span>,<span class=\"string\">&quot;blue&quot;</span>,<span class=\"string\">&quot;green&quot;</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SubType</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"title class_\">SuperType</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> instance1 = <span class=\"keyword\">new</span> <span class=\"title class_\">SubType</span>();</span><br><span class=\"line\">instance1.<span class=\"property\">colors</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;black&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(instance1.<span class=\"property\">colors</span>);<span class=\"comment\">//red,blue,green,black</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> instance2 = <span class=\"keyword\">new</span> <span class=\"title class_\">SubType</span>();</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(instance2.<span class=\"property\">colors</span>);<span class=\"comment\">//red,blue,green</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3.3组合继承\">3.3组合继承<a title=\"#3.3组合继承\" href=\"#3.3组合继承\"></a></h3>\n<p>将原型链和借用构造函数的技术结合到一起</p>\n<h3 id=\"3.4原型式继承\">3.4原型式继承<a title=\"#3.4原型式继承\" href=\"#3.4原型式继承\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;wk&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">friends</span>:[<span class=\"string\">&quot;zf&quot;</span>,<span class=\"string\">&quot;grb&quot;</span>,<span class=\"string\">&quot;xjh&quot;</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherPerson = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(person);</span><br><span class=\"line\">anotherPerson.<span class=\"property\">name</span> = <span class=\"string\">&quot;grey&quot;</span>;</span><br><span class=\"line\">anotherPerson.<span class=\"property\">friends</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;lyh&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(person.<span class=\"property\">friends</span>);<span class=\"comment\">//zf,grb,xjh,lyh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherPerson2 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(person,&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">value</span>:<span class=\"string\">&quot;grb&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.5寄生式继承\">3.5寄生式继承<a title=\"#3.5寄生式继承\" href=\"#3.5寄生式继承\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createAnother</span>(<span class=\"params\">original</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> clone = <span class=\"title function_\">object</span>(original);</span><br><span class=\"line\">          clone.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">              <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;hi&quot;</span>);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> clone;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3.6寄生组合式继承\">3.6寄生组合式继承<a title=\"#3.6寄生组合式继承\" href=\"#3.6寄生组合式继承\"></a></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SuperType</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">colors</span> = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;green&quot;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title class_\">SuperType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">SubType</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">            <span class=\"title class_\">SuperType</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name);</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">inheritPrototype</span>(<span class=\"title class_\">SubType</span>, <span class=\"title class_\">SuperType</span>);</span><br><span class=\"line\">        <span class=\"title class_\">SubType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayAge</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/20200603233252266.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk1MDE0Mg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"浏览器对象模型--BOM","link":"2021/01/16/浏览器对象模型-BOM"},"next":{"title":"HTML基础","link":"2021/01/15/HTML基础"},"plink":"http://example.com/2021/01/15/Object类型和面向对象的程序设计/","toc":[{"id":"1-object类型","title":"1 Object类型","index":"1","children":[{"id":"1.1-object类型的创建方法","title":"1.1 Object类型的创建方法","index":"1.1"},{"id":"1.2-object类型的使用方法","title":"1.2 Object类型的使用方法","index":"1.2"}]},{"id":"2.面向对象程序的程序设计","title":"2.面向对象程序的程序设计","index":"2","children":[{"id":"2.1-简单的了解对象的概念","title":"2.1 简单的了解对象的概念","index":"2.1"}]},{"id":"2.2-创建对象","title":"2.2 创建对象","index":"3","children":[{"id":"2.2.1工厂模式","title":"2.2.1工厂模式","index":"3.1"},{"id":"2.2.2构造函数模式","title":"2.2.2构造函数模式","index":"3.2"},{"id":"2.2.3原型模式","title":"2.2.3原型模式","index":"3.3"},{"id":"2.2.4-组合使用构造函数模式和原型模式(最推荐的模式)","title":"2.2.4 组合使用构造函数模式和原型模式(最推荐的模式)","index":"3.4"},{"id":"2.2.5-动态原型模式","title":"2.2.5 动态原型模式","index":"3.5"},{"id":"2.2.5寄生构造模式","title":"2.2.5寄生构造模式","index":"3.6"},{"id":"2.2.6稳妥模式","title":"2.2.6稳妥模式","index":"3.7"}]},{"id":"3.继承","title":"3.继承","index":"4","children":[{"id":"3.1原型链","title":"3.1原型链","index":"4.1"},{"id":"3.2借用构造函数","title":"3.2借用构造函数","index":"4.2"},{"id":"3.3组合继承","title":"3.3组合继承","index":"4.3"},{"id":"3.4原型式继承","title":"3.4原型式继承","index":"4.4"},{"id":"3.5寄生式继承","title":"3.5寄生式继承","index":"4.5"},{"id":"3.6寄生组合式继承","title":"3.6寄生组合式继承","index":"4.6"}]}],"reading_time":"3920 words in 26 min"}