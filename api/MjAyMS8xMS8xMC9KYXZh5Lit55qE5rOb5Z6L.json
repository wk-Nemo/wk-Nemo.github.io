{"title":"Java中的泛型","date":"2021-11-10T09:06:13.000Z","date_formatted":{"ll":"Nov 10, 2021","L":"11/10/2021","MM-DD":"11-10"},"link":"2021/11/10/Java中的泛型","categories":["Java","后端"],"updated":"2023-05-07T09:47:51.010Z","content":"<h2 id=\"1.-为什么使用泛型\">1. 为什么使用泛型<a title=\"#1.-为什么使用泛型\" href=\"#1.-为什么使用泛型\"></a></h2>\n<p>泛型程序设计意味着编写的代码可以对多种不同类型的对象重用。</p>\n<h3 id=\"1.1-类型参数\">1.1 类型参数<a title=\"#1.1-类型参数\" href=\"#1.1-类型参数\"></a></h3>\n<p>在Java添加泛型类型之前，泛型程序设计是使用继承实现的。<code>ArrayList</code>类只维护一个<code>Object</code>引用的数组：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ArrayList</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] elementData;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;...&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Object o)</span> &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>存在问题：</p>\n<ul>\n<li>获取一个值时，必须进行强制类型转换</li>\n<li>没有错误坚持，可以向数组列表添加任何类的值</li>\n</ul>\n<p>泛型的解决方案：类型参数，指示元素类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; files = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用<code>get</code>时不需要进行强制类型转换</li>\n<li>使用<code>add</code>方法时必须插入指定类型的参数</li>\n<li>程序更加易读，也更加安全</li>\n</ul>\n<h2 id=\"2.-泛型类\">2. 泛型类<a title=\"#2.-泛型类\" href=\"#2.-泛型类\"></a></h2>\n<p>泛型类就是有一个或多个类型变量的类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pair</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> T first;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> T second;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Pair</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    first = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    second = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Pair</span><span class=\"params\">(T first, T second)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.first = first;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.second = second;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> T <span class=\"title function_\">getFirst</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> T <span class=\"title function_\">getSecond</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFirst</span><span class=\"params\">(T newValue)</span> &#123;</span><br><span class=\"line\">    first = newValue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">pairTest</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    String[] words = &#123; <span class=\"string\">&quot;Mary&quot;</span>, <span class=\"string\">&quot;had&quot;</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;little&quot;</span>, <span class=\"string\">&quot;lamb&quot;</span> &#125;;</span><br><span class=\"line\">    Pair&lt;String&gt; mm = ArrayAlg.minmax(words);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;min = &quot;</span> + mm.getFirst());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;max = &quot;</span> + mm.getSecond());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ArrayAlg</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Pair&lt;String&gt; <span class=\"title function_\">minmax</span><span class=\"params\">(String[] a)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"literal\">null</span> || a.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> a[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> a[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (min.compareTo(a[i]) &gt; <span class=\"number\">0</span>) min = a[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (min.compareTo(a[i]) &lt; <span class=\"number\">0</span>) max = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pair</span>&lt;&gt;(min, max);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>泛型类也可以有多个类型变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pair</span>&lt;T, U&gt; &#123;...&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3.-泛型方法\">3. 泛型方法<a title=\"#3.-泛型方法\" href=\"#3.-泛型方法\"></a></h2>\n<p>不但可以定义泛型类，还可以定义泛型方法。</p>\n<ul>\n<li>类型变量放在修饰符的后面，返回类型的前面</li>\n<li>泛型方法可以在普通类中定义，也可以在泛型类中定义</li>\n<li>当调用一个泛型方法时，可以把具体类型包围在尖括号中，放在方法名前</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ArrayAlg</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">getMiddle</span><span class=\"params\">(T... a)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a[a.length / <span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4.-类型变量的限定\">4. 类型变量的限定<a title=\"#4.-类型变量的限定\" href=\"#4.-类型变量的限定\"></a></h2>\n<p>有时，类或方法需要对类型变量加以约束。比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ArrayAlg</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">min</span><span class=\"params\">(T[] a)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"literal\">null</span> || a.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">smallest</span> <span class=\"operator\">=</span> a[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(smallest.compareTo(a[i]) &gt; <span class=\"number\">0</span>) smallest = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> smallest;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里计算最新需要<code>T</code>拥有一个<code>Comparable</code>接口，我们可以对其加一个限定来实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ArrayAlg</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Comparable</span>&gt; T <span class=\"title function_\">min</span><span class=\"params\">(T[] a)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"literal\">null</span> || a.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">smallest</span> <span class=\"operator\">=</span> a[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(smallest.compareTo(a[i]) &gt; <span class=\"number\">0</span>) smallest = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> smallest;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样<code>min</code>方法只能在实现了<code>Compareable</code>接口的类的数组上调用。</p>\n<p>为什么使用<code>extends</code>而不是<code>implements</code>？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">BoundingType</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>表示<code>T</code>是限定类型的子类型。<code>T</code>和限定类型都可以是类，也可以是接口。选择<code>extends</code>是因为它更接近子类型的概念。</p>\n<ul>\n<li>类型变量用逗号分隔</li>\n<li>限定符号用<code>&amp;</code>分隔</li>\n</ul>\n<h2 id=\"5.-泛型代码和虚拟机\">5. 泛型代码和虚拟机<a title=\"#5.-泛型代码和虚拟机\" href=\"#5.-泛型代码和虚拟机\"></a></h2>\n<p>虚拟机没有泛型类型对象——所有对象都属于普通类。接下来我们来学习编译器是如何“擦除”类型参数，以及这个过程对Java会产生什么影响。</p>\n<h3 id=\"5.1-类型擦除\">5.1 类型擦除<a title=\"#5.1-类型擦除\" href=\"#5.1-类型擦除\"></a></h3>\n<p>无论何时定义一个泛型类型，都会自动提供一个相应的<strong>原始类型</strong>。</p>\n<ul>\n<li>这个原始类型的名字就是去掉类型参数后的泛型类型名。</li>\n<li>类型变量会被擦除</li>\n<li>替换为其限定类（对于无限定类的会替换为Object）</li>\n</ul>\n<p>看上面的<code>Pair</code>类，因为没有限定类型，会被替换成<code>Object</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pair</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object first;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object second;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Pair</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    first = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    second = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Pair</span><span class=\"params\">(Object first, Object second)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.first = first;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.second = second;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Object <span class=\"title function_\">getFirst</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Object <span class=\"title function_\">getSecond</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> second;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFirst</span><span class=\"params\">(Object newValue)</span> &#123;</span><br><span class=\"line\">    first = newValue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5.2-转换泛型表达式\">5.2 转换泛型表达式<a title=\"#5.2-转换泛型表达式\" href=\"#5.2-转换泛型表达式\"></a></h3>\n<p>编写一个泛型方法或泛型字段调用时，如果擦除了返回类型，编译器会插入强制类型转换。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pair&lt;Employee&gt; buddies = ...;</span><br><span class=\"line\"><span class=\"type\">Employee</span> <span class=\"variable\">buddy</span> <span class=\"operator\">=</span> buddies.getFirst();</span><br></pre></td></tr></table></figure>\n<p><code>getFirst</code>擦除类型后返回的是<code>Object</code>，编译器自动插入转换到<code>Employee</code>的强制类型转换。</p>\n<ul>\n<li>对原始<code>Pair.getFirst</code>方法进行调用</li>\n<li>将返回的<code>Object</code>类型强制转换为<code>Employee</code>类型</li>\n</ul>\n<h2 id=\"5.3-转换泛型方法\">5.3 转换泛型方法<a title=\"#5.3-转换泛型方法\" href=\"#5.3-转换泛型方法\"></a></h2>\n<p>类型擦除也会发生在泛型方法中。<strong>这里注意使用了桥方法保证多态。</strong></p>\n<h2 id=\"6.-限制与局限性\">6. 限制与局限性<a title=\"#6.-限制与局限性\" href=\"#6.-限制与局限性\"></a></h2>\n<p>下面来看以下使用Java泛型时需要考虑的一些限制。</p>\n<h3 id=\"6.1-不能用基本类型代替参数类型\">6.1 不能用基本类型代替参数类型<a title=\"#6.1-不能用基本类型代替参数类型\" href=\"#6.1-不能用基本类型代替参数类型\"></a></h3>\n<p>因为原型擦除后，会含有<code>Object</code>字段，而这个字段无法存储基本类型</p>\n<h3 id=\"6.2-运行时类型查询只适用于原始类型\">6.2 运行时类型查询只适用于原始类型<a title=\"#6.2-运行时类型查询只适用于原始类型\" href=\"#6.2-运行时类型查询只适用于原始类型\"></a></h3>\n<p>虚拟机中的对象总有一个特定的泛型类型。因此所有的类型查询只产生原始类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(a <span class=\"keyword\">instanceof</span> Pair&lt;String&gt;); <span class=\"comment\">// Error</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a <span class=\"keyword\">instanceof</span> Pair&lt;T&gt;); <span class=\"comment\">// Error</span></span><br><span class=\"line\">Pair&lt;String&gt; p = (Pair&lt;String&gt;) a; <span class=\"comment\">//Error</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6.3-不能创建参数化类型的数组\">6.3 不能创建参数化类型的数组<a title=\"#6.3-不能创建参数化类型的数组\" href=\"#6.3-不能创建参数化类型的数组\"></a></h3>\n<p>数组会记住它的元素类型，如果试图存储其他类型的元素，会抛出错误。</p>\n<h3 id=\"6.4-varargs警告\">6.4 Varargs警告<a title=\"#6.4-varargs警告\" href=\"#6.4-varargs警告\"></a></h3>\n<h3 id=\"6.5-不能实例化类型变量\">6.5 不能实例化类型变量<a title=\"#6.5-不能实例化类型变量\" href=\"#6.5-不能实例化类型变量\"></a></h3>\n<h3 id=\"6.6-不能构造泛型数组\">6.6 不能构造泛型数组<a title=\"#6.6-不能构造泛型数组\" href=\"#6.6-不能构造泛型数组\"></a></h3>\n<h3 id=\"6.7-泛型类的静态上下文中类型变量无效\">6.7 泛型类的静态上下文中类型变量无效<a title=\"#6.7-泛型类的静态上下文中类型变量无效\" href=\"#6.7-泛型类的静态上下文中类型变量无效\"></a></h3>\n<h3 id=\"6.8-不能抛出或捕获泛型类的实例\">6.8 不能抛出或捕获泛型类的实例<a title=\"#6.8-不能抛出或捕获泛型类的实例\" href=\"#6.8-不能抛出或捕获泛型类的实例\"></a></h3>\n<h3 id=\"6.9-可以取消对检查类型异常的检查\">6.9 可以取消对检查类型异常的检查<a title=\"#6.9-可以取消对检查类型异常的检查\" href=\"#6.9-可以取消对检查类型异常的检查\"></a></h3>\n<h3 id=\"6.10-擦除后的冲突\">6.10 擦除后的冲突<a title=\"#6.10-擦除后的冲突\" href=\"#6.10-擦除后的冲突\"></a></h3>\n<h2 id=\"7.-泛型类的继承规则\">7. 泛型类的继承规则<a title=\"#7.-泛型类的继承规则\" href=\"#7.-泛型类的继承规则\"></a></h2>\n<h2 id=\"8.-通配符类型\">8. 通配符类型<a title=\"#8.-通配符类型\" href=\"#8.-通配符类型\"></a></h2>\n<h2 id=\"9.-反射和泛型\">9. 反射和泛型<a title=\"#9.-反射和泛型\" href=\"#9.-反射和泛型\"></a></h2>\n","prev":{"title":"Java中的注解","link":"2021/11/12/Java中的注解"},"next":{"title":"Java中的对象与类","link":"2021/11/08/Java中的对象与类"},"plink":"http://example.com/2021/11/10/Java中的泛型/","toc":[{"id":"1.-为什么使用泛型","title":"1. 为什么使用泛型","index":"1","children":[{"id":"1.1-类型参数","title":"1.1 类型参数","index":"1.1"}]},{"id":"2.-泛型类","title":"2. 泛型类","index":"2"},{"id":"3.-泛型方法","title":"3. 泛型方法","index":"3"},{"id":"4.-类型变量的限定","title":"4. 类型变量的限定","index":"4"},{"id":"5.-泛型代码和虚拟机","title":"5. 泛型代码和虚拟机","index":"5","children":[{"id":"5.1-类型擦除","title":"5.1 类型擦除","index":"5.1"},{"id":"5.2-转换泛型表达式","title":"5.2 转换泛型表达式","index":"5.2"}]},{"id":"5.3-转换泛型方法","title":"5.3 转换泛型方法","index":"6"},{"id":"6.-限制与局限性","title":"6. 限制与局限性","index":"7","children":[{"id":"6.1-不能用基本类型代替参数类型","title":"6.1 不能用基本类型代替参数类型","index":"7.1"},{"id":"6.2-运行时类型查询只适用于原始类型","title":"6.2 运行时类型查询只适用于原始类型","index":"7.2"},{"id":"6.3-不能创建参数化类型的数组","title":"6.3 不能创建参数化类型的数组","index":"7.3"},{"id":"6.4-varargs警告","title":"6.4 Varargs警告","index":"7.4"},{"id":"6.5-不能实例化类型变量","title":"6.5 不能实例化类型变量","index":"7.5"},{"id":"6.6-不能构造泛型数组","title":"6.6 不能构造泛型数组","index":"7.6"},{"id":"6.7-泛型类的静态上下文中类型变量无效","title":"6.7 泛型类的静态上下文中类型变量无效","index":"7.7"},{"id":"6.8-不能抛出或捕获泛型类的实例","title":"6.8 不能抛出或捕获泛型类的实例","index":"7.8"},{"id":"6.9-可以取消对检查类型异常的检查","title":"6.9 可以取消对检查类型异常的检查","index":"7.9"},{"id":"6.10-擦除后的冲突","title":"6.10 擦除后的冲突","index":"7.10"}]},{"id":"7.-泛型类的继承规则","title":"7. 泛型类的继承规则","index":"8"},{"id":"8.-通配符类型","title":"8. 通配符类型","index":"9"},{"id":"9.-反射和泛型","title":"9. 反射和泛型","index":"10"}],"reading_time":"1485 words in 10 min"}