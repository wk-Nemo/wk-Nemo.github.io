{"title":"防抖和节流","date":"2021-02-06T14:39:31.000Z","date_formatted":{"ll":"Feb 6, 2021","L":"02/06/2021","MM-DD":"02-06"},"link":"2021/02/06/防抖和节流","tags":["前端"],"categories":["JavaScript"],"updated":"2023-05-17T12:16:51.298Z","content":"<p>今天在学习vue的过程中，老师提到了节流的概念，跟着一顿操作以后虽然达到了效果却不是很明白为什么。在万能的b站上找到了小夏老师的视频，进行了学习，并写下这篇博客作为记录。大家感兴趣的可以去b站上看看原视频<a href=\"https://www.bilibili.com/video/BV1Vy4y1y7tj?p=3&amp;spm_id_from=pageDriver\" target=\"_blank\">函数的防抖和节流 – JS 原生面试题</a>，个人认为思路很清晰，讲的非常好！</p>\n<h2 id=\"防抖和节流\">防抖和节流<a title=\"#防抖和节流\" href=\"#防抖和节流\"></a></h2>\n<p>防抖和节流是通过某种方式限制函数执行的次数，减少浏览器在执行非常频繁的操作，如：监听滚动条、改变浏览器框大小、ajax请求等，减少不必要的资源浪费。</p>\n<h2 id=\"1.-防抖\">1. 防抖<a title=\"#1.-防抖\" href=\"#1.-防抖\"></a></h2>\n<h3 id=\"1.1-基本方法\">1.1 基本方法<a title=\"#1.1-基本方法\" href=\"#1.1-基本方法\"></a></h3>\n<p>通过setTimeout的方式，在一定时间间隔内，多次触发变成一次触发</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;input&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, submit, <span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">submit</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>举个例子，我们希望在不断点击的过程中不会一直触发submit函数，我们可以采用防抖的方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;input&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"title function_\">debounce</span>(submit), <span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">submit</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">   <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//防抖函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">//设置一个时间</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> t = <span class=\"literal\">null</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果t不为空，则让t为空,在时间间隔未到时的函数将不会执行</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">         <span class=\"title function_\">cleartTimeout</span>(t)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//重新触发一个函数，如果再时间间隔未到之间不会触发</span></span><br><span class=\"line\">      t = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">         <span class=\"title function_\">fun</span>()</span><br><span class=\"line\">      &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1.2-防抖中e和this的正确获取\">1.2 防抖中e和this的正确获取<a title=\"#1.2-防抖中e和this的正确获取\" href=\"#1.2-防抖中e和this的正确获取\"></a></h3>\n<p>通过这种方式存在着两个问题，一是原本的事件对象该如何获取，二是this指向的问题<br>\n我们知道如果在submit函数中打印this和e的话，分别会显示目标元素和触发的事件。那么我们在防抖函数中如何获取正确的e和this呢？e的获取我们可以直接将return的function参数列表添加一个e即可调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> t = <span class=\"literal\">null</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e) <span class=\"comment\">//获取到了事件</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">         <span class=\"title function_\">cleartTimeout</span>(t)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      t = <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">         <span class=\"title function_\">fun</span>(e)</span><br><span class=\"line\">      &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是我们一般不会这样写，因为我们不确定参数的个数，因为e事件存在于argument[0]中，我们可以想办法通过argument获取事件e。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> t = <span class=\"literal\">null</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(argument[<span class=\"number\">0</span>]) <span class=\"comment\">//获取到了事件</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">         <span class=\"title function_\">cleartTimeout</span>(t)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//注意此处改成箭头函数，因为直接使用函数argument会指向自身的实参列表</span></span><br><span class=\"line\">      <span class=\"comment\">//而不是return的函数的列表</span></span><br><span class=\"line\">      <span class=\"comment\">//apply绑定了this指向了return的函数，并将return的函数的参数列表传给了fun</span></span><br><span class=\"line\">      t = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">         fun.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, argument)</span><br><span class=\"line\">      &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们就获取了一个“没有毛病”的函数防抖！</p>\n<h3 id=\"1.3-进一步的优化\">1.3 进一步的优化<a title=\"#1.3-进一步的优化\" href=\"#1.3-进一步的优化\"></a></h3>\n<p>但是考虑到有时候我们需要快速的执行第一次函数，并且达到防抖的效果，也就是执行一次函数后的一段时间内函数都不会执行的效果要怎么办呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, timer</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> t = <span class=\"literal\">null</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果t为null，则firstClick为true，则会在后面执行fn</span></span><br><span class=\"line\">      <span class=\"comment\">//如果t不为空，则firstClick为false，则后面不会执行fn</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> firstClick = !t</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(t)&#123;</span><br><span class=\"line\">         <span class=\"title function_\">cleartTimeout</span>(t)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(firstClick)&#123;</span><br><span class=\"line\">         fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, argument)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      t = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">         t = <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;, timer)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上述函数中，我们第一次点击时t为null，所以firstClick为true，则会在后面执行fn。当第二次点击的时间未到设置的时间间隔时，t不为空，则firstClick为false，则后面不会执行fn。后面如果一直在未到达时间间隔的时候点击会一直循环下去，直到第n次点击的时间和第n-1次点击的时间超过设定的时间间隔，t才会重归为null，firstClick才会为true，以达到后面执行fn的效果。</p>\n<h2 id=\"2.-节流\">2. 节流<a title=\"#2.-节流\" href=\"#2.-节流\"></a></h2>\n<p>节流通过减少一段时间触发的频率来达到和防抖一样的效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> (<span class=\"params\">fn, delay</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> begin = <span class=\"number\">0</span> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> cur = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>()</span><br><span class=\"line\">      <span class=\"comment\">//通过时间差来进行判断</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(cur - begin &gt; delay)&#123;</span><br><span class=\"line\">         fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, argument)</span><br><span class=\"line\">         begin = cur</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"变量、作用域和内存问题","link":"2021/02/07/变量、作用域和内存问题"},"next":{"title":"引用类型","link":"2021/02/06/引用类型"},"plink":"http://example.com/2021/02/06/防抖和节流/","toc":[{"id":"防抖和节流","title":"防抖和节流","index":"1"},{"id":"1.-防抖","title":"1. 防抖","index":"2","children":[{"id":"1.1-基本方法","title":"1.1 基本方法","index":"2.1"},{"id":"1.2-防抖中e和this的正确获取","title":"1.2 防抖中e和this的正确获取","index":"2.2"},{"id":"1.3-进一步的优化","title":"1.3 进一步的优化","index":"2.3"}]},{"id":"2.-节流","title":"2. 节流","index":"3"}],"reading_time":"1113 words in 7 min"}