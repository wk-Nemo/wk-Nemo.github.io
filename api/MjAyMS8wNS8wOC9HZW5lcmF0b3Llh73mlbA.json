{"title":"Generator函数","date":"2021-05-08T13:53:09.000Z","date_formatted":{"ll":"May 8, 2021","L":"05/08/2021","MM-DD":"05-08"},"link":"2021/05/08/Generator函数","tags":["前端"],"categories":["JavaScript"],"updated":"2023-05-17T12:21:34.624Z","content":"<p>Generator函数是ES6提供的一种异步编程方案，语法与传统的函数完全不同。为了更深入的学习javaScript中的异步编程，对究阮一峰老师ES6中的《Generator函数的语法》做一个总结。</p>\n<h2 id=\"1.-基本概念\">1. 基本概念<a title=\"#1.-基本概念\" href=\"#1.-基本概念\"></a></h2>\n<h3 id=\"1.1-什么是gnerator函数\">1.1 什么是Gnerator函数<a title=\"#1.1-什么是gnerator函数\" href=\"#1.1-什么是gnerator函数\"></a></h3>\n<h5 id=\"1.-从语法上来看\">1. 从语法上来看<a title=\"#1.-从语法上来看\" href=\"#1.-从语法上来看\"></a></h5>\n<ul>\n<li>Generator可以理解成一个状态机，封装了多个内部状态</li>\n<li>Generator函数执行会返回一个遍历器对象，该遍历器对象可以依次遍历Generator函数内部的每一个状态</li>\n</ul>\n<h5 id=\"2.-从形式上来看\">2. 从形式上来看<a title=\"#2.-从形式上来看\" href=\"#2.-从形式上来看\"></a></h5>\n<p>Generator是一个普通函数，但是有两个特征：</p>\n<ul>\n<li>function命令和函数名之间有一个星号</li>\n<li>函数体内部使用yield定义不同内部状态</li>\n</ul>\n<h3 id=\"1.2-generator函数使用方法\">1.2 Generator函数使用方法<a title=\"#1.2-generator函数使用方法\" href=\"#1.2-generator函数使用方法\"></a></h3>\n<ul>\n<li>调用Generator函数返回一个遍历器对象，代表Generator函数内部指针。</li>\n<li>以后每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象\n<ul>\n<li>value是yield后面表达式的值。当遇到return语句后，value为return的值，如果函数没有return则为undefined</li>\n<li>done表示是否遍历结束，结束后会一直显示true</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">helloWorld</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"string\">&#x27;world&#x27;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;ending&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> hw = <span class=\"title function_\">helloWorld</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">hw.<span class=\"title function_\">next</span>() <span class=\"comment\">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class=\"line\">hw.<span class=\"title function_\">next</span>() <span class=\"comment\">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class=\"line\">hw.<span class=\"title function_\">next</span>() <span class=\"comment\">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br><span class=\"line\">hw.<span class=\"title function_\">next</span>() <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br><span class=\"line\">hw.<span class=\"title function_\">next</span>() <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1.-yield和return\">1. yield和return<a title=\"#1.-yield和return\" href=\"#1.-yield和return\"></a></h5>\n<p>（1）return</p>\n<ul>\n<li>正常函数只能return一次</li>\n<li>return不具备记忆功能</li>\n</ul>\n<p>（2）yield</p>\n<ul>\n<li>yield在Generator函数中可以使用多次，每次遇到后函数执行会暂停，使用next方法后才会继续执行</li>\n<li>yield表达式只能在Generator函数中使用，其他函数使用会报错</li>\n<li>yield表达式如果用在另一个表达式中，则必须使用括号，但是作为函数的参数或者放在赋值表达式的右侧不用加括号。</li>\n</ul>\n<h5 id=\"2.-next方法\">2. next方法<a title=\"#2.-next方法\" href=\"#2.-next方法\"></a></h5>\n<p>yield语句本身没有返回值，总是返回undefined。next方法可以带一个参数，该参数会被当作上一条yield语句的返回值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">f</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; <span class=\"literal\">true</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> reset = <span class=\"keyword\">yield</span> i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (reset) &#123;</span><br><span class=\"line\">\t\t\ti = -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">f</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 0, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">next</span>(<span class=\"literal\">true</span>)) <span class=\"comment\">// &#123; value: 0, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br></pre></td></tr></table></figure>\n<p>ps: 因为next方法传参表示上一条yield的返回值，所以第一次使用next方法传递参数是无效的。</p>\n<h5 id=\"3.-generator.prototype.throw()\">3. Generator.prototype.throw()<a title=\"#3.-generator.prototype.throw()\" href=\"#3.-generator.prototype.throw()\"></a></h5>\n<p>Generator函数返回的遍历器对象都有一个throw方法</p>\n<p>（1）可以在函数体外抛出错误，即给throw方法传入一个参数，然后在Generator函数体内部捕获。</p>\n<p>（2）如果函数体内部没有部署try…catch代码块，那么抛出的错误将会被外部的catch捕获</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"keyword\">function</span>* () &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;内部捕获&#x27;</span>, e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"title function_\">g</span>();</span><br><span class=\"line\">i.<span class=\"title function_\">next</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一次错误被函数体内部的catch捕获</span></span><br><span class=\"line\">\ti.<span class=\"keyword\">throw</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 第二次因为函数体内部的catch已经执行过了，不会再捕捉这个错误了，所以错误就抛出函数体外部</span></span><br><span class=\"line\">\ti.<span class=\"keyword\">throw</span>(<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;外部捕获&#x27;</span>, e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 内部捕获a</span></span><br><span class=\"line\"><span class=\"comment\">// 外部捕获b</span></span><br></pre></td></tr></table></figure>\n<p>（3）如果Generator函数体内部部署了try…catch代码块，那么遍历器的throw方法抛出的错误不影响下一次遍历，切会自动执行下一条yield语句，否则终止遍历</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"keyword\">function</span>* <span class=\"title function_\">gen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">g.<span class=\"title function_\">next</span>() <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 内部没有捕获异常，函数终止</span></span><br><span class=\"line\">g.<span class=\"keyword\">throw</span>() <span class=\"comment\">// Uncaught undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen1 = <span class=\"keyword\">function</span>* <span class=\"title function_\">gen1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g1 = <span class=\"title function_\">gen1</span>();</span><br><span class=\"line\">g.<span class=\"title function_\">next</span>() <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 内部捕获异常，函数可以继续执行</span></span><br><span class=\"line\">g.<span class=\"keyword\">throw</span>() <span class=\"comment\">// 2</span></span><br><span class=\"line\">g.<span class=\"title function_\">next</span>() <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>（4）遍历器对象的throw方法抛出的错误被Generator函数体内部的catch捕获，而throw方法抛出的错误不能被内部函数捕捉</p>\n<p>（5）Generator函数体外抛出的错误可以在函数体内部捕获（注意这里必须要用Generator的throw方法）；Generator函数内部抛出的错误也可以被函数体外部捕获</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"keyword\">function</span>* () &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (e !== <span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;内部捕获&#x27;</span>, e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"title function_\">g</span>();</span><br><span class=\"line\">i.<span class=\"title function_\">next</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一次错误被函数体内部的catch捕获，由全局抛出，所以被外部的catch捕获</span></span><br><span class=\"line\">\ti.<span class=\"keyword\">throw</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 第二次因为函数体外部的catch已经执行过了，不会再捕捉b这个错误了</span></span><br><span class=\"line\">\ti.<span class=\"keyword\">throw</span>(<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Generator函数体内部使用throw方法抛出的错误可以被外部的catch捕捉到</span></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;外部捕获&#x27;</span>, e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 外部捕获a</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"4.-generator.prototype.return()\">4. Generator.prototype.return()<a title=\"#4.-generator.prototype.return()\" href=\"#4.-generator.prototype.return()\"></a></h5>\n<p>（1）enerator函数返回的遍历器对象还有一个return方法，可以返回给定的值，并终结Generator函数的遍历</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">gen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">g.<span class=\"title function_\">next</span>(); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">g.<span class=\"keyword\">return</span>(<span class=\"string\">&#x27;foo&#x27;</span>) <span class=\"comment\">// &#123; value: &#x27;foo&#x27;, done: true &#125;</span></span><br><span class=\"line\">g.<span class=\"title function_\">next</span>(); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>（2）如果Generator函数内部有try…finally代码块，那么return方法会推迟到finally代码块执行完毕再执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">numbers</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">numbers</span>()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"keyword\">return</span>(<span class=\"number\">7</span>)) <span class=\"comment\">// &#123; value: 4, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 5, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 7, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"5.-yield*-表达式\">5. yield* 表达式<a title=\"#5.-yield*-表达式\" href=\"#5.-yield*-表达式\"></a></h5>\n<p>如果要在一个Generator函数中调用另一个Generator函数，则需要使用yield*</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span>* <span class=\"title function_\">foo</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">yield</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> <span class=\"title function_\">bar</span>()) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v) <span class=\"comment\">// 1, 2, 3, 4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面从几个方面来看yield*的作用</p>\n<p>（1）相当于将yield全部移到一个函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相当于如下函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（2）相当于对一个遍历器对象的遍历，也就是再函数体内部调用了for…of循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> value <span class=\"keyword\">of</span> <span class=\"title function_\">foo</span>()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从这一点可以看出来yield*实际上就是对遍历器的一种遍历，所以后面如果跟了一个有Iterator接口的对象就会自动对其进行遍历</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">gen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">gen</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 4, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(g.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2.-generator函数和iterator接口的关系\">2. Generator函数和Iterator接口的关系<a title=\"#2.-generator函数和iterator接口的关系\" href=\"#2.-generator函数和iterator接口的关系\"></a></h2>\n<p>在我的上一篇博客中初步认识了Iterator，任意一个对象的Symbol.iterator方法等于该对象的遍历器对象生成函数，调用改函数会返回一个遍历器对象。</p>\n<p>由于Generator函数就是遍历器生成函数，因此可以把Generator赋给对象的Symbol.iterator属性，从而让该对象具有Iterator接口。</p>\n<h5 id=\"1.--generator函数赋给对象symbol.iterator属性\">1.  Generator函数赋给对象Symbol.iterator属性<a title=\"#1.--generator函数赋给对象symbol.iterator属性\" href=\"#1.--generator函数赋给对象symbol.iterator属性\"></a></h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myIterator = &#123;&#125;;</span><br><span class=\"line\">myIterator[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] = <span class=\"keyword\">function</span>* () &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">[...myIterator] <span class=\"comment\">// 1, 2, 3</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2.-generator函数执行后，返回一个遍历器对象。该对象本身也具有symbol.iterator属性，执行后返回自身\">2. Generator函数执行后，返回一个遍历器对象。该对象本身也具有Symbol.iterator属性，执行后返回自身<a title=\"#2.-generator函数执行后，返回一个遍历器对象。该对象本身也具有symbol.iterator属性，执行后返回自身\" href=\"#2.-generator函数执行后，返回一个遍历器对象。该对象本身也具有symbol.iterator属性，执行后返回自身\"></a></h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* gen () &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">g[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]() === g <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3.-generator和for...of循环\">3. Generator和for…of循环<a title=\"#3.-generator和for...of循环\" href=\"#3.-generator和for...of循环\"></a></h2>\n<p>for…of循环可以自动遍历Generator函数生成的Iterator对象，且此时不需要使用next方法</p>\n<p>一旦next方法返回对象的done属性为true，for…of循环就会终止，且不包含该返回对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">6</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> <span class=\"title function_\">foo</span>()) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure>\n<p>原生的js对象没有遍历接口，无法使用for…of循环，下面讨论几种为没有遍历器接口添加遍历器接口的方法</p>\n<h5 id=\"1.-通过generator函数为它加上这个接口后就可以使用了。\">1. 通过Generator函数为它加上这个接口后就可以使用了。<a title=\"#1.-通过generator函数为它加上这个接口后就可以使用了。\" href=\"#1.-通过generator函数为它加上这个接口后就可以使用了。\"></a></h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">objectEntries</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> propKeys = <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(obj);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> propKey <span class=\"keyword\">of</span> propKeys) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> [propKey, obj[propKey]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> jane = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">first</span>: <span class=\"string\">&#x27;wu&#x27;</span>,</span><br><span class=\"line\">\t<span class=\"attr\">last</span>: <span class=\"string\">&#x27;kui&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> <span class=\"title function_\">objectEntries</span>(jane)) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>: <span class=\"subst\">$&#123;value&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first: wu</span></span><br><span class=\"line\"><span class=\"comment\">// last: kui</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2.-将generator函数添加到对象的symbol.iterator属性上\">2. 将Generator函数添加到对象的Symbol.iterator属性上<a title=\"#2.-将generator函数添加到对象的symbol.iterator属性上\" href=\"#2.-将generator函数添加到对象的symbol.iterator属性上\"></a></h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* objectEntries() &#123;</span><br><span class=\"line\">\tlet propKeys = Object.keys(this);</span><br><span class=\"line\">\tfor (let propKey of propKeys) &#123;</span><br><span class=\"line\">\t\tyield [propKey, obj[propKey]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let jane = &#123;</span><br><span class=\"line\">\tfirst: &#x27;wu&#x27;,</span><br><span class=\"line\">\tlast: &#x27;kui&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jane[Symbol.iterator] = objectEntries</span><br><span class=\"line\"></span><br><span class=\"line\">for (let [key, value] of jane) &#123;</span><br><span class=\"line\">\tconsole.log(`$&#123;key&#125;: $&#123;value&#125;`)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3.-除了for..of,扩展运算符、解构赋值和array.from方法内部调用的都是遍历器接口。所以他们都可以将generator函数返回的iterator对象作为参数。\">3. 除了for…of,扩展运算符、解构赋值和Array.from方法内部调用的都是遍历器接口。所以他们都可以将Generator函数返回的Iterator对象作为参数。<a title=\"#3.-除了for..of,扩展运算符、解构赋值和array.from方法内部调用的都是遍历器接口。所以他们都可以将generator函数返回的iterator对象作为参数。\" href=\"#3.-除了for..of,扩展运算符、解构赋值和array.from方法内部调用的都是遍历器接口。所以他们都可以将generator函数返回的iterator对象作为参数。\"></a></h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">numbers</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[...<span class=\"title function_\">numbers</span>()] <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"title function_\">numbers</span>()) <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, z]  = <span class=\"title function_\">numbers</span>(); <span class=\"comment\">// x=1, y=2, z=3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4.-作为对象属性的generator函数\">4. 作为对象属性的Generator函数<a title=\"#4.-作为对象属性的generator函数\" href=\"#4.-作为对象属性的generator函数\"></a></h2>\n<p>如果一个对象的属性是Generator函数，那么可以简成下面的形式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t* <span class=\"title function_\">myFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">myFunction</span>: <span class=\"keyword\">function</span>* () &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5.-generator函数this\">5. Generator函数this<a title=\"#5.-generator函数this\" href=\"#5.-generator函数this\"></a></h2>\n<p>Generator函数总是返回一个遍历器，ES6规定这个遍历器是Generator函数的实例，它也继承了Gnerator函数的prototype对象上的方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">g</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">g.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hello</span> = <span class=\"keyword\">function</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;hi&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"title function_\">g</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">obj <span class=\"keyword\">instanceof</span> g <span class=\"comment\">// true</span></span><br><span class=\"line\">obj.<span class=\"title function_\">hello</span>() <span class=\"comment\">// hi</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1.--但是这里要区分generator函数和构造函数\">1.  但是这里要区分Generator函数和构造函数<a title=\"#1.--但是这里要区分generator函数和构造函数\" href=\"#1.--但是这里要区分generator函数和构造函数\"></a></h5>\n<ul>\n<li>Generator函数内部的this创建的属性不能被它的实例访问</li>\n<li>Generator函数不能通过new方法创建</li>\n</ul>\n<h5 id=\"2.-要想generator函数不但满足于本身的功能还要做到上面两点，则需要进行变通\">2. 要想Generator函数不但满足于本身的功能还要做到上面两点，则需要进行变通<a title=\"#2.-要想generator函数不但满足于本身的功能还要做到上面两点，则需要进行变通\" href=\"#2.-要想generator函数不但满足于本身的功能还要做到上面两点，则需要进行变通\"></a></h5>\n<ul>\n<li>生成一个空对象</li>\n<li>使用call方法绑定Generator函数内部的this</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">F</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"variable language_\">this</span>.<span class=\"property\">b</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"variable language_\">this</span>.<span class=\"property\">c</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = F.<span class=\"title function_\">call</span>(obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"property\">a</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">obj.<span class=\"property\">b</span> <span class=\"comment\">// 2</span></span><br><span class=\"line\">obj.<span class=\"property\">c</span> <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>上面的f任然是遍历器对象，生成的对象实例时obj，接下来我们要将两个对象进行统一。</p>\n<p>我们知道Generator函数调用后返回的遍历器是原函数的实例，所以可以原函数的原型绑定到call上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">F</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"variable language_\">this</span>.<span class=\"property\">b</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"variable language_\">this</span>.<span class=\"property\">c</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = F.<span class=\"title function_\">call</span>(F.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">f.<span class=\"property\">a</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">f.<span class=\"property\">b</span> <span class=\"comment\">// 2</span></span><br><span class=\"line\">f.<span class=\"property\">c</span> <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>如果我们还想使用new操作符来完成调用，再将F改造一下即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">gen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"variable language_\">this</span>.<span class=\"property\">b</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"variable language_\">this</span>.<span class=\"property\">c</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">gen</span>().<span class=\"title function_\">call</span>(gen.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"title function_\">F</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(f.<span class=\"title function_\">next</span>()) <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">f.<span class=\"property\">a</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">f.<span class=\"property\">b</span> <span class=\"comment\">// 2</span></span><br><span class=\"line\">f.<span class=\"property\">c</span> <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n","prev":{"title":"JavaScript中的异步编程","link":"2021/05/11/JavaScript中的异步编程"},"next":{"title":"初探Iterator","link":"2021/05/07/初探Interator"},"plink":"http://example.com/2021/05/08/Generator函数/","toc":[{"id":"1.-基本概念","title":"1. 基本概念","index":"1","children":[{"id":"1.1-什么是gnerator函数","title":"1.1 什么是Gnerator函数","index":"1.1"},{"id":"1.2-generator函数使用方法","title":"1.2 Generator函数使用方法","index":"1.2"}]},{"id":"2.-generator函数和iterator接口的关系","title":"2. Generator函数和Iterator接口的关系","index":"2"},{"id":"3.-generator和for...of循环","title":"3. Generator和for…of循环","index":"3"},{"id":"4.-作为对象属性的generator函数","title":"4. 作为对象属性的Generator函数","index":"4"},{"id":"5.-generator函数this","title":"5. Generator函数this","index":"5"}],"reading_time":"2888 words in 19 min"}