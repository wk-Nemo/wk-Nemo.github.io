{"title":"js代码质量——健壮性","date":"2022-03-21T05:40:38.000Z","date_formatted":{"ll":"Mar 21, 2022","L":"03/21/2022","MM-DD":"03-21"},"link":"2022/03/21/js代码质量——健壮性","categories":["JavaScript","前端"],"updated":"2023-05-07T09:48:17.820Z","content":"<p>对于初入职场的我们，最重要的就是学习如何写出高质量的 js 代码。学习的途径也很简单，多看，多写，多总结：</p>\n<ul>\n<li>多看：看大佬们写的代码，学习他们智慧的结晶</li>\n<li>多写：纸上得来终觉浅，不停的敲代码才能发现自己的问题，提升自己</li>\n<li>多总结：我一直以来奉行的学习方法有两种——<strong>问题驱动学习</strong>和<strong>输出倒闭输入</strong>。只有自己认真的思考总结过，才能发现很多问题的细节，真正的去掌握知识。</li>\n</ul>\n<p>当然，<strong>我也是一个初入前端的小菜鸡</strong>，本篇博客有内容或认知上的错误属于正常现象，希望各位观众老爷们不吝赐教。本篇博客也不是一次就完成，后面每次小猪遇到新的问题都会跟进博客，当然也欢迎大家来评论区补充！</p>\n<h2 id=\"0-什么是代码健壮性？\">0 什么是代码健壮性？<a title=\"#0-什么是代码健壮性？\" href=\"#0-什么是代码健壮性？\"></a></h2>\n<p>在学校看论文时就经常遇到鲁棒性，在公司学习时经常听到其他人提到代码的健壮性，所以每每听到周会大佬们讨论时都会莫名觉厉。</p>\n<p>健壮性，顾名思义，健康强壮。拿这个词来形容人，就是说明这个人身体健康强壮，在遇到小感冒，跌打损伤，不会让他卧床不起。拿这个词来形容代码，道理也一样，在代码遇到各种个样的异常问题，如读取一个值不是预期类型、查询不到指定的路径等，代码不会轻易的挂掉，而是有它自己的一套措施。</p>\n<p>如果你的代码现在还有一碰就倒，并且一蹶不振的现象。不用担心，这篇文章就是帮助你的代码变强的修炼秘籍。</p>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fdingyue.ws.126.net%2F2020%2F0614%2Fbc9bb44ep00qbw7zv0061c000zt00plc.png&amp;refer=http%3A%2F%2Fdingyue.ws.126.net&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1650426335&amp;t=48153ed46627f80e9cd2ff67a9068c66\" alt=\"strong\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"1-函数\">1 函数<a title=\"#1-函数\" href=\"#1-函数\"></a></h2>\n<p><strong>一、函数默认参数妙用</strong></p>\n<p><strong>场景：</strong></p>\n<p>假设我们又如下的初始化工作需要进行，在代码的最开始我们需要对<code>config</code>对象进行初始化工作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initConfig</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    config.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        item.<span class=\"property\">content</span> = <span class=\"title class_\">Number</span>(item.<span class=\"property\">content</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们不小心忘记给它传递参数，浏览器会报如下错误，提示我们 config 没有 map 方法，因为此时 config 为 undefined</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0a1055f039343268ed3f1bc6ca600a2~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>解决办法：</strong></p>\n<p>我们可以给函数的参数加上一个默认的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initConfig</span>(<span class=\"params\">config = []</span>) &#123;</span><br><span class=\"line\">    config.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        item.<span class=\"property\">content</span> = <span class=\"title class_\">Number</span>(item.<span class=\"property\">content</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<p>这里我们可以默认设置其他的类型，如字符串、数字、对象等，提高代码的健壮性</p>\n<h2 id=\"2-解构赋值\">2 解构赋值<a title=\"#2-解构赋值\" href=\"#2-解构赋值\"></a></h2>\n<p>**解构： **  ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构</p>\n<p><strong>一、数组</strong></p>\n<p><strong>场景：</strong></p>\n<p>假设我们需要一个数组的值分别给几个变量，我们会使用数组的解构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleArr</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b + c</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们需要结构的数组不能确定值百分之百正确时，也就是没有多或者少时，我们任然按照上面的写法便会出现问题</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a172ac80e8643bfb4ab4edc9cdebae0~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>解决办法：</strong></p>\n<p>给解构赋值指定默认值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleArr</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b + c</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">handleArr</span>(arr)\t<span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<p>开发时常用到这种方法一次取出多个值，但是要考虑到解构的值不存在的情况，设置好默认值提高代码的健壮性</p>\n<p><strong>二、对象</strong></p>\n<p><strong>场景：</strong></p>\n<p>对象的场景和数组的原理是一样，只不过对象解构的场景用到得更多。</p>\n<p><strong>解决办法：</strong></p>\n<p>给对象解构赋值指定默认值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleObj</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; name, list = [] &#125; = obj</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(name) &#123;</span><br><span class=\"line\">    list.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;add1&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">list</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<p>对象解构的内容可能是字符串、数字、数组或是对象等，对于不同的变量类型，我们需要指定不同的默认值，确保代码的健壮性</p>\n<h2 id=\"3-接口请求\">3 接口请求<a title=\"#3-接口请求\" href=\"#3-接口请求\"></a></h2>\n<p>前面两点讨论的是不要轻易相信前端自己的数据，那么从后端接口传来的数据就更不要轻易相信。</p>\n<p><strong>一、后端响应的数据</strong></p>\n<p><strong>场景：</strong></p>\n<p>假设后后端规定接口响应的内容如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">code</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">msg</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们前端代码可能会这样写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; code, msg, data &#125;  = <span class=\"keyword\">await</span> <span class=\"title function_\">fetchList</span>()</span><br><span class=\"line\">  data.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果后端接口出现了异常</p>\n<ul>\n<li>后端接口挂掉，取出来的 data 为 undefined</li>\n<li>后端返回的 data 出现异常，不是数组</li>\n<li>…</li>\n</ul>\n<p>那么代码中执行的 map 方法就会报错</p>\n<p><strong>解决办法：</strong></p>\n<p>为了防止接口不反回 data 字段，我们可以给解构指定默认值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; code, msg, data = [] &#125;  = <span class=\"keyword\">await</span> <span class=\"title function_\">fetchList</span>()</span><br><span class=\"line\">  data.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了防止接口返回的是数组，我们可以对类型进行检查</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; code, msg, data = [] &#125;  = <span class=\"keyword\">await</span> <span class=\"title function_\">fetchList</span>()</span><br><span class=\"line\">  <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(data) &amp;&amp; data.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<p>我们约定好的接口传过来的数据可能出现数据不存在，类型对不上等异常错误，在相应地方加上异常的处理提高代码的健壮性</p>\n<p><strong>二、异常捕获</strong></p>\n<blockquote>\n<p>除了接口数据的处理，我们还要做好异常的处理，这里参考一篇博客：<a href=\"https://juejin.cn/post/6996315680651870244\" target=\"_blank\">JavaScript 中的异常处理</a></p>\n</blockquote>\n<h2 id=\"4-lodash\">4 lodash<a title=\"#4-lodash\" href=\"#4-lodash\"></a></h2>\n<p>在进行业务开发时，经常会忽略一些代码健壮性考虑的地方。我们可以使用现有的工具库提升代码健壮性，同时也可以让开发者更关注于业务逻辑的开发。这里推荐的工具库是 lodash。</p>\n<blockquote>\n<p>文档传送门：<a href=\"https://www.lodashjs.com/docs/lodash.get\" target=\"_blank\">Lodash中文文档</a></p>\n</blockquote>\n<p><strong>一、取 object 值</strong></p>\n<p>我们在上面提到了使用解构的方法取对象的值，在这里我们可以使用<code>_.get()</code>方法，进而不用再关注可能出现的异常。</p>\n<p><strong>方法：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.<span class=\"title function_\">get</span>(object, path, [defaultValue])</span><br></pre></td></tr></table></figure>\n<p>根据 <code>object</code>对象的<code>path</code>路径获取值。 如果解析 value 是 <code>undefined</code> 会以 <code>defaultValue</code> 取代。</p>\n<p><strong>参数：</strong></p>\n<ol>\n<li><code>bject</code> <em>(Object)</em>: 要检索的对象。</li>\n<li><code>path</code> <em>(Array|string)</em>: 要获取属性的路径。</li>\n<li><code>[defaultValue]</code> <em>(*)</em>: 如果解析值是 <code>undefined</code> ，这值会被返回。</li>\n</ol>\n<p><strong>返回值：</strong></p>\n<p>返回解析的值。</p>\n","prev":{"title":"js代码质量——逻辑正确性","link":"2022/03/23/js代码质量——逻辑正确性"},"next":{"title":"大四下学期学习计划","link":"2022/03/18/大四下学期学习计划"},"plink":"http://example.com/2022/03/21/js代码质量——健壮性/","toc":[{"id":"0-什么是代码健壮性？","title":"0 什么是代码健壮性？","index":"1"},{"id":"1-函数","title":"1 函数","index":"2"},{"id":"2-解构赋值","title":"2 解构赋值","index":"3"},{"id":"3-接口请求","title":"3 接口请求","index":"4"},{"id":"4-lodash","title":"4 lodash","index":"5"}],"reading_time":"1688 words in 11 min"}