{"title":"vite核心原理（上）","date":"2023-05-16T01:30:09.000Z","date_formatted":{"ll":"May 16, 2023","L":"05/16/2023","MM-DD":"05-16"},"link":"2023/05/16/vite核心原理（上）","tags":["前端","构建工具"],"categories":["Vite"],"updated":"2023-05-21T23:58:50.533Z","content":"<p>构建工具是前端开发提效的重要工具，它拥有各种各样的功能，但是总结为一条就是——解决前端工程中的痛点。如下：</p>\n<ul>\n<li>模块加载：按照制定的模块规范，加载文件</li>\n<li>开发效率：热更新</li>\n<li>语法转译：ts转换js、scss转换css</li>\n<li>产物质量：压缩代码、代码检测、tree-shaking</li>\n</ul>\n<h2 id=\"1-模块化\">1 模块化<a title=\"#1-模块化\" href=\"#1-模块化\"></a></h2>\n<blockquote>\n<p>模块化规范</p>\n<p>构建工具解决的问题</p>\n</blockquote>\n<p>在很多编程语言中，自身就具备了很好的文件和包管理机制，通过import、include、require等等命令，可以引入其他模块、包或者文件。而js早期被认定为简单的网页脚本语言，做一些简单的表单验证或动画，那时候的代码量还是很少的，因此只需要将js写入script标签即可。但是随着前端和js的快速发展，js的代码越来越复杂，没有模块化会带来很多的问题，例如：代码的复用性、隔离性和可维护性等。举几个例子：</p>\n<p><strong>一、早期的模块化手段</strong></p>\n<p>早期模块化还没有诞生时，业界就已经产生了一些模块化开发的手段——<strong>文件划分</strong></p>\n<p>文件划分是将应用的状态和逻辑分散到不同的文件中，最后通过script标签引入。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moudle-a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;wukui&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// module-b.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">helloWorld</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!<span class=\"variable constant_\">DOCTYPE</span> html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./modlue-a.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;./modlue-b.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        console.log(name)</span><br><span class=\"line\">        helloWorld()</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>这种方式存在如下两个问题：</p>\n<ul>\n<li>**依赖管理：**文件之间存在加载顺序，当模块之间相互依赖时，随着模块的增加很难梳理清楚，还会产生运行时的错误</li>\n<li>**隔离性：**各模块之间的变量命名会产生冲突</li>\n</ul>\n<p><strong>二、超大文件的维护</strong></p>\n<p>当代码行数越来越多时，逐渐就演变成了我们口中的💩山，代码变得越来越难以理解和维护，对程序员造成了极大的心智负担。模块化很好的解决了这个问题，通过合理的层次和逻辑划分，可以让代码之间的关联变得清晰，单个模块的职责明确，代码量自然就少了，可阅读性和维护性也随之而升。</p>\n<p>举几个例子：</p>\n<p>从较为宏观的角度来看，现代前端开发框架的模式MVVM(Model-View-ViewModel)，Model层由后端控制，View层由框架来控制，因此开发人员不需要关注数据数据的业务逻辑和DOM的操作，只需要专注于ViewModel处理相应的数据的状态即可。极大的促进了前后端的分离，也提升了前端的开发效率。</p>\n<p>再细粒度的来看，会有一些状态管理工具，帮助我们将ViewModel分为服务层和逻辑层。服务层专注于和后端的交互，通过ajax拿到后端的数据。逻辑层负责处理数据，它不关心如何获取数据，只需要关注数据的状态变化。</p>\n<p>除了代码层面，从代码的管理上也可以看到模块化的好处。vue2源码托管在src目录中，然后更具功能拆分出了然后依据功能拆分出了 compiler、core、platforms、server、sfc、shared等目录。而到了vue3，则是通过monorope的方式维护，将不同的功能拆分到不同的模块当中。事实上不止vue，随着monorope方案的成熟，越来越多的开源项目都在使用monorope的方式进行管理。</p>\n<p><strong>三、CommonJS 横空出世，node应运而生</strong></p>\n<p>2009年1月29日，Mozilla的工程师Kevin Dangoor发布了一篇文章《What Server Side JavaScript needs》，并在Google Groups中创建了一个ServerJS小组，旨在构建更好的JavaScript生态系统，包括服务器端、浏览器端，而后更名为CommonJS小组，发起了CommonJS的提案。当年年末，node基于CommonJS规范横空出世，node跟具模块的不同来源分为了三大类：</p>\n<ul>\n<li>内置模块：fs、path、http等</li>\n<li>自定义模块：用户按照CommonJS规范创建的 js 文件</li>\n<li>第三方模块：由第三方开发的模块，并使用npm进行管理</li>\n</ul>\n<p>凭借着node“单线程”和“天然异步API”下的高性能运行时，JavaScript正式的踏入了服务端领域。自CommonJS诞生以来，前端社区对模块化探索的脚步一直未停止，先后出现了AMD、CMD、UMD和ESModule等模块化规范，并诞生出了一系列的工具</p>\n<ul>\n<li>基于CommonJS规范：node</li>\n<li>基于AMD规范：requireJS</li>\n<li>基于CMD规范：SeaJS</li>\n<li>基于ESModule：node、webpack、vite、浏览器原生支持</li>\n</ul>\n<p><strong>四、ESModule</strong></p>\n<p>ES Module简称ESM，ESM是ES6的开发规范。ES6于2015年6月正式发布，目前已经被大部分主流浏览器原生支持，只要HTML中有type=&quot;module&quot;属性的script标签，那么浏览器就会按照ES Module规范了来进行依赖加载和模块解析。Node最开始使用的是CommonJS规范，但自从v13.2.0之后也引入了ES Module机制。下面两张图是来自<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules\" target=\"_blank\">MDN</a>，显示了import和export的在浏览器上的兼容性。</p>\n<p>import：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7effc532c8c46b49fcf250f724e9e41~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>export：</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f7c6e427c874515b7a7946c306d1225~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>简单列举一下ESModule的使用：</p>\n<p>1）导出模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;wk&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">helloWorld</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// name.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;wk&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">helloWorld</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; name, helloWorld &#125;</span><br></pre></td></tr></table></figure>\n<p>2）导入功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, helloWorld &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./name.js&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>3）HTML应用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;module&quot;</span> src=<span class=\"string\">&quot;./name.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>4）默认导出导入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// name.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;wk&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hello.js 导出匿名函数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> name <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./name.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> helloWorld <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./hello.js&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>5）as 避免命名冲突</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// inside module.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">  function1 <span class=\"keyword\">as</span> newFunctionName,</span><br><span class=\"line\">  function2 <span class=\"keyword\">as</span> anotherNewFunctionName</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// inside main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; newFunctionName, anotherNewFunctionName &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;/modules/module.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// inside module.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; function1, function2 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// inside main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; function1 <span class=\"keyword\">as</span> newFunctionName,</span><br><span class=\"line\">         function2 <span class=\"keyword\">as</span> anotherNewFunctionName &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;/modules/module.js&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>6）合并模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">&#x27;a.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;name.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; helloWorld &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./hello.js&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-vite的使用\">2 vite的使用<a title=\"#2-vite的使用\" href=\"#2-vite的使用\"></a></h2>\n<blockquote>\n<p>简介</p>\n<p>项目搭建</p>\n<p>配置</p>\n</blockquote>\n<p>vite作为新一代的构建工具，最突出的亮点就是极快的构建速度和热更新速度，大大的提升了研发效率，这一点会在后面详细介绍。除此之外，vite在其他方面也表现不俗。</p>\n<p>这里使用vite搭建vue3项目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm create vite</span><br></pre></td></tr></table></figure>\n<p>目录:</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7424f96355c74ae595050e65e6563592~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>package.json:</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6188a5ea1d314b199fd88a1e25a4724a~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>项目安装和启动：虽然项目较小，但是vite构建完成的时间仅使用了789ms</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i // 安装</span><br><span class=\"line\">npm run dev // 启动</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/81d34826c3a544a08bf08efa35b34763~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"2.1-热更新\">2.1 热更新<a title=\"#2.1-热更新\" href=\"#2.1-热更新\"></a></h3>\n<blockquote>\n<p>vite的插件兼容了rollup的所有钩子。如果你的插件仅使用了这些钩子，那么该插件以 rollup-plugin- 前缀，表示该插件是兼容rollup的。</p>\n<ul>\n<li>服务器启动时被调用：options、buildStart</li>\n<li>传入模块时被调用：resolveId、load、transform</li>\n<li>服务器关闭时被调用：buildEnd、closeBundle</li>\n</ul>\n<p>除此之外，vite还提供了一些专属的钩子，这些钩子会被rollup忽略，这类插件以 vite-plugin- 前缀。</p>\n<ul>\n<li>解析vite配置前：config</li>\n<li>解析vite配置后：configResolve</li>\n<li>配置开发服务器：configureServer</li>\n<li>转换index.html：transformIndexHtml</li>\n<li>HMR处理：handleHotUpdate</li>\n</ul>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8c0d21817694bcf8170f404373c27a3~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n</blockquote>\n<p>Vite 提供了一套原生 ESM 的 <strong><a href=\"https://cn.vitejs.dev/guide/api-hmr.html\" target=\"_blank\">HMR API</a></strong>。 具有 HMR 功能的框架可以利用该 API 提供即时、准确的更新，而无需重新加载页面或清除应用程序状态。Vite 内置了 HMR 到 <strong><a href=\"https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue\" target=\"_blank\">Vue 单文件组件（SFC）</a></strong> 和 <strong><a href=\"https://github.com/vitejs/vite-plugin-react/tree/main/packages/plugin-react\" target=\"_blank\">React Fast Refresh</a></strong> 中，当你通过 <strong><a href=\"https://cn.vitejs.dev/guide/\" target=\"_blank\">create-vite</a></strong> 创建应用程序时，所选模板已经为你预先配置了这些。得益于浏览器原生支持ESM，当修改某个文件时，热更新基本不需要时间。这点会在下面详细描述。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b668a1fc3fd64a60aca3c81f47949f15~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>接下来从源码的角度来分析vite如何做到热更新。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f56a81a6cddc40eaa4fb70d3d7f99a63~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<h4 id=\"服务端\">服务端<a title=\"#服务端\" href=\"#服务端\"></a></h4>\n<p>node.js 本身提供了官方的 API 例如 fs.watch fs.watchFile 来监听文件的变化，vite 则使用了这些 API 更上层的封装模块<a href=\"https://www.npmjs.com/package/chokidar\" target=\"_blank\">chokidar</a>来进行文件系统的变动监听。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 开启监听</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> watcher = chokidar.<span class=\"title function_\">watch</span>(</span><br><span class=\"line\">  <span class=\"comment\">// config file dependencies and env file might be outside of root</span></span><br><span class=\"line\">  [root, ...config.<span class=\"property\">configFileDependencies</span>, config.<span class=\"property\">envDir</span>],</span><br><span class=\"line\">  resolvedWatchOptions,</span><br><span class=\"line\">) <span class=\"keyword\">as</span> <span class=\"title class_\">FSWatcher</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发钩子函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onHMRUpdate</span> = <span class=\"keyword\">async</span> (<span class=\"params\">file: string, configOnly: boolean</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (serverConfig.<span class=\"property\">hmr</span> !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> <span class=\"title function_\">handleHMRUpdate</span>(file, server, configOnly)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      ws.<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&#x27;error&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">err</span>: <span class=\"title function_\">prepareError</span>(err),</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件新增、删除触发钩子</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onFileAddUnlink</span> = <span class=\"keyword\">async</span> (<span class=\"params\">file: string</span>) =&gt; &#123;</span><br><span class=\"line\">  file = <span class=\"title function_\">normalizePath</span>(file)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">handleFileAddUnlink</span>(file, server)</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">onHMRUpdate</span>(file, <span class=\"literal\">true</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听文件变化</span></span><br><span class=\"line\">watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"keyword\">async</span> (file) =&gt; &#123;</span><br><span class=\"line\">  file = <span class=\"title function_\">normalizePath</span>(file)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (file.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;/package.json&#x27;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">invalidatePackageData</span>(packageCache, file)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// invalidate module graph cache on file change</span></span><br><span class=\"line\">  moduleGraph.<span class=\"title function_\">onFileChange</span>(file)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">onHMRUpdate</span>(file, <span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听新增文件</span></span><br><span class=\"line\">watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;add&#x27;</span>, onFileAddUnlink)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听删除文件</span></span><br><span class=\"line\">watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;unlink&#x27;</span>, onFileAddUnlink)</span><br></pre></td></tr></table></figure>\n<p>当文件有变动时，vite会触发handleHotUpdate钩子，拿到处理后的上下文，并通过webSocket建立的通道告知浏览器进行刷新或者加载文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行钩子函数，获取上下文</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> hook <span class=\"keyword\">of</span> config.<span class=\"title function_\">getSortedPluginHooks</span>(<span class=\"string\">&#x27;handleHotUpdate&#x27;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> filteredModules = <span class=\"keyword\">await</span> <span class=\"title function_\">hook</span>(hmrContext)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (filteredModules) &#123;</span><br><span class=\"line\">    hmrContext.<span class=\"property\">modules</span> = filteredModules</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通知重新加载</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!hmrContext.<span class=\"property\">modules</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// html file cannot be hot updated</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (file.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;.html&#x27;</span>)) &#123;</span><br><span class=\"line\">    config.<span class=\"property\">logger</span>.<span class=\"title function_\">info</span>(colors.<span class=\"title function_\">green</span>(<span class=\"string\">`page reload `</span>) + colors.<span class=\"title function_\">dim</span>(shortFile), &#123;</span><br><span class=\"line\">      <span class=\"attr\">clear</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">timestamp</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ws.<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&#x27;full-reload&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: config.<span class=\"property\">server</span>.<span class=\"property\">middlewareMode</span></span><br><span class=\"line\">      ? <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">      : <span class=\"string\">&#x27;/&#x27;</span> + <span class=\"title function_\">normalizePath</span>(path.<span class=\"title function_\">relative</span>(config.<span class=\"property\">root</span>, file)),</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// loaded but not in the module graph, probably not js</span></span><br><span class=\"line\">    <span class=\"title function_\">debugHmr</span>(<span class=\"string\">`[no modules matched] <span class=\"subst\">$&#123;colors.dim(shortFile)&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通知更新</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (updates.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">debugHmr</span>(colors.<span class=\"title function_\">yellow</span>(<span class=\"string\">`no update happened `</span>) + colors.<span class=\"title function_\">dim</span>(file))</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">config.<span class=\"property\">logger</span>.<span class=\"title function_\">info</span>(</span><br><span class=\"line\">  colors.<span class=\"title function_\">green</span>(<span class=\"string\">`hmr update `</span>) +</span><br><span class=\"line\">  colors.<span class=\"title function_\">dim</span>([...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(updates.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">u</span>) =&gt;</span> u.<span class=\"property\">path</span>))].<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;, &#x27;</span>)),</span><br><span class=\"line\">  &#123; <span class=\"attr\">clear</span>: !afterInvalidation, <span class=\"attr\">timestamp</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">)</span><br><span class=\"line\">ws.<span class=\"title function_\">send</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&#x27;update&#x27;</span>,</span><br><span class=\"line\">  updates,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"客户端\">客户端<a title=\"#客户端\" href=\"#客户端\"></a></h4>\n<p>浏览器在整个系统扮演着客户端的角色，vite通过transformIndexHtml的hook将客户端代码插入了index.html</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fdcd95093904b2ab41230c566748ceb~tplv-k3u1fbpfcp-watermark.image?\" alt=\"image.png\" loading=\"lazy\" class=\"φbp\"></p>\n<p>客户端接受到消息后，会根据服务端发送的消息进行处理。会根据不同情况，进行请求文件再刷新或者是直接刷新。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;update&#x27;</span>:</span><br><span class=\"line\">      <span class=\"title function_\">notifyListeners</span>(<span class=\"string\">&#x27;vite:beforeUpdate&#x27;</span>, payload)</span><br><span class=\"line\">      <span class=\"comment\">// if this is the first update and there&#x27;s already an error overlay, it</span></span><br><span class=\"line\">      <span class=\"comment\">// means the page opened with existing server compile error and the whole</span></span><br><span class=\"line\">      <span class=\"comment\">// module script failed to load (since one of the nested imports is 500).</span></span><br><span class=\"line\">      <span class=\"comment\">// in this case a normal update won&#x27;t work and a full reload is needed.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isFirstUpdate &amp;&amp; <span class=\"title function_\">hasErrorOverlay</span>()) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"title function_\">reload</span>()</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">clearErrorOverlay</span>()</span><br><span class=\"line\">        isFirstUpdate = <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(</span><br><span class=\"line\">        payload.<span class=\"property\">updates</span>.<span class=\"title function_\">map</span>(<span class=\"keyword\">async</span> (update): <span class=\"title class_\">Promise</span>&lt;<span class=\"keyword\">void</span>&gt; =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (update.<span class=\"property\">type</span> === <span class=\"string\">&#x27;js-update&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">queueUpdate</span>(<span class=\"title function_\">fetchUpdate</span>(update))</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// css-update</span></span><br><span class=\"line\">          <span class=\"comment\">// this is only sent when a css file referenced with &lt;link&gt; is updated</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> &#123; path, timestamp &#125; = update</span><br><span class=\"line\">          <span class=\"keyword\">const</span> searchUrl = <span class=\"title function_\">cleanUrl</span>(path)</span><br><span class=\"line\">          <span class=\"comment\">// can&#x27;t use querySelector with `[href*=]` here since the link may be</span></span><br><span class=\"line\">          <span class=\"comment\">// using relative paths so we need to use link.href to grab the full</span></span><br><span class=\"line\">          <span class=\"comment\">// URL for the include check.</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> el = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(</span><br><span class=\"line\">            <span class=\"variable language_\">document</span>.<span class=\"property\">querySelectorAll</span>&lt;<span class=\"title class_\">HTMLLinkElement</span>&gt;(<span class=\"string\">&#x27;link&#x27;</span>),</span><br><span class=\"line\">          ).<span class=\"title function_\">find</span>(</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span></span><br><span class=\"line\">              !outdatedLinkTags.<span class=\"title function_\">has</span>(e) &amp;&amp; <span class=\"title function_\">cleanUrl</span>(e.<span class=\"property\">href</span>).<span class=\"title function_\">includes</span>(searchUrl),</span><br><span class=\"line\">          )</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!el) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">const</span> newPath = <span class=\"string\">`<span class=\"subst\">$&#123;base&#125;</span><span class=\"subst\">$&#123;searchUrl.slice(<span class=\"number\">1</span>)&#125;</span><span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">            searchUrl.includes(<span class=\"string\">&#x27;?&#x27;</span>) ? <span class=\"string\">&#x27;&amp;&#x27;</span> : <span class=\"string\">&#x27;?&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">          &#125;</span>t=<span class=\"subst\">$&#123;timestamp&#125;</span>`</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// rather than swapping the href on the existing tag, we will</span></span><br><span class=\"line\">          <span class=\"comment\">// create a new link tag. Once the new stylesheet has loaded we</span></span><br><span class=\"line\">          <span class=\"comment\">// will remove the existing link tag. This removes a Flash Of</span></span><br><span class=\"line\">          <span class=\"comment\">// Unstyled Content that can occur when swapping out the tag href</span></span><br><span class=\"line\">          <span class=\"comment\">// directly, as the new stylesheet has not yet been loaded.</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> newLinkTag = el.<span class=\"title function_\">cloneNode</span>() <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLLinkElement</span></span><br><span class=\"line\">            newLinkTag.<span class=\"property\">href</span> = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(newPath, el.<span class=\"property\">href</span>).<span class=\"property\">href</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"title function_\">removeOldEl</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">              el.<span class=\"title function_\">remove</span>()</span><br><span class=\"line\">              <span class=\"variable language_\">console</span>.<span class=\"title function_\">debug</span>(<span class=\"string\">`[vite] css hot updated: <span class=\"subst\">$&#123;searchUrl&#125;</span>`</span>)</span><br><span class=\"line\">              <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            newLinkTag.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;load&#x27;</span>, removeOldEl)</span><br><span class=\"line\">            newLinkTag.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;error&#x27;</span>, removeOldEl)</span><br><span class=\"line\">            outdatedLinkTags.<span class=\"title function_\">add</span>(el)</span><br><span class=\"line\">            el.<span class=\"title function_\">after</span>(newLinkTag)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"title function_\">notifyListeners</span>(<span class=\"string\">&#x27;vite:afterUpdate&#x27;</span>, payload)</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;full-reload&#x27;</span>:</span><br><span class=\"line\">      <span class=\"title function_\">notifyListeners</span>(<span class=\"string\">&#x27;vite:beforeFullReload&#x27;</span>, payload)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (payload.<span class=\"property\">path</span> &amp;&amp; payload.<span class=\"property\">path</span>.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;.html&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// if html file is edited, only reload the page if the browser is</span></span><br><span class=\"line\">        <span class=\"comment\">// currently on that page.</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> pagePath = <span class=\"built_in\">decodeURI</span>(location.<span class=\"property\">pathname</span>)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> payloadPath = base + payload.<span class=\"property\">path</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">          pagePath === payloadPath ||</span><br><span class=\"line\">          payload.<span class=\"property\">path</span> === <span class=\"string\">&#x27;/index.html&#x27;</span> ||</span><br><span class=\"line\">          (pagePath.<span class=\"title function_\">endsWith</span>(<span class=\"string\">&#x27;/&#x27;</span>) &amp;&amp; pagePath + <span class=\"string\">&#x27;index.html&#x27;</span> === payloadPath)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">          location.<span class=\"title function_\">reload</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        location.<span class=\"title function_\">reload</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-vite的快与慢\">3 vite的快与慢<a title=\"#3-vite的快与慢\" href=\"#3-vite的快与慢\"></a></h2>\n<blockquote>\n<p>冷启动、热更新</p>\n<p>首屏渲染、懒加载</p>\n</blockquote>\n<h3 id=\"3.1-vite为什么快？\">3.1 vite为什么快？<a title=\"#3.1-vite为什么快？\" href=\"#3.1-vite为什么快？\"></a></h3>\n<p>vite给人的第一印象就是快，快速的构建，快速的热更新，大幅度的提升了前端开发的效率。而这主要归功于：1）基于浏览器支持ES的实现 2）高性能引擎ESBuild</p>\n<p><strong>一、基于浏览器支持ES的实现</strong></p>\n<p><strong>二、高性能引擎ESBuild</strong></p>\n<h3 id=\"3.2-vite为什么慢？\">3.2 vite为什么慢？<a title=\"#3.2-vite为什么慢？\" href=\"#3.2-vite为什么慢？\"></a></h3>\n<p>成也萧何，败也萧何。因为传统构建工具的打包工作交给了浏览器处理，因此在页面打开时需要大量的加载http请求，导致了vite构建开发环境下的产物首屏渲染和懒加载会很慢。然而vite在打包生产环境的产物时使用的rollup，因此不会存在首屏渲染和懒加载的问题。所以相比vite带来的极速构建速度，首屏渲染和懒加载带来的问题显得“微不足道”，而且针对这些问题，业界也有了对应的解决方案。</p>\n<h2 id=\"4-vite插件开发\">4 vite插件开发<a title=\"#4-vite插件开发\" href=\"#4-vite插件开发\"></a></h2>\n<h2 id=\"参考文章\">参考文章<a title=\"#参考文章\" href=\"#参考文章\"></a></h2>\n<p><a href=\"https://juejin.cn/post/7068273153952186398#heading-7\" target=\"_blank\">详谈前端模块化这十四年的发展史：CommonJS、AMD、CMD、ES6</a></p>\n<p><a href=\"https://juejin.cn/book/7050063811973218341/section/7050063812044685343\" target=\"_blank\">深入浅出 Vite</a></p>\n<p><a href=\"https://juejin.cn/post/7129041114174062628\" target=\"_blank\">漫谈构建工具(四): 为什么有人说 vite 快，有人却说 vite 慢？</a></p>\n<p><a href=\"https://juejin.cn/post/7067827608842403848#heading-3\" target=\"_blank\">十分钟带你了解vite插件开发</a></p>\n<p><a href=\"https://juejin.cn/post/6968793122029436959#heading-3\" target=\"_blank\">vite源码分析(4) :vite 热更新原理分析</a></p>\n","next":{"title":"2023年度计划","link":"2023/05/15/2023年度计划"},"plink":"http://example.com/2023/05/16/vite核心原理（上）/","toc":[{"id":"1-模块化","title":"1 模块化","index":"1"},{"id":"2-vite的使用","title":"2 vite的使用","index":"2","children":[{"id":"2.1-热更新","title":"2.1 热更新","index":"2.1"}]},{"id":"3-vite的快与慢","title":"3 vite的快与慢","index":"3","children":[{"id":"3.1-vite为什么快？","title":"3.1 vite为什么快？","index":"3.1"},{"id":"3.2-vite为什么慢？","title":"3.2 vite为什么慢？","index":"3.2"}]},{"id":"4-vite插件开发","title":"4 vite插件开发","index":"4"},{"id":"参考文章","title":"参考文章","index":"5"}],"reading_time":"3524 words in 23 min"}